{"componentChunkName":"component---src-templates-blog-tag-list-js","path":"/tags/reactjs/","result":{"data":{"site":{"siteMetadata":{"title":"CodeSpud"}},"allMarkdownRemark":{"totalCount":1,"edges":[{"node":{"excerpt":"React and accessibility I love ReactJs. I learned late in my a career as there was not a lot of opportunities to do so. When I finally found…","html":"<h2>React and accessibility</h2>\n<p>I love ReactJs. I learned late in my a career as there was not a lot of opportunities to do so. When I finally found a suitable situation to explore ReactJs for a previous employer. I jumped on it and picked it up real quickly. I was weird in the beginning but it became quite natural in the end. Now I mainly work with ReactJS in most of my projects. </p>\n<p>One of the great things about working with ReactJs is working with JSX. ReactJS does not really understand JSX - we achieve this with Babel. Babel transpile JSX to something ReactJS can understand. Anyhow, JSX is almost like HTML with some differences. And because it looks like HTML markup it becomes really easy to learn. But and its a big but, making it easy to learn does not save developers from issues related to accessibility. Some patterns that is perfectly valid and working in a way in ReactJS does not necessarily accessible.</p>\n<p>For example, when using labels in forms </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">First Name </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>\n    isEditing  \n    <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    : data.FirstName\n  }\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">);</span></code></pre></div>\n<p>When not editing, the input element identified with <code class=\"language-text\">id=firstName</code> is not available. So the browser will ignore the label and but still render it. This is confusing to screenreaders. The markup above looks contrived but you will be suprised how often I see this. We can easily fix this by keeping the input element available to the browser but hidden to the user when not editing. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">First Name </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>isEditing<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">);</span></code></pre></div>\n<p>The outcome is similar as the former but the current markup is more accessible. Screenreader friendly in short. </p>\n<p>I wanted to understand how best tackle accessibility for custom components in React. With some rudimentary understanding of ReactJS. I proceeded with my education with a custom button.  I know I’ve always said to always use semantic tags when possible. That is still true. But to understand what a button should have to make it accessible. Learning to make a custom button seems a good exercise to learn. Not just what aria attributes to put in but what I should looking for when working react and keeping it accessible. Things like styling and visual feedback when buttons are activated etc. </p>\n<h2>Custom Button</h2>\n<p>I started with with a simple ReactJS component. A <code class=\"language-text\">span</code> wrapper element with an onclick event.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token keyword\">function</span> <span class=\"token function\">CustomButton</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restProps <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>restProps<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// usage</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button clicked'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomButton</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Click me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CustomButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The markup rendered for the component above has issues. Firstly, since its a span it needs some styling to make it look like a button. </p>\n<h3>Button styling</h3>\n<p>We add some css to handle hover and clicked event styling.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">/* SCSS */</span>\n\n<span class=\"token selector\">.custom-button </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #f1f2f3<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 140px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> inset -3px -3px 6px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>#000<span class=\"token punctuation\">,</span> 0.15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    1px 1px 2px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>#000<span class=\"token punctuation\">,</span> 0.15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 2px 2px 4px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>#000<span class=\"token punctuation\">,</span> 0.15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0.35rem 0.5rem<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:active </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> inset 3px 3px 6px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>#000<span class=\"token punctuation\">,</span> 0.15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      -1px -1px 2px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>#000<span class=\"token punctuation\">,</span> 0.15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> -2px -2px 4px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>#000<span class=\"token punctuation\">,</span> 0.15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:focus-visible, <span class=\"token parent important\">&amp;</span>:hover </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> 4px dashed orange<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Selectors</h4>\n<p>The <code class=\"language-text\">:actitve</code> selector is applied when the button is clicked. <code class=\"language-text\">:hover</code> as the name suggests the style is applied when the mouse is over the button. Finally, <code class=\"language-text\">:focus-visible</code> will ensure that the button gets a visible outline when the button navigated to using the keyboard. </p>\n<hr>\n<p>Now we are getting somewhere. Our custom button looks like a proper button with drop shadow and on press styling. When I click the button it logs “button clicked” in the console. For a button to be accessible it should be keyboard accessible. Let’s try navigating to the button using <kbd>Tab</kbd> (and <kbd>Shift</kbd> + <kbd>Tab</kbd>) key in the Codepen demo below. </p>\n<p><a href=\"https://codepen.io/chrisbautista/pen/ExpaJMP\"><div><iframe \n        height='400'\n        title='chrisbautista embedded pen' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/ExpaJMP/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<p>As you can see, we are unable to focus the button. Next problem in our custom button we need to tackle is making it operable using the keyboard.</p>\n<h3>Keyboard accessible</h3>\n<p>The <a href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/keyboard-operation-keyboard-operable.html\">WCAG guideline 2.1: Keyboard</a> criterion require interactive content(such as a buttons) to be operable using the keyboard. This is for users that can not use a mouse like people who are blind or with issues which make them prefer the keyboard. Simply, anything you can operate with a mouse should be available for a keyboard user too. </p>\n<h4>Tabindex</h4>\n<p>We need to be able to navigate to the button. What we need is to add tabindex so that it becomes focusable. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">CustomButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restProps <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> \n      <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>custom-button<span class=\"token punctuation\">\"</span></span> \n      <span class=\"token attr-name\">tabIndex</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span></span> \n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span> \n      <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>restProps<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cool!😎. Now its focusable. Next, press <kbd>Enter</kbd> key to trigger the button. If you notice nothing happened, that is because we lack a keyboard event handler! </p>\n<h4>Keydown handler</h4>\n<p>We need a <code class=\"language-text\">KeyDown</code> handler that runs the same operation as if it was clicked like a native button. And like how a native button works we trigger the designated action with <kbd>Enter</kbd> and <kbd>Spacebar</kbd> keys.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">CustomButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restProps <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onKeyDown</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'Enter'</span> or e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'Spacebar'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> \n      <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>custom-button<span class=\"token punctuation\">\"</span></span> \n      <span class=\"token attr-name\">tabIndex</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span></span> \n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span> \n      <span class=\"token attr-name\">onKeyDown</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onKeyDown<span class=\"token punctuation\">}</span></span> \n      <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>restProps<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let’s see how it works so far, Use the <kbd>Tab</kbd> key to navigate and activate the button,</p>\n<p><a href=\"https://codepen.io/chrisbautista/pen/gOjbJLB\"><div><iframe \n        height='400'\n        title='chrisbautista embedded pen' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/gOjbJLB/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<h5>Keydown styling</h5>\n<p>Nice, the action is activated with either the <kbd>Enter</kbd> or <kbd>Spacebar</kbd> key but there is another issue. None of the previous styles we added earlier will apply when we activate the custom button using the keyboard. We don’t have a selector for that so we need to use class selectors. </p>\n<p>Since this is a state of the button, we need to provision the component to track it internally. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">CustomButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restProps <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isPressed<span class=\"token punctuation\">,</span> setIsPressed<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onKeyDown</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\"Enter\"</span> <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\"Spacebar\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setIsPressed</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// when pressed</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onKeyUp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\"Enter\"</span> <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\"Spacebar\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setIsPressed</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// when keyboard released a key</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We need to tell the button when to apply the “button pressed” styling. We accomplish that by setting a className, <code class=\"language-text\">custom-button-pressed</code>. We can recyle the <code class=\"language-text\">:active</code> styling defined earlier. </p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">.custom-button </span><span class=\"token punctuation\">{</span>\n  \n  <span class=\"token comment\">//...*</span>\n\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:active,\n  <span class=\"token parent important\">&amp;</span>-pressed </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> inset 3px 3px 6px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>#000<span class=\"token punctuation\">,</span> 0.15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      -1px -1px 2px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>#000<span class=\"token punctuation\">,</span> 0.15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> -2px -2px 4px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>#000<span class=\"token punctuation\">,</span> 0.15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, we apply/remove the class name whenever the state changes.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">let</span> classNames <span class=\"token operator\">=</span> <span class=\"token string\">\"custom-button\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    classNames <span class=\"token operator\">+=</span> <span class=\"token string\">\" custom-button-pressed\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span>\n      <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>classNames<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">tabIndex</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onKeyDown</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onKeyDown<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onKeyUp</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onKeyUp<span class=\"token punctuation\">}</span></span>\n      <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>restProps<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Voila, the button style when activated with the keyboard works. </p>\n<p><a href=\"https://codepen.io/chrisbautista/pen/WNKQWxj\"><div><iframe \n        height='400'\n        title='chrisbautista embedded pen' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/WNKQWxj/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<h3>Screen reader</h3>\n<p>Our custom button is looking great! To recap, we styled the button and made it operable with both the mouse and the keyboard. It looks shipable, right? </p>\n<p>Not yet.</p>\n<p>If you use a screenreader now, you will notice that the custom button is treated as a clickable div - NOT a button. Since we only made the span look and act like a button. The browsers does not tell the screenreader that we’ve made a button it still thinks this is a div with a <code class=\"language-text\">on click</code> handler. We need to provide more information to the browsers so it can intepret are custom markup as a button element. </p>\n<h4>Role=button</h4>\n<p>To tell the browser that we have a button we assign it a <code class=\"language-text\">role</code> of <code class=\"language-text\">button</code>; Simple enough right?</p>\n<blockquote>\n<p>ARIA roles provide semantic meaning to content, allowing screen readers and other tools to present and support interaction with object in a way that is consistent with user expectations of that type of object. </p>\n</blockquote>\n<p>I mentioned before we should be using <a href=\"/2022/five_steps_to_improve_accessibility/\">semantic tags</a>. The browser readily understands the behavior and information about semantic elements telling assistive technologies(like a screenreader) what to expect. This is already baked in to the semantic element. We can just use it straight away. On the otherhand, our custom button needs our help providing those information to the browser.  Setting the role turns our custom button to a semantic button element. </p>\n<p>Test with a screenreader.</p>\n<p><a href=\"https://codepen.io/chrisbautista/pen/BaPoEbw\"><div><iframe \n        height='400'\n        title='chrisbautista embedded pen' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/BaPoEbw/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<blockquote>\n<p>Install a screenreader</p>\n<ul>\n<li><a href=\"https://www.nvaccess.org/\">NVDA</a> for windows </li>\n<li><a href=\"https://www.apple.com/voiceover/info/guide/_1121.html\">VoiceOver</a> for Macs</li>\n<li><a href=\"https://wiki.gnome.org/Projects/Orca\">ORCA</a></li>\n</ul>\n</blockquote>\n<h2>React hook: useButton</h2>\n<p>I like React hooks. Its great for reusing functionality. Our custom button is great but we are stuck with a span element. We can change this in a number of ways. My favorite is moving the component behavior and state in a React hook. Once we’ve moved the behavior out of the custom button. We don’t really need the custom component anymore. We can directly apply the props into any element. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> className <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isPressed<span class=\"token punctuation\">,</span> setIsPressed<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onKeyDown</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\"Enter\"</span> <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\"Spacebar\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setIsPressed</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onKeyUp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\"Enter\"</span> <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\"Spacebar\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsPressed</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    isPressed<span class=\"token punctuation\">,</span> <span class=\"token comment\">// tells if the button is pressed</span>\n    <span class=\"token literal-property property\">a11yProps</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// props that tell the browser this is a button </span>\n      <span class=\"token literal-property property\">tabIndex</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">role</span><span class=\"token operator\">:</span> <span class=\"token string\">\"button\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">eventProps</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// event handlers </span>\n      onClick<span class=\"token punctuation\">,</span>\n      onKeyDown<span class=\"token punctuation\">,</span>\n      onKeyUp\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// usage</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isPressed<span class=\"token punctuation\">,</span> a11yProps<span class=\"token punctuation\">,</span> eventProps <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> onClick <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> className <span class=\"token operator\">=</span> <span class=\"token string\">\"custom-button\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    className <span class=\"token operator\">+=</span> <span class=\"token string\">\" custom-button-pressed\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//...</span>\n  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>a11yProps<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>eventProps<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    Click Me\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n\n\n  <span class=\"token comment\">//...</span></code></pre></div>\n<p><a href=\"https://codepen.io/chrisbautista/pen/poZjmNG\"><div><iframe \n        height='400'\n        title='chrisbautista embedded pen' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/poZjmNG/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<p>For the <code class=\"language-text\">a11yProps</code>, we only needed <code class=\"language-text\">tabIndex</code> and <code class=\"language-text\">role=button</code> for our purpose but we can extend that for other aria props e.g. for a toggle button. A toggle button keeps its <code class=\"language-text\">isPressed</code> state until triggered again. Using <code class=\"language-text\">aria-pressed</code>, we can keep the state set for the browser’s benefit. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// usage</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isPressed<span class=\"token punctuation\">,</span> a11yProps<span class=\"token punctuation\">,</span> eventProps <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> onClick <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> className <span class=\"token operator\">=</span> <span class=\"token string\">\"custom-button\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    className <span class=\"token operator\">+=</span> <span class=\"token string\">\" custom-button-pressed\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> newA11yProps <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>a11Props<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'aria-pressed'</span><span class=\"token operator\">:</span> isPressed<span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'aria-label'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Toggle'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//...</span>\n  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>newA11yProps<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>eventProps<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle-notch<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n\n\n  <span class=\"token comment\">//...</span></code></pre></div>\n<p>Also, thrown in <code class=\"language-text\">aria-label</code> to the previous to fix the lack of visible text.</p>\n<h2>Wrapping up</h2>\n<p>To make an accessible custom button component we need a few things</p>\n<ul>\n<li>CSS to simulate a button state from unpressed, focused, and when activated. </li>\n<li>Event handlers not just for the mouse but for the keyboard as well</li>\n<li>Aria to change the semantic meaning of an element to a button </li>\n</ul>\n<p>With the <code class=\"language-text\">useButton</code> hook we can extract the learnings from this exercise into a reusable function and apply it anywhere we need a custom button element. </p>","fields":{"slug":"/2022/custom_button-a_study_on_react_accessibility/"},"frontmatter":{"date":"December 19, 2022","title":"React Custom button: a study on accessibility","featured_image":"/blog/daniel-ali-ju1yFZkrxVg-unsplash.jpg","tags":["web-development","reactjs","accessibility"]}}}]}},"pageContext":{"tag":"reactjs"}},"staticQueryHashes":["2139210123","63159454"]}