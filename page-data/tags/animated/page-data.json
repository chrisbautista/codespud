{"componentChunkName":"component---src-templates-blog-tag-list-js","path":"/tags/animated/","result":{"data":{"site":{"siteMetadata":{"title":"CodeSpud"}},"allMarkdownRemark":{"totalCount":3,"edges":[{"node":{"excerpt":"I am a big Big Bang Theory fan. So is my wife. Her absolute favorite character is Sheldon Cooper. In one of the episodes Sheldon proposed an…","html":"<p>I am a big Big Bang Theory fan. So is my wife. Her absolute favorite character is Sheldon Cooper. In one of the episodes Sheldon proposed an improved version of the rock-paper-scissors game.  This version extends the possible moves to five(5). The additional two options would increase the possibility of win chances as it minimizes the chance of both players picking the same move. </p>\n<p>I made a javascript version. Using a few emojis for the hand graphics. I made a very simple interface</p>\n<h2>Game logic</h2>\n<p>The game logic is pretty simple. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">build gameboard\n\n:play\n  get user move\n  get computer move\n  get win_or_lose\n  increment round\n  if (round equals max_round) goto display_winner\n  goto play \n\n:display_winner\n...\nend game</code></pre></div>\n<p>To check who wins per round we need to know the rules of the game (taken from Big Bang Theory wiki).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Scissors cuts Paper\nPaper covers Rock\nRock crushes Lizard\nLizard poisons Spock\nSpock smashes Scissors\nScissors decapitates Lizard\nLizard eats Paper\nPaper disproves Spock\nSpock vaporizes Rock\n(and as it always has) Rock crushes Scissors</code></pre></div>\n<p>Here is the rules again in javascript.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">winOrLose</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">playerChoice<span class=\"token punctuation\">,</span> computerChoice</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Scissor <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Paper<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Paper <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Rock<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Rock <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Lizard<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Lizard <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Spock<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Scissors <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Lizard<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Rock <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Scissor<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Spock <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Scissors<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Lizard <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Paper<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Paper <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Spock<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Spock <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Rock<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// player wins </span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I love hash tables! They minimize code complexity further. This is a great alternative to the code above.  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">WIN_OR_LOSE</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Hands<span class=\"token punctuation\">.</span>Paper<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Hands<span class=\"token punctuation\">.</span>Rock<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Hands<span class=\"token punctuation\">.</span>Rock<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Hands<span class=\"token punctuation\">.</span>Scissor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Hands<span class=\"token punctuation\">.</span>Scissor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Hands<span class=\"token punctuation\">.</span>Paper<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token constant\">WIN_OR_LOSE</span><span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>playerChoice<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>computerChoice<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// player wins</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The previous bit of code only handle win conditions, what if both players choose the same move? We test this even before testing win conditions,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">winOrLose</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">playerChoice<span class=\"token punctuation\">,</span> computerChoice</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> computerChoice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// show tie result  </span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, we test if the game has ended. Whenever a round ends, we check if the game should end(finished 10 rounds). If yes, we calculate the game result and notify the user.   </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">gameOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>yourScore<span class=\"token punctuation\">,</span> pcScore<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>games <span class=\"token operator\">>=</span> maxGames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>yourScore <span class=\"token operator\">===</span> pcScore<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">gameResult</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"It's a draw!\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>yourScore <span class=\"token operator\">></span> pcScore<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">gameResult</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You win!\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"win\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">gameResult</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You lost!\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lose\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>User interface</h2>\n<p>For the input, I made five(5) buttons with images corresponding each game move. When the game starts you are prompted to choose a move. When the player chooses a game move, it’s checked agains winning conditions and depending on the outcome computes the score. </p>\n<figure>\n<img src=\"/blog/Rock-Paper-Scissors-Lizard-Spock-Game-Images.png\" alt=\"rock-paper-scissors game buttons\">\n<figcaption>\n<span>Rock-paper-scissors-lizard-spock game buttons</span>\n</figcaption>\n</figure>\n<p><a href=\"https://codepen.io/chrisbautista/pen/dyJyebW\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/dyJyebW/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<p>Play the <a href=\"https://codepen.io/chrisbautista/full/dyJyebW\">game</a>. Enjoy!</p>","fields":{"slug":"/rock-paper-scissors-lizard-spock/"},"frontmatter":{"date":"November 20, 2022","title":"Rock-Paper-Scissors-Lizard-Spock Game","featured_image":"/blog/marcus-wallis-R1qHDAEnCmc-unsplash.jpg","tags":["interactive","javascript","ui","animated","game"]}}},{"node":{"excerpt":"I wanted to see how much we can accomplish with just CSS transitions. No keyframe animations at all. Although you would probably have more…","html":"<p>I wanted to see how much we can accomplish with just CSS transitions. No keyframe animations at all. Although you would probably have more control over the animation with keyframes. For our demo, we just need a simple change from one state to another. CSS transitions is just what we need.</p>\n<p>One of the animations, I used a technique I call the Sibling-Follow technique. Before you ask, I did not invent this technique nor the name. Its just nice to call something when its this good. I got it from one of the frontend sites - I forgot which. </p>\n<p>When I understood the technique. My brain just ran on overdrive and was sketching different designs I can abuse this technique with. I used this to animate the highlight element in the pen below.  </p>\n<h2>Sibling-Follow Technique</h2>\n<p>To illustrate, let me walk you through a simple tab bar animation. If you are familiar with Material UI tabs, it behaves very similar. </p>\n<p><a href=\"https://mui.com/material-ui/react-tabs/\">Material UI tabs</a></p>\n<p>Firstly, make a list of buttons, then add another element and set the class as <code class=\"language-text\">follow</code>. We will use this to target and style the element later.  </p>\n<p><strong>HTML</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 1 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 2 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 3 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 4 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 5 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>follow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>CSS</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">ul,\nli</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">list-style-type</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">ul</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">li</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.follow</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> left 0.4s ease-in-out<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 2px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I made some javascript event handler to apply the <code class=\"language-text\">active</code> class to the list item containing the button I clicked. </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 1 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>active<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 2 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 3 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 4 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 5 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>follow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Using the sibling selector(~), we get the desired styling of <code class=\"language-text\">.follow</code> element defining the final state we require. In this case, I want to position the mentioned element right above the second list button.  </p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">li:nth-child(2):active ~ .follow</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 60px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With a bit of experimenting, I added the left position to the follow element to every instance where the list-item is “active”. </p>\n<p>Voila! With the magic of CSS transitions, we get a simple sliding highlight animation ala Material UI tabs with just a few simple markup and CSS. </p>\n<p>For my demo, I hardcoded the <code class=\"language-text\">left</code> property to the CSS for each transition state. You might want to use some Javascript calculations so that you don’t need to do this manually especially if you’re going to incorporate this to your professional work. </p>\n<p>You can make it fancier by animating the width of the follow tab at different speeds. Try different easing functions. Make multiple <code class=\"language-text\">follow</code> elements running at different vectors. I’ll let you play with that on your own. Let your imagination run free. </p>\n<p>I made five tab bar styles. Feel free to use these in your projects. </p>\n<h2>Conclusion</h2>\n<ul>\n<li>You can make pretty amazing things with just some simple CSS, HTML and a bit of Javascript.</li>\n<li>Sibling-Follow technique is simple technique you can use to create tab animations. </li>\n<li>If you just want to animate a simple change from one state to another. CSS transitions is your best friend. If you want to be more flexible I suggest learning the Animation API. </li>\n</ul>\n<p>All in all I was happy with the outcome of this exercise. I had so much fun and I learned a lot. We could improve it with some accessibility work though.😜 That is something we can work on for another day. </p>\n<p>I’ll try to explain the other animation styles I made in this pen for later. Until next time.</p>\n<p><strong>Update</strong>: This pen got showcased in a Codepen Spark newsletter last April 14th (link below). Thanks Codepen!😀🎉</p>\n<p><a href=\"https://codepen.io/spark/280\">Tab Bar Styles, AI Games, and Some Good Forking News (April 14)</a>.</p>\n<p><a href=\"https://codepen.io/chrisbautista/pen/NWXjqLN\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/NWXjqLN/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>","fields":{"slug":"/animated-bottom-bar/"},"frontmatter":{"date":"November 19, 2022","title":"Animated Bottom Bar","featured_image":"/blog/sigmund-_dJCBtdUu74-unsplash.jpg","tags":["javascript","css","ui","animated","interactive"]}}},{"node":{"excerpt":"As part of the work I do for my employer, I analyze UI elements on our product to check if we need to re-engineer the component to improve…","html":"<p>As part of the work I do for my employer, I analyze UI elements on our product to check if we need to re-engineer the component to improve accessibility. One of the accessibility challenges I’ve reworked for our company site is the tabbed container.</p>\n<p>Imagine a folder with pages you can flip through using tabs at the edges. That is the closest I can imagine when I think of tabbed containers. This concept is very straightforward, you have tabs on top that serves as buttons to access the corresponding grouped content. Only one grouped content is shown at anytime. I love tabbed containers because they are a very good at cleaning up the interface when you have so much content but have the same level of importance.</p>\n<p>For the new component I based it of the <a href=\"https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/\">tab panel pattern</a> suggested in the WAI(<em>Web Accessibility Initiative</em>) site.</p>\n<h2>Focus Order</h2>\n<p>When I started, when using the keyboard with the old tabbed container, the focus goes from the first tab, 2nd tab, 3rd tab, etc. then tab content 1 and so on. You need to finish traversing the tabs before you can access to the first tabs content. This is confusing to screenreader users as you would assume when you focus to a tab you are able to read the content.  </p>\n<figure>\n  <img src=\"/blog/build_an_accessible_tab_container___focus_order.png\" alt=\"incorrect focus order\">\n  <figcaption>\n    Navigation sequence does not follow the natural way of content consumption.\n  </figcaption>\n</figure>\n<p>To improve the focus/read order, we should make the first tab active and prevent the inactive tabs from getting focus sequence. Navigation will go directly to the content when tabbing through. Another rule some UI developers forget is to make sure hidden elements should not get focus. So for the example above, “Services” and “Products” content panel should not receive focus when inactive/not shown.  </p>\n<figure>\n  <img src=\"/blog/build_an_accessible_tab_container___correct_focus_order.png\" alt=\"corrected focus order\">\n  <figcaption>\n    <p> Now user is only able to access the currently active tab and tab content</p>.\n  </figcaption>\n</figure>\n<h2>Keyboard controls</h2>\n<p>The old tab container component only supported the <kbd>Tab</kbd> key to navigate which only follow the DOM sequence. A few tabs is tolerable but once you get a more than five(5) tabs it can be annoying for the user to use.  </p>\n<p>To make the component keyboard accessible, we add behavior that follows the WAI tab panel pattern. The tab navigation activates once the focus goes to the active tab (button) and then using the <kbd>Arrow Left</kbd> and <kbd>Arrow Right</kbd> keys a user can navigate to the previous and next tabs correspondingly. </p>\n<p>Additionally, you have two types of tab container behavior. <em>Automatic</em> tab containers will switch to a new tab when focus changes while <em>Manual</em> tabbed containers uses <kbd>Enter</kbd> or <kbd>Spacebar</kbd> key to confirm the switch. I will adopt the “automatic” behavior for the purpose of our demo. </p>\n<figure>\n  <img src=\"/blog/build_an_accessible_tab_container___active_tab_focused.png\" alt=\"active tab is focused\">\n  <figcaption>\n    <p>Active tab shows focused styling when navigating with the keyboard. Using the arrow keys we can navigate to other tabs.</p>  \n  </figcaption>\n</figure>\n<h2>ARIA attributes</h2>\n<figure>\n  <blockquote> Accessible Rich Internet Applications (ARIA) is a set of roles and attributes that define ways to make web content and web applications (especially those developed with JavaScript) more accessible to people with disabilities.\n  </blockquote>\n  <figcaption>\n    <cite>- MDN</cite>  \n  </figcaption>\n</figure>\n<p>It would have been nice if there was a tab panel semantic tag. There is none so we use ARIA attributes. On its own ARIA attributes do not do much. It does not add styling or extra behavior. But, for screenreader or tools to aide people with health conditions or impairments, ARIA attributes add extra meaning to the elements so that a browser knows how to intepret whats on the page for the mentioned tools. </p>\n<p>For the tabbed container, we set the following ARIA attributes.  </p>\n<table>\n  <thead>\n  <tr>\n    <th style=\"min-width: 200px;\">ARIA attribute/role</th>\n    <th>Description</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr>\n    <td>role=tablist</td>\n    <td>Container for tab buttons</td>\n  </tr>\n  <tr>\n    <td>role=tab</td>\n    <td>Tab button element, contains the label for the currently active content</td>\n  </tr>\n  <tr>\n    <td>role=tabpanel</td>\n    <td>Container for the currently active tab content</td>\n  </tr>\n  <tr>\n    <td>aria-selected=true</td>\n    <td>Tab button is selected and content is visible</td>\n  </tr>\n  <tr>\n    <td>aria-selected=false</td>\n    <td>Tab button is inactive and content is hidden</td>\n  </tr>\n  <tr>\n    <td>tabindex=-1</td>\n    <td>Removes the element from tab order sequence. We use this for the inactive tabs and hidden tab content. Aids in focus management.</td>\n  </tr>\n  <tr>\n    <td>aria-controls=ID</td>\n    <td>Set on the tab button. ID refers to the associated tab content</td>\n  </tr>\n  <tr>\n    <td>aria-labelledby=ID</td>\n    <td>Set on the tab content container. Refers to the tab button serving as a label for the content.</td>\n  </tr>\n  <tr>\n    <td>tabindex=0</td>\n    <td>Set on the tab content container. Puts the container back to tab sequence</td>\n  </tr>\n  </tbody>\n</table>\n<h2>Our tabbed container in action</h2>\n<p><a href=\"https://codepen.io/chrisbautista/pen/XWZgrVx\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/XWZgrVx/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>","fields":{"slug":"/accessible-tab-container/"},"frontmatter":{"date":"October 10, 2022","title":"Build an Accessible Tab Container","featured_image":"/blog/chiara-f-MI8He1NWPWg-unsplash.jpg","tags":["accessibility","ui","animated"]}}}]}},"pageContext":{"tag":"animated"}}}