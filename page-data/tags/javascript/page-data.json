{"componentChunkName":"component---src-templates-blog-tag-list-js","path":"/tags/javascript/","result":{"data":{"site":{"siteMetadata":{"title":"CodeSpud"}},"allMarkdownRemark":{"totalCount":6,"edges":[{"node":{"excerpt":"Why I made the demo I wanted to see how much we can accomplish with just CSS transitions. No keyframe animations at all. Although you would…","html":"<h2>Why I made the demo</h2>\n<p>I wanted to see how much we can accomplish with just CSS transitions. No keyframe animations at all. Although you would probably have more control over the animation with keyframes. For our demo, we just need a simple change from one state to another. CSS transitions is just what we need.</p>\n<p>For the animation, I leveraged a technique I call the follow-sibling technique. Before you ask, I did not invent this technique nor the name. Its just nice to call something when its this good. I got it from one of the frontend sites - I forgot which. </p>\n<p>When I understood the technique. My brain just ran on overdrive and was sketching different designs I can abuse this technique with. I used this to animate the highlight element in the pen below.  </p>\n<h3>Follow-Sibling Technique</h3>\n<p>To illustrate, let me walk you through a simple tab bar animation. If you are familiar with Material UI tabs, this is my take on it. </p>\n<p>Firstly, make a list of buttons, then add another element and set the class as <code class=\"language-text\">follow</code>. We will use this to target and style the element later.  </p>\n<p><strong>HTML</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 1 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 2 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 3 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 4 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 5 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>follow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>CSS</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">ul,\nli</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">list-style-type</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">ul</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">li</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.follow</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> left 0.4s ease-in-out<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 2px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I made some javascript event handler to apply the <code class=\"language-text\">active</code> class to the list item containing the button I clicked. </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 1 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>active<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 2 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 3 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 4 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 5 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>follow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Using the sibling selector(~), we get the desired styling of <code class=\"language-text\">.follow</code> element defining the final state we require. In this case, I want to position the mentioned element right above the second list button.  </p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">li:nth-child(2):active ~ .follow</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 60px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With a bit of experimenting, I added the left position to the follow element to every instance where the list-item is “active”. </p>\n<p>Voila! With the magic of CSS transitions, we get a simple sliding highlight animation ala Material UI tabs with just a few simple markup and CSS. </p>\n<p>For my demo, I hardcoded the <code class=\"language-text\">left</code> property to the CSS for each transition state. You might want to use some Javascript calculations so that you don’t need to do this manually especially if you’re going to incorporate this to your professional work. </p>\n<p>You can make it fancier by animating the width of the follow tab at different speeds. Try different easing functions. Make multiple <code class=\"language-text\">follow</code> elements running at different vectors. I’ll let you play with that on your own. Let your imagination run free. </p>\n<p>I made five tab bar styles. Feel free to use these in your projects. </p>\n<h2>Conclusion</h2>\n<ul>\n<li>You can make pretty amazing things with just some simple CSS, HTML and a bit of Javascript. </li>\n<li>If you just want to animate a simple change from one state to another. CSS transitions is your best friend. If you want to be more flexible I suggest learning the Animation API. </li>\n</ul>\n<p>All in all I was happy with the outcome of this exercise. I had so much fun and I learned a lot. We could improve it with some accessibility work though.😜 That is something we can work on for another day. </p>\n<p><strong>Update</strong>: This pen got showcased in a Codepen Spark newsletter last April 14th (link below). Thanks Codepen!😀🎉</p>\n<p><a href=\"https://codepen.io/spark/280\">Tab Bar Styles, AI Games, and Some Good Forking News (April 14)</a>.</p>\n<p><a href=\"https://codepen.io/chrisbautista/pen/NWXjqLN\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/NWXjqLN/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>","fields":{"slug":"/animated-bottom-bar/"},"frontmatter":{"date":"November 19, 2022","title":"Animated Bottom Bar","featured_image":"/blog/sigmund-_dJCBtdUu74-unsplash.jpg","tags":["javascript","css","ui","animated","interactive"]}}},{"node":{"excerpt":"Lightweight jQuery Plugin to transform links containing images into quick previews. See project page for examples. Install Download files…","html":"<blockquote>\n<p>Lightweight jQuery Plugin to transform links containing images into quick previews.</p>\n</blockquote>\n<p>See project page for examples.</p>\n<p><strong>Install</strong></p>\n<ol>\n<li>Download files.</li>\n<li>Copy boxer.js, boxer.css, and close.png into your project</li>\n<li>Include boxer.js and boxer.css</li>\n<li>Enclose target anchors in a container e.g.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"boxer\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"picture1.png\"</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"this is a picture\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token string\">\"picture1_thumb.jpg\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n    \n  <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"picture2.png\"</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"this is another picture\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token string\">\"picture2_thumb.jpg\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<ol start=\"5\">\n<li>Run code <code class=\"language-text\">$(&quot;.boxer&quot;).boxer();</code></li>\n</ol>\n<p><strong>Supports</strong></p>\n<ul>\n<li>images</li>\n<li>html snippet via AJAX</li>\n</ul>\n<p><strong>Roadmap</strong></p>\n<ul>\n<li>Easing</li>\n<li>Better AJAX support</li>\n<li>Presentation Mode</li>\n<li>JSON Processing</li>\n</ul>\n<p><strong>Download Links</strong></p>\n<p><a href=\"https://github.com/chrisbautista/boxerjs\" title=\"Boxer JS Jquery plugin github repository\">https://github.com/chrisbautista/boxerjs</a></p>","fields":{"slug":"/boxerjs/"},"frontmatter":{"date":"March 02, 2015","title":"BoxerJS","featured_image":"/boxerjs_codespud.png","tags":["javascript","jquery","extension"]}}},{"node":{"excerpt":"I’ve got some leeway pushing Khrunus off the ground.  I’ve always been successful using JavaScript’s timing functions but since Khrunus would primarily be built-in in AngularJS. I have to research a way to reuse my timing snippets into proper Angular code.  To study, I built a simple angular app:","html":"<p>I’ve got some leeway pushing <a title=\"Khrunus\" href=\"https://github.com/chrisbautista/Khrunus\" target=\"_blank\">Khrunus</a> off the ground.  I’ve always been successful using JavaScript’s timing functions but since Khrunus would primarily be built-in in AngularJS. I have to research a way to reuse my timing snippets into proper Angular code.  To study, I built a simple angular app:<!--more--> </p>\n<h2>Problem</h2>\n<p>How to use AngularJS to make a time-related app, in this case, a timer for logging elapsed time?</p>\n<h2>What I need</h2>\n<p>Before I started this little venture, I need to detail the parameters of the experiment.</p>\n<p>Firstly,  I need to layout my application into two sections. The top section will show a digital clock face and a button to toggle(start or stop) the clock. The bottom section will be a table showing start and end times, as well as the total duration. To know that the application is successful, start and end times should be logged. Using those values I can compute for the duration.</p>\n<p>We have two modes; an idle state,”stopped” and an active mode,”started”. We need to consider that when coding the helper functions.</p>\n<h2>Solution</h2>\n<p>Firstly, we start with a basic AngularJS template. Please note I am assuming you have at least some experience working with HTML, Javascript, and AngularJS.</p>\n<p>I need two sections so I make two main DIVs.</p>\n<p>Next, in DIV 1,  we add another div to serve as the container for the timer digits and a button.</p>\n<p>Next in DIV #2, we format a table with a header and three columns; “Start”, “End” and “Duration(secs)” correspondingly.</p>\n<p>What we have now is not very pretty, we’re going to fix that in a bit. Create a CSS file, call it “app.css”. Let’s style everything as follows,</p>\n<p>Looking good! 🙂  Now to add the functionality we need. Let’s start with some data binding and a basic controller.</p>\n<h4>HTML</h4>\n<h3>Javascript</h3>\n<p>Awesome! For the button, we’re going to use that as a trigger to toggle between modes as well as an indicator to show the user what’s happening.</p>\n<p>Now, we can switch between modes, using the button data {{mode}} as a toggle flag. Now to the meat of the application, as a reference I’m going to use this basic clock code I use when I need digital clock displays.</p>\n<p>The hero of this application is AngularJS’s <a title=\"$timeout service\" href=\"https://docs.angularjs.org/api/ng/service/$timeout\" target=\"_blank\">$timeout service</a>. The $timeout service gives the user a wrapper for window.setTimeOut. So it still acts like setTimeOut but with the code organization and excellent exception handling that AngularJS provides. Our code should follow this format</p>\n<p>We build the clock functionality via a $timeout statement, but first let’s refactor our controller and add two functions to handle the Start and Stop modes.</p>\n<p>Now for the $timeout service,</p>\n<p>You can see that we used the timeout service to recursively call the <strong>StartTimer</strong> function. When you call <code class=\"language-text\">$timeout</code>, just as window.setTimeOut, you create a timing object that we then save to our variable ‘tmPromise’. We’ll get into more of that later just take a note of it. Since we’re really making a stopwatch and not a clock that tells the current time, let’s recode. We need the current time so we use <code class=\"language-text\">date.getTime()</code>. Adding two more variables timeStart and timeEnd. When we button is clicked, we save the time to <strong>timerStart</strong>. Every time the timeout completes and we call StartTimer, the value of <strong>$scope.timeEnd</strong> changes. We then subtract <strong>$scope.timeStart</strong> to get the current elapsed time in milliseconds. We add some normalization code and we end up with this,</p>\n<p>Now for the stopTimer function, issuing the cancel method will stop the $timeout service. Remember the variable we made earlier, ‘tmPromise’. We will use that as the parameter for our cancel call illustrated below. We then collect the start and end times and push that into the history array.</p>\n<h3>Conclusion</h3>\n<p>Yay, we just made an AngularJS timer widget. Adding a service to insert a line in our table we end up with this.</p>\n<p>This is a very simple implementation. One that did not need a unit test but if we wanted to, we can use a $timeout.flush() method. More details from the reference links below.</p>\n<p>See the app in action <a title=\"here\" href=\"http://chrisbautista.github.io/experiments/cbTimerDirective/public_html/\" target=\"_blank\"><strong>here</strong></a></p>\n<blockquote>\n<p>** UPDATE: Code sample here <a title=\"here\" href=\"http://chrisbautista.github.io/experiments/cbTimerDirective/public_html/\" target=\"_blank\"><strong>here</strong></a></p>\n</blockquote>\n<p>Download all the source <a title=\"angular js timer experiment zip file\" href=\"http://chrisbautista.github.io/experiments/cbTimer/angularjs_timer_experiment.zip\" target=\"_blank\"><strong>here</strong></a>.</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://docs.angularjs.org/api/ng/service/$timeout\">https://docs.angularjs.org/api/ng/service/$timeout</a></li>\n<li><a href=\"https://docs.angularjs.org/api/ng/filter/date\">https://docs.angularjs.org/api/ng/filter/date</a></li>\n</ul>","fields":{"slug":"/how-to-make-a-timer-stopwatch-using-angularjs/"},"frontmatter":{"date":"September 28, 2014","title":"How To Make A Timer/Stopwatch Using AngularJS","featured_image":"/assets/2014/09/angular-featured.png","tags":["frontend","angularjs","ui","javascript"]}}},{"node":{"excerpt":"Surf, in celebration of it’s anniversary, is thanking it’s customers with “American Idol”-ish contest. Participants are asked to send in a…","html":"<p>Surf, in celebration of it’s anniversary, is thanking it’s customers with “American Idol”-ish contest. Participants are asked to send in a story, a photo or a video telling Surf why they are Surf’s biggest fan.</p>\n<blockquote>\n<p>Are you Surf’s Biggest Fan? Then prove it! tell us with a story, a photo or a video</p>\n</blockquote>\n<p>Clients screens each entry and successful participants are notified via phone and email.</p>\n<p><strong>Art Direction:</strong>John Pabalan, Lowe Philippines</p>\n<p><strong>Accounts:</strong>Katrina Nadela, Dea Bobadilla</p>\n<p><strong>Comments/My Role:</strong></p>\n<p>Facebook enabled contest. Added interactivity and animation keeping in mind the subtle and delicate atmosphere brought out by the design. Used filepicker.io API to store entries. Stakeholders review the entries using a custom admin page.</p>\n<p><strong>Backend:</strong> PHP, MySQL, Facebook API, Filepicker IO</p>\n<p><strong>Frontend:</strong> HTML, Javascript, JQuery</p>\n<p><strong>Source: <a href=\"https://github.com/chrisbautista/chrisbautista.github.io/tree/master/projects/surfbiggestfan\" title=\"Github : Surf&#x27;s Biggest Fan\">Click here</a></strong></p>\n<p><strong>Demo: <a href=\"https://chrisbautista.github.io/projects/surfbiggestfan/build/\" title=\"Github: Surf&#x27;s Biggest Fan\">Click here</a></strong></p>","fields":{"slug":"/surf-biggest-fan/"},"frontmatter":{"date":"March 02, 2013","title":"Surf : Biggest Fan","featured_image":"/surf-biggest-fan-facebook-app.png","tags":["javascript","jquery","animation"]}}},{"node":{"excerpt":"When I started blogging again last September, I was delighted to get a template with built-in message polling to twitter. I played with it a bit and settled with the look you see at the right. I am not a prolific ‘twitterer’, but I love the whole concept of micropublishing.","html":"<p>When I started blogging again last September, I was delighted to get a template with built-in message polling to twitter. I played with it a bit and settled with the look you see at the right. I am not a prolific ‘twitterer’, but I love the whole concept of <a href=\"http://en.wikipedia.org/wiki/Micropublishing\">micropublishing</a>.</p>\n<!--more-->\n<p>Sometimes when I feel lazy but I want something new in potatokorner; I’d post a tweet, from quotes to funny videos, just to see the widget change(LOL). Great as it is – it’s not perfect. What the widget lacks is interactivity. One day, I started planning (with frameworks like <a href=\"http://jquery.com/\">Jquery</a> and <a href=\"http://mootools.net/\">Mootools</a> in mind), to make a custom widget that can access <a href=\"http://apiwiki.twitter.com/\">twitter API</a> with features like searching for a user’s tweets or scrolling through a <a href=\"https://twitter.com/twitter101/learning\">Trending Topic</a> . Also thought adding some nice animation and CSS styles. Luckily, I don’t have to; the nice peeps from Twitter beat me to the punch and released a widget – packing almost all the things I wanted. I experimented with this along with some feed scripts from Google a days back (<a href=\"http://potatokorner.blogspot.com/2009/10/updates-on-pepeng.html#main\">Updates on Pepeng</a>).</p>\n<h4>What is a Twitter Search Widget!?</h4>\n<p>The widget’s concept is to supply the it with a search term (or phrase), like ‘potatokorner’ and it will periodically check twitter.com for tweets with the word potatokorner – but not just tweets by yours truly – every single tweet which it appears. Unlike a regular search the widget periodically pulls messages from the site(twitter) and displays it in a marquee. Twitter.com describes it,</p>\n<blockquote>\n<p>“Displays search results in real time! Ideal for live events, broadcastings, conferences, TV Shows, or even just keeping up with the news.”</p>\n</blockquote>\n<h4>Get the widget</h4>\n<p>Making your widget is easy. Log in to twitter.com. Open the Settings page, then click <a href=\"http://twitter.com/goodies/widgets\">“You can add twitter to your site here”</a>.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://4.bp.blogspot.com/_BBS5bkzuLXM/Stvr3MiCQ0I/AAAAAAAADK0/PAJxPF4FpjA/s1600-h/potatokorner-twitter-search-widget.PNG\"><img src=\"http://4.bp.blogspot.com/_BBS5bkzuLXM/Stvr3MiCQ0I/AAAAAAAADK0/PAJxPF4FpjA/s320/potatokorner-twitter-search-widget.PNG\" alt border=\"0\"></a>\n</div>\n<p>You are asked where you want to place your widget, click “My Website”.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/StvssWMQRVI/AAAAAAAADLE/0h7qv6ggYV4/s1600-h/potatokorner-twitter-search-widget-step2.PNG\"><img src=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/StvssWMQRVI/AAAAAAAADLE/0h7qv6ggYV4/s320/potatokorner-twitter-search-widget-step2.PNG\" alt border=\"0\"></a>\n</div>\n<p>Then, you are presented three widgets, choose the “Search Widget”.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/StvsyHJVE6I/AAAAAAAADLM/tFwZeVyrcxI/s1600-h/potatokorner-twitter-search-widget-step3.PNG\"><img src=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/StvsyHJVE6I/AAAAAAAADLM/tFwZeVyrcxI/s320/potatokorner-twitter-search-widget-step3.PNG\" alt border=\"0\"></a>\n</div>\n<p>Now what you have before you is the heart of the “search widget” configuration.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/_BBS5bkzuLXM/StvtGGtbBOI/AAAAAAAADLU/aaM8noAbmZU/s1600-h/potatokorner-twitter-search-config.PNG\"><img src=\"http://1.bp.blogspot.com/_BBS5bkzuLXM/StvtGGtbBOI/AAAAAAAADLU/aaM8noAbmZU/s320/potatokorner-twitter-search-config.PNG\" alt border=\"0\"></a>\n</div>\n<p>You’ll learn when you’ve finally playing with your new widget that it’s a parsing nightmare when people add tags even if their topics are not related, especially when it’s a “trending topic”. Fortunately, Twitter.com provided quite a collection of filters to narrow down your search. You can limit tweets to a certain vicinity( near:{location}) or screen out certain words ( -{word}), you can even limit them to happy ones ( 🙂 ). See <a href=\"http://search.twitter.com/operators\">Advance operators</a> to build your strings. I won’t touch this much, but I’ll explain what I’m going to use.</p>\n<p>For our example, I want to add a twitter search widget to find tweets with the word “party”, but I only want positive or happy tweets! , thus the smiley, ” 🙂 “. The smiley is a generic one, but twitter is smart enough to find all the variations (e.g. “:D”,”=)” etc. ). Now lets test it.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/StvtQSnAXbI/AAAAAAAADLc/OW3As3VfJpY/s1600-h/potatokorner-twitter-search-test.PNG\"><img src=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/StvtQSnAXbI/AAAAAAAADLc/OW3As3VfJpY/s320/potatokorner-twitter-search-test.PNG\" alt border=\"0\"></a>\n</div>\n<p>Great! It’s working. As you can see, there are only a few tweets shown. It gives it an air of history unfolding. If you like it to show all the tweets in history at once, we’ll move to that later. Now that our search string is tested and working. You have the option of changing the “Title” and “Caption”. Lets leave the title alone and match our search string to the Caption.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://4.bp.blogspot.com/_BBS5bkzuLXM/StvtXiBgOxI/AAAAAAAADLk/ObOyPgSCPs0/s1600-h/potatokorner-twitter-search-config-2-1.PNG\"><img src=\"http://4.bp.blogspot.com/_BBS5bkzuLXM/StvtXiBgOxI/AAAAAAAADLk/ObOyPgSCPs0/s320/potatokorner-twitter-search-config-2-1.PNG\" alt border=\"0\"></a>\n</div>\n<p>So far so good, let’s see how we can configure tweets. Choose preferences. This tab controls how your tweets will look and behave.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/_BBS5bkzuLXM/Stvt9WNTcpI/AAAAAAAADLs/Nk4bRBgcKTI/s1600-h/potatokorner-twitter-search-config-2.PNG\"><img src=\"http://2.bp.blogspot.com/_BBS5bkzuLXM/Stvt9WNTcpI/AAAAAAAADLs/Nk4bRBgcKTI/s320/potatokorner-twitter-search-config-2.PNG\" alt border=\"0\"></a>\n</div>\n<p>Enable “Poll New Results?”, if you want the widget to continue checking the public timeline of relevant tweets to your search. (Default: Checked)</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/StzbFlGO71I/AAAAAAAADL0/C_W70lovF7o/s1600-h/potatokorner-twitter-search-config-3+-poll.PNG\"><img src=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/StzbFlGO71I/AAAAAAAADL0/C_W70lovF7o/s320/potatokorner-twitter-search-config-3+-poll.PNG\" alt border=\"0\"></a>\n</div>\n<p>Enable “Enable Scrollbars”, if you need to be able to review the rest of the resulting tweets without waiting for it to <a href=\"http://www.blogger.com/post-edit.g?blogID=21010737&#x26;postID=6325991344956883481#twitter-loop\">loop</a>. (Default: Checked)</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://4.bp.blogspot.com/_BBS5bkzuLXM/StzbK9XmG0I/AAAAAAAADL8/mTLPB6ox8dg/s1600-h/potatokorner-twitter-search-config-3+-loop.PNG\"><img src=\"http://4.bp.blogspot.com/_BBS5bkzuLXM/StzbK9XmG0I/AAAAAAAADL8/mTLPB6ox8dg/s320/potatokorner-twitter-search-config-3+-loop.PNG\" alt border=\"0\"></a>\n</div>\n<p>Behavior has two values, its either “timed interval” or “load all tweets.” Default behavior is timed interval – tweets are shown one at a time, kind of like a news marquee. When set as timed interval, you have an option to set how much time it takes before showing more results(Interval). You can also set if you want it to repeat the results when all the tweets have been shown(Loop Results).</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/_BBS5bkzuLXM/StzeVgDk71I/AAAAAAAADMU/Ka7ak5kgIig/s1600-h/potatokorner-twitter-search-config-3+-timed.PNG\"><img src=\"http://1.bp.blogspot.com/_BBS5bkzuLXM/StzeVgDk71I/AAAAAAAADMU/Ka7ak5kgIig/s320/potatokorner-twitter-search-config-3+-timed.PNG\" alt border=\"0\"></a>\n</div>\n<p>“Load all tweets” on the other hand, set’s the widget to show all the tweets related to your search – all in one go. No fancy animation. Kind of boring to me, but someone out there might have a use for it.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/Stzedu-uzpI/AAAAAAAADMc/pQH-SJoS6ds/s1600-h/potatokorner-twitter-search-config-3-alltweets.PNG\"><img src=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/Stzedu-uzpI/AAAAAAAADMc/pQH-SJoS6ds/s320/potatokorner-twitter-search-config-3-alltweets.PNG\" alt border=\"0\"></a>\n</div>\n<p>For our example, let’s leave it as is.</p>\n<p>For really large results, you can increase or decrease the number of tweets to show.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/_BBS5bkzuLXM/StzlVklMMmI/AAAAAAAADMs/x4oFwD1pp8g/s1600-h/potatokorner-twitter-search-config-3+-tweets.PNG\"><img src=\"http://1.bp.blogspot.com/_BBS5bkzuLXM/StzlVklMMmI/AAAAAAAADMs/x4oFwD1pp8g/s320/potatokorner-twitter-search-config-3+-tweets.PNG\" alt border=\"0\"></a>\n</div>\n<p>Finally, you also have control over how your tweets will look like. If you only need the messages without people’s faces polluting the content area, unset “Show Avatar”.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/StzlcscW53I/AAAAAAAADM0/tKoKQpfPuZE/s1600-h/potatokorner-twitter-search-config-3-noavatar.PNG\"><img src=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/StzlcscW53I/AAAAAAAADM0/tKoKQpfPuZE/s320/potatokorner-twitter-search-config-3-noavatar.PNG\" alt border=\"0\"></a>\n</div>\n<p>If the time the message was sent doesn’t interest you, you can remove it by unchecking “Show Timestamps”.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/_BBS5bkzuLXM/StzlidwW-cI/AAAAAAAADM8/E9NC69-DdbA/s1600-h/potatokorner-twitter-search-config-3-notime.PNG\"><img src=\"http://2.bp.blogspot.com/_BBS5bkzuLXM/StzlidwW-cI/AAAAAAAADM8/E9NC69-DdbA/s320/potatokorner-twitter-search-config-3-notime.PNG\" alt border=\"0\"></a>\n</div>\n<p>Finally, if seeing <a href=\"http://twitter.pbworks.com/Hashtags\">hashtags</a> so many times is starting to strain your eyes, hide it by unchecking “Show hashtags”. I find helpful when my search word is a hashtag.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://4.bp.blogspot.com/_BBS5bkzuLXM/StzlnQIgVPI/AAAAAAAADNE/rLZSZLA6-l4/s1600-h/potatokorner-twitter-search-config-3-nohashtags.PNG\"><img src=\"http://4.bp.blogspot.com/_BBS5bkzuLXM/StzlnQIgVPI/AAAAAAAADNE/rLZSZLA6-l4/s320/potatokorner-twitter-search-config-3-nohashtags.PNG\" alt border=\"0\"></a>\n</div>\n<p>Now for aesthetics, lets change colors to match my site.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/_BBS5bkzuLXM/StzelmVUs3I/AAAAAAAADMk/80RqxBQMEzg/s1600-h/potatokorner-twitter-search-config-4.PNG\"><img src=\"http://1.bp.blogspot.com/_BBS5bkzuLXM/StzelmVUs3I/AAAAAAAADMk/80RqxBQMEzg/s320/potatokorner-twitter-search-config-4.PNG\" alt border=\"0\"></a>\n</div>\n<p>I’ll leave the dimensions as is. Unfortunately, you can not test the numbers you have set for the widget. You just have to see how it looks in your page – and decide if you need to adjust. Note you can let the widget grow into the container you want to place it, or if you’re just not sure how to adjust it to fit your site – you can try setting “auto-width”.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/_BBS5bkzuLXM/StzlugcxuiI/AAAAAAAADNM/Qe2LsIwoGfw/s1600-h/potatokorner-twitter-search-config-5.PNG\"><img src=\"http://2.bp.blogspot.com/_BBS5bkzuLXM/StzlugcxuiI/AAAAAAAADNM/Qe2LsIwoGfw/s320/potatokorner-twitter-search-config-5.PNG\" alt border=\"0\"></a>\n</div>\n<p>I’m happy with the results, click “Finish and Grab Code” button to get the code. See our results below.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/_BBS5bkzuLXM/Stzmzg7JsII/AAAAAAAADNU/4MuMeU_2viE/s1600-h/potatokorner-twitter-search-config-getcode.PNG\"><img src=\"http://2.bp.blogspot.com/_BBS5bkzuLXM/Stzmzg7JsII/AAAAAAAADNU/4MuMeU_2viE/s320/potatokorner-twitter-search-config-getcode.PNG\" alt border=\"0\"></a>\n</div>\n<p>Simply insert the code into your page’s html and you’re done. see results here</p>\n<p>There you have it, shown you how to get the widget. Now go play with your new toy! If you have a problem installing, just leave a comment or email me at <code class=\"language-text\">questions at codespud dot com</code>.</p>\n<h4>Some closing tips</h4>\n<ol>\n<li>If you’re using a fluid-width layout, you might find auto-width useful.  </li>\n<li>Use the minus operator(-) plus word (you want to leave out) in the search parameter to narrow your search.  </li>\n<li>If you’ll remove the scrollbar, enable “Loop results” so you’ll be able to see all the results.  </li>\n<li>I found the optimum interval for showing tweets is 5 secs, but of course it depends on what you intend to use it for.  </li>\n<li>Sometimes, you can clean your results by showing hashtags and filtering unwanted tags out with minus(-).  </li>\n<li>Enable scrollbars if you chose to load all results.</li>\n</ol>","fields":{"slug":"/install-twitter-search-widget/"},"frontmatter":{"date":"October 19, 2009","title":"Install Twitter Search Widget","featured_image":"/twitter.png","tags":["widget","twitter","javascript"]}}},{"node":{"excerpt":"Here’s something amazing for Javascript, your good-ole  NES (Nintendo Entertainment System) games are now available and playable via Ben Firshman’s JSNES page. JSNES, is an NES emulator built on javascript’s canvas objects.","html":"<p>Here’s something amazing for Javascript, your good-ole  NES (Nintendo Entertainment System) games are now available and playable via Ben Firshman’s JSNES page. JSNES, is an NES emulator built on javascript’s canvas objects.</p>\n<!--more-->\n<div>\n  <a href=\"http://benfirshman.com/projects/jsnes/\" target=\"_blank\">http://benfirshman.com/projects/jsnes/</a>\n</div>\n<p>Mr. Firshman recommends to use Google’s Chrome browser to maximize your gaming pleasure. I tried it on IE8, it doesnt work as well. So take his word for it.</p>\n<p>Aside from SMB(Super Mario Bros.), he also ported some old favorites like the Zelda, the banana maniac-Donkey Kong and the blaster wielding Megaman. </p>\n<div>\n</div>\n<div>\n  Ben Firshman shows us that with a little programming acrobatics and some improvements to browser canvas objects, anything is possible.&nbsp;\n</div>\n<div>\n</div>\n<div>\n  Enjoy peeps!&nbsp;\n</div>\n<div>\n</div>\n<blockquote>\n<p>Question: When can we start seeing 3D games running on browsers? Hehehe</p>\n</blockquote>","fields":{"slug":"/nes-on-javascript/"},"frontmatter":{"date":"September 21, 2009","title":"NES on Javascript","featured_image":"/nes.png","tags":["games","javascript","website","fun"]}}}]}},"pageContext":{"tag":"javascript"}}}