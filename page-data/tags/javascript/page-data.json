{"componentChunkName":"component---src-templates-blog-tag-list-js","path":"/tags/javascript/","result":{"data":{"site":{"siteMetadata":{"title":"CodeSpud"}},"allMarkdownRemark":{"totalCount":8,"edges":[{"node":{"excerpt":"Another common accessibility tool is the skip button. It comes in different forms. It would sometimes be smartly included in the design or hidden until needed.","html":"<p>Another common accessibility tool is the skip button. It comes in different forms. It would sometimes be smartly included in the design or hidden until needed. <!--more-->  Whatever form skip buttons allow users to bypass sections of content to make it easier to navigate websites. Adding ways to bypass content is part of the <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-navigation-mechanisms-skip\">WCAG accessibility guidelines: Bypass blocks</a>. </p>\n<h2>Problem</h2>\n<p>I recently got a complaint from a screen reader user that some UI/widget was terrible to navigate through. Widely used screen readers like JAWS, NVDA or Voiceover have a feature to navigate based on common semantic tags like headings (h1, h2, h3, etc.) or links. In the case of the broken UI control, it has quite a lot of headings and links in the content. So when the screen reader tried to use the navigation shortcut for headings. It still included the headings in the UI control. </p>\n<h2>Solution</h2>\n<p>To fix the issue we had two options. One(1) is to re-work the widget to remove the headings and use links instead. This required quite a bit of refactoring and testing. The effort is not worth the benefit. The second(2) option is to add skip buttons. We opted for the second option. </p>\n<p>Now when the screen reader or keyboard user navigates through the widget they will first encounter the skip button which they can activate to jump to the next section or ignore to continue through the widget. For the previous solution, we hard-coded the skip buttons as part of the design. </p>\n<p>The demo below shows code to generate skip buttons. The way it works is the developer provides a list of tags and selectors you want to skip. These can be blocks of content or sections that are quite difficult to navigate through like navigation, forms, etc. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> nodesToSkip <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\" header .demo-header, aside .links, section\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<p>Next, the code loops thru these sections and adds skip buttons. When the button is focused and activated( using the <key>Enter</key> key ), the focus jumps to the next section or focusable element. When you navigate to the last section there is no skip button cause there is no section to jump to next. </p>\n<p><a href=\"https://codepen.io/chrisbautista/pen/zYJLQRp\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/zYJLQRp/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a> </p>\n<p>In this demo, I opted to focus on sections but it is easy to tweak the code to focus on the next focusable element like a button or input control instead. As a bonus, whenever a section has a heading(h2) or title, the generated button text will use the heading/title text to further improve recognition. </p>\n<h2>Wrapping up</h2>\n<p>Skip buttons are a powerful tool for improving accessibility. They provide greater control over users’ experience navigating through websites. Feel free to reuse the code provided to generate skip buttons in your projects. Your users and customers will thank you. </p>","fields":{"slug":"/2023/skip-button-js/"},"frontmatter":{"date":"February 17, 2023","title":"Automatically generate skip buttons to improve accessibility","featured_image":"/blog/sammie-skip.jpg","tags":["accessibility","javascript","frontend"]}}},{"node":{"excerpt":"Errors in code are normal. That is why we have a whole branch of the IT industry dedicated to quality assurance and testing. Javascript is the easiest programming language to learn, but it is also the easiest to get wrong. Javascript is a very forgiving programming language. As a result, Javascript code can be prone to errors.","html":"<!--\n\nproblem: Javascript errors that trip most programmers\n\n1. For in vs For out\n2. Equality in array function\n3. == vs ===\n4. scope\n5. Events and this\n\n-->\n<p>Errors in code are normal. That is why we have a whole branch of the IT industry dedicated to quality assurance and testing. Javascript is the easiest programming language to learn, but it is also the easiest to get wrong. Javascript is a very forgiving programming language. As a result, Javascript code can be prone to errors. <!--more--></p>\n<p>In this post, I will list some of the mistakes I’ve encountered coding in Javascript.</p>\n<ul>\n<li><a href=\"./#equality\">Misunderstanding “const”</a></li>\n<li><a href=\"./#equality\">Strict vs Loose Equality</a></li>\n<li><a href=\"./#assignment\">Assignment vs Equality</a></li>\n<li><a href=\"./#forof\">For…of vs For…in</a></li>\n<li><a href=\"./#this\">Event handlers and proper use of “this”</a></li>\n</ul>\n<h2 id=\"const\">Misunderstanding \"const\"</h2>\n<blockquote>\n<p>The const declaration creates a read-only reference to a value. It does not mean the value it holds is immutable—just that the variable identifier cannot be reassigned. </p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">MDN</a></li>\n</ul>\n</blockquote>\n<p>One mistake I keep repeating is forgetting that defining an object with <code class=\"language-text\">const</code> does not prevent the contents from mutation. <code class=\"language-text\">Const</code> only prevents the variable from being reassigned. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">const</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n  i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token comment\">// TypeError: Assignment to constant variable </span>\n\n  myObject<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> myObject<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token comment\">// {a: 2, b: 2};</span>\n  myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// TypeError: Assignment to constant variable</span>\n\n  myArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">// [2, 1, 2, 3]</span>\n  myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// TypeError: Assignment to constant variable</span></code></pre></div>\n<p>This means you can update the contents of an object or array. This is legal because we are not acting on the reference. This is more confusing than problematic. As you can just change the declaration with <code class=\"language-text\">let</code>. </p>\n<p>Rather than keep making this mistake and avoid confusion, I use <code class=\"language-text\">let</code> to define variables all the time even for magic values. I think <code class=\"language-text\">const</code> is not worth the confusion it causes.</p>\n<h2 id=\"equality\">Strict vs Loose Equality</h2>\n<p>As a javascript developer, I have learned to always use strict equality (<code class=\"language-text\">===</code>). Most javascript programmers will tell you to follow that rule. If you come from a C-based language like C# or C++, you are probably more familiar with double equals(<code class=\"language-text\">==</code>) than strict equality. I am guilty of this mistake, especially when switching the coding context between the frontend(<code class=\"language-text\">Javascript</code>) and the backend(<code class=\"language-text\">C#</code>). The mistake is easily remedied but hard to trace especially in a massive codebase. The difference is that (loose) equality (== and !=) will try to force type conversion when comparing two values. Sometimes this is not what we want. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span>\n\nfoo <span class=\"token operator\">==</span> bar <span class=\"token comment\">// true</span>\nfoo <span class=\"token operator\">!=</span> bar <span class=\"token comment\">// false</span></code></pre></div>\n<p>This is not the case for strict equality(=== and !==). Strict equality checks will never apply type conversion and test the two values directly. If two values are not of the same data type the test fails. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> der <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\nfoo <span class=\"token operator\">===</span> bar <span class=\"token comment\">// false</span>\nfoo <span class=\"token operator\">!==</span> bar <span class=\"token comment\">// true</span>\n\nfoo <span class=\"token operator\">===</span> der <span class=\"token comment\">// true</span>\nfoo <span class=\"token operator\">!==</span> der <span class=\"token comment\">// false</span></code></pre></div>\n<p>As I mentioned in the beginning always use strict equality, unless you have a good reason to use loose equality. An example of that is if you are pulling data from some source and just want to know that a value exists without testing the data type. You can use loose equality in those cases, but be careful and make sure you know what you’re doing. </p>\n<h3>Example</h3>\n<p>Here’s an example component I made in React where I had an issue with equality. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">AwesomeComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>buyOption<span class=\"token punctuation\">,</span> setBuyOption<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setBuyOption</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>buyJeansStyle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">checked</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>buyOption <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onChange<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> Style 1\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>buyJeansStyle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">checked</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>buyOption <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onChange<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> Style 2\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n}</span></code></pre></div>\n<p>At first glance, everything works fine. Then I tested the result, I found I can’t change my choice. Clicking on a radio button did not set the button. I tried everything I can think of to fix the component. I refactored a few times but to no avail. It took me forever to find the issue. I finally realized that the issue is the equality test for the <code class=\"language-text\">checked</code> prop on the radio buttons. I was acting on the assumption that the values assigned, <code class=\"language-text\">value=0</code> and <code class=\"language-text\">value=1</code>, are integers when the state is set, but I was mistaken. The event handler was setting the string version of the values. Meaning <code class=\"language-text\">e.target.value</code> where strings, ‘0’ and ‘1’, and not the integer equivalents. So strict equality was always false for both checks causing the bug. Here is where the loose equality check is a better option.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>buyJeansStyle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">checked</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>buyOption <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onChange<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> Style 1\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>buyJeansStyle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">checked</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>buyOption <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onChange<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> Style 2\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Now the component works but to follow the “always use strict equality” rule I refactored again by casting the event value into an <code class=\"language-text\">integer</code> value. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token keyword\">function</span> <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setBuyOption</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Both fixes accomplish the same thing. Your choice will depend if you need to keep the resulting value in a specific data type or not. </p>\n<!--ad-->\n<h2 id=\"assignment\">Assignment vs Equality</h2>\n<p>I feel foolish whenever I commit this next error. </p>\n<p>Like the difference between loose equality and strict equality operators, the difference between assignment and equality is a single equal (<code class=\"language-text\">=</code>) sign. Thus it is easy to mistake using the former when you meant to use the latter.  Take for example the following code. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">let</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">loanAmount</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">interest</span><span class=\"token operator\">:</span> <span class=\"token number\">0.02</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">loanAmount</span><span class=\"token operator\">:</span> <span class=\"token number\">40000</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">interest</span><span class=\"token operator\">:</span> <span class=\"token number\">0.05</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">loanAmount</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">interest</span><span class=\"token operator\">:</span> <span class=\"token number\">0.03</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">loanAmount</span><span class=\"token operator\">:</span> <span class=\"token number\">10300</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">interest</span><span class=\"token operator\">:</span> <span class=\"token number\">0.09</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> loansBelowAThousandCount <span class=\"token operator\">=</span> results<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>loanAmount <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Without knowing all the contents in <code class=\"language-text\">results</code>, you can guess what the code wants to accomplish. I wanted to get the number of loans with <code class=\"language-text\">loanAmount</code> equal to 1000. I assume I would get a number less than the results count but instead got the same number as the results array every time. Looking at this simple code there will be some who would immediately find the issue. Do you see my error? </p>\n<p>I mistakenly use the assignment operator instead of the equality test. Inspecting the array from <code class=\"language-text\">results.filter( item => item.loanAmount = 1000 )</code>, I get the same items but with the <code class=\"language-text\">loanAmount</code> equal to 1000. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">results<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>loanAmount <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">)</span> \n<span class=\"token comment\">/*\n[\n    { loanAmount: 1000, interest: 0.02  ... }\n    { loanAmount: 1000, interest: 0.05 ... }\n    { loanAmount: 1000, interest: 0.03  ... }\n    { loanAmount: 1000, interest: 0.09 ... }\n    //...\n  ];\n*/</span></code></pre></div>\n<p>Once I’ve verified the issue I corrected the code below.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> newArray <span class=\"token operator\">=</span> myArray<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// or better yet `===`</span></code></pre></div>\n<p>Since I know the <code class=\"language-text\">loanAmount</code> is always a number I can get away with the loose equality check. </p>\n<p>It is a very simple mistake to recognize but if it is in a big codebase with a lot of moving parts, it is quite difficult to see. </p>\n<h2 id=\"forof\">For ... in vs For ... of</h2>\n<p>If you want to loop through an array you may be familiar with this pattern.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> myArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> myArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 0 </span>\n<span class=\"token comment\">// 10 </span>\n<span class=\"token comment\">// 31</span>\n<span class=\"token comment\">// 20</span></code></pre></div>\n<p>What I hate about the structure above is that <code class=\"language-text\">i</code> is only used to get the array value. If variable <code class=\"language-text\">i</code> has some other purpose on the loop it would have been fine but with this pattern it’s overkill. There are better ways to loop through an array like <code class=\"language-text\">Array.forEach</code> etc.</p>\n<p><code class=\"language-text\">For...of</code> is the fairly new iterator control structure we can use to replace the <code class=\"language-text\">for(;;)</code> loop. Using <code class=\"language-text\">for...of</code> we can refactor the code above. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> myArray<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 0 </span>\n<span class=\"token comment\">// 10 </span>\n<span class=\"token comment\">// 31</span>\n<span class=\"token comment\">// 20</span></code></pre></div>\n<p>I like this structure because it’s more readable. I can automatically read that in every iteration of the loop, I get a new “item” until the loop gets to the end of the array. It’s a great pattern. Eslint has a rule that recommends it over the old <code class=\"language-text\">for(;;)</code> pattern. </p>\n<p>Sometimes I make a mistake and confuse the <code class=\"language-text\">for...in</code> loop instead of <code class=\"language-text\">for..of</code>. <code class=\"language-text\">For..in</code> is similar <code class=\"language-text\">for..of</code> but instead of the values of an array it returns the keys or index of an array item. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">in</span> myArray<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 0 </span>\n<span class=\"token comment\">// 1 </span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span></code></pre></div>\n<p>I have made this mistake a few times so I made myself a mnemonic so I don’t forget. </p>\n<p>Remember <strong>‘Key IN the value OF’</strong>. </p>\n<p><code class=\"language-text\">for..IN</code> returns “key”/index of an array item and <code class=\"language-text\">for..OF</code> returns the value.  </p>\n<h2 id=\"this\">Event handlers and proper use of \"this\"</h2>\n<p>Here’s another error I keep committing when working on Javascript. The <code class=\"language-text\">this</code> keyword like many programming languages hold special meaning. It represents the current context the code is acting on. In Javascript, most values are objects even functions.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageClicker</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem<span class=\"token punctuation\">,</span> message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>\n\n    elem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> fragment <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createDocumentFragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> button <span class=\"token operator\">=</span> fragment<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbutton<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'click me'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> messageMe <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageClicker</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">,</span> <span class=\"token string\">'This is an awesome class'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the example above, I have a class <code class=\"language-text\">MessageClicker</code> that accepts a DOM element and a string <code class=\"language-text\">message</code>. An alert opens up with the provided string. When I tested I get the alert but with an <code class=\"language-text\">undefined</code> message. The issue is in the <code class=\"language-text\">onClick</code> event handler. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">this</code> keyword refers to the object but not all the time. Like our example, when contained in a callback function <code class=\"language-text\">this</code> is actually <code class=\"language-text\">undefined</code>. We can fix this in a few ways. One way is to bind the function when we attach it to the element. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem<span class=\"token punctuation\">,</span> message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>\n    elem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The other way is to use arrow functions.  In arrow functions, <code class=\"language-text\">this</code> keeps the value of the enclosing context. In our example it’s the class <code class=\"language-text\">MessageClicker</code>. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageClicker</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem<span class=\"token punctuation\">,</span> message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>\n\n    elem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* ... */</span></code></pre></div>\n<h2>Wrapping up</h2>\n<p>These are just some of the errors I come across with when working with Javascript. Mostly the mistakes are caused by confusion around certain concepts like the <code class=\"language-text\">this</code> context and the meaning of <code class=\"language-text\">const</code>. Most of these are easy to fix. My take is avoid the confusion and use more familiar syntax. If you think its worth using then I recommend trying to dig deeper before introducing any new keyword or convention in to your code. Cheers!</p>","fields":{"slug":"/2023/five-common-javascript-mistakes/"},"frontmatter":{"date":"February 02, 2023","title":"Five common Javascript mistakes I am guilty of","featured_image":"/blog/brett-jordan-error-unsplash.jpg","tags":["javascript","error","web-development","list"]}}},{"node":{"excerpt":"I am a big Big Bang Theory fan. So is my wife. Her absolute favorite character is Sheldon Cooper. In one of the episodes Sheldon proposed an improved version of the rock-paper-scissors game.  This version extends the possible moves to five(5). The additional two options would increase the possibility of win chances as it minimizes the chance of both players picking the same move.","html":"<p>I am a big Big Bang Theory fan. So is my wife. Her absolute favorite character is Sheldon Cooper. In one of the episodes Sheldon proposed an improved version of the rock-paper-scissors game.  This version extends the possible moves to five(5). The additional two options would increase the possibility of win chances as it minimizes the chance of both players picking the same move. <!--more--></p>\n<p>I made a javascript version. Using a few emojis for the hand graphics. I made a very simple interface</p>\n<h2>Game logic</h2>\n<p>The game logic is pretty simple. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">build gameboard\n\n:play\n  get user move\n  get computer move\n  get win_or_lose\n  increment round\n  if (round equals max_round) goto display_winner\n  goto play \n\n:display_winner\n...\nend game</code></pre></div>\n<p>To check who wins per round we need to know the rules of the game (taken from Big Bang Theory wiki).</p>\n<ul>\n<li>Scissors cuts Paper</li>\n<li>Paper covers Rock</li>\n<li>Rock crushes Lizard</li>\n<li>Lizard poisons Spock</li>\n<li>Spock smashes Scissors</li>\n<li>Scissors decapitates Lizard</li>\n<li>Lizard eats Paper</li>\n<li>Paper disproves Spock</li>\n<li>Spock vaporizes Rock</li>\n<li>(and as it always has) Rock crushes Scissors</li>\n</ul>\n<!--ad-->\n<p>Here are the rules again coded in javascript.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">winOrLose</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">playerChoice<span class=\"token punctuation\">,</span> computerChoice</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Scissor <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Paper<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Paper <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Rock<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Rock <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Lizard<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Lizard <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Spock<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Scissors <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Lizard<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Rock <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Scissor<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Spock <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Scissors<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Lizard <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Paper<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Paper <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Spock<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Spock <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Rock<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// player wins </span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I love hash tables! They minimize code complexity. This is a great alternative to the code above.  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">WIN_OR_LOSE</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Hands<span class=\"token punctuation\">.</span>Paper<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Hands<span class=\"token punctuation\">.</span>Rock<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Hands<span class=\"token punctuation\">.</span>Rock<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Hands<span class=\"token punctuation\">.</span>Scissor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Hands<span class=\"token punctuation\">.</span>Scissor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Hands<span class=\"token punctuation\">.</span>Paper<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token constant\">WIN_OR_LOSE</span><span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>playerChoice<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>computerChoice<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// player wins</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The previous bit of code only handle win conditions, what if both players choose the same move? We test this even before testing win conditions,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">winOrLose</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">playerChoice<span class=\"token punctuation\">,</span> computerChoice</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> computerChoice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// show tie result  </span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, we test if the game has ended. Whenever a round ends, we check if the game should end(finished 10 rounds). If yes, we calculate the game result and notify the user.   </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">gameOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>yourScore<span class=\"token punctuation\">,</span> pcScore<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>games <span class=\"token operator\">>=</span> maxGames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>yourScore <span class=\"token operator\">===</span> pcScore<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">gameResult</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"It's a draw!\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>yourScore <span class=\"token operator\">></span> pcScore<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">gameResult</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You win!\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"win\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">gameResult</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You lost!\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lose\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>User interface</h2>\n<p>For the input, I made five(5) buttons with images corresponding each game move. When the game starts you are prompted to choose a move. When the player chooses a game move, it’s checked agains winning conditions and depending on the outcome computes the score. </p>\n<figure>\n<img src=\"/blog/Rock-Paper-Scissors-Lizard-Spock-Game-Images.png\" alt=\"rock-paper-scissors game buttons\">\n<figcaption>\n<span>Rock-paper-scissors-lizard-spock game buttons</span>\n</figcaption>\n</figure>\n<p><a href=\"https://codepen.io/chrisbautista/pen/dyJyebW\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/dyJyebW/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<p>Play the <a href=\"https://codepen.io/chrisbautista/full/dyJyebW\">game</a>. Enjoy!</p>","fields":{"slug":"/2022/rock-paper-scissors-lizard-spock/"},"frontmatter":{"date":"November 20, 2022","title":"Rock-Paper-Scissors-Lizard-Spock Game","featured_image":"/blog/marcus-wallis-R1qHDAEnCmc-unsplash.jpg","tags":["javascript","ui","animation","game"]}}},{"node":{"excerpt":"I wanted to see how much we can do with CSS transitions. No keyframe animations at all. Although you would have more control over the…","html":"<p>I wanted to see how much we can do with CSS transitions. No keyframe animations at all. Although you would have more control over the animation with keyframes. For our demo, we need a simple change from one state to another. CSS transitions are all we need.</p>\n<p>In one of the animations, I used a technique I call the Sibling-Follow technique. Before you ask, I did not invent this technique - just the name. It’s nice to name something when it’s this good. I got it from one of the front-end sites - I forgot which.</p>\n<p>When I understood the technique, my brain ran on overdrive. I was sketching different designs I can abuse this technique. I used this to animate the highlight element in the codepen below.</p>\n<!--ad-->\n<h2>Sibling-Follow Technique</h2>\n<p>To illustrate, let me walk you through a simple tab bar animation. If you are familiar with Material UI tabs, it behaves very similarly. </p>\n<p><a href=\"https://mui.com/material-ui/react-tabs/\">Material UI tabs</a></p>\n<p>Make a list of buttons. Then, add another element and set the class as follow. We will use this to target and style the element later.</p>\n<p><strong>HTML</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 1 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 2 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 3 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 4 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 5 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>follow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>CSS</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">ul,\nli</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">list-style-type</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">ul</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">li</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.follow</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> left 0.4s ease-in-out<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 2px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I made a Javascript event handler to add the <code class=\"language-text\">active</code> class to the list item containing the button I clicked.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 1 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>active<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 2 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 3 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 4 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 5 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>follow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Using the sibling selector(~), we apply the desired styling for .follow element. In this case, I want to position the mentioned element above the second list button.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">li:nth-child(2):active ~ .follow</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 60px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I added the other left positions to the rest of the <code class=\"language-text\">li</code> items with some trial and error. </p>\n<p>Voila! We get a simple highlight animation, ala Material UI tabs, with a few markup and the magic of CSS transitions.</p>\n<p>For my demo, I hardcoded the <code class=\"language-text\">left</code> property to the CSS for each transition state. Add a Javascript function to calculate these coordinates for you. Then you do not need to hardcode these values, especially if you are going to incorporate this into your professional work. </p>\n<!--ad-->\n<p>You can make it fancier by animating the width of the follow tab at different speeds. Apply different easing functions. Make many follow elements running at various vectors. I will let you play with that on your own. Let your imagination run free.</p>\n<p>I made five tab bar styles. Feel free to use these in your projects.</p>\n<h2>Wrapping up</h2>\n<ul>\n<li>You can make pretty amazing things with CSS, HTML, and a bit of Javascript.</li>\n<li>Sibling-Follow technique is a simple method you can use to create tab animations.</li>\n<li>CSS transition is your friend if you want to animate a simple change from one state to another.  </li>\n</ul>\n<p>All in all, I was happy with the outcome of this exercise. I had so much fun and learned a lot. We could use some accessibility work though. 😜 That is something we can work on for another day.</p>\n<p>I will explain the other animation styles I made with this pen later.</p>\n<p><strong>Update</strong>: This pen got showcased in a Codepen Spark newsletter last April 14th (link below). Thanks Codepen!😀🎉</p>\n<p><a href=\"https://codepen.io/spark/280\">Tab Bar Styles, AI Games, and Some Good Forking News (April 14)</a>.</p>\n<p><a href=\"https://codepen.io/chrisbautista/pen/NWXjqLN\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/NWXjqLN/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>","fields":{"slug":"/2022/animated-bottom-bar/"},"frontmatter":{"date":"November 19, 2022","title":"Creating My Animated Bottom Bar Experiment","featured_image":"/blog/sigmund-_dJCBtdUu74-unsplash.jpg","tags":["javascript","css","ui","animation"]}}},{"node":{"excerpt":"Lightweight jQuery Plugin to transform links to images into quick previews. See project page for examples. Install Download files. Copy…","html":"<blockquote>\n<p>Lightweight jQuery Plugin to transform links to images into quick previews.</p>\n</blockquote>\n<p>See project page for examples.</p>\n<p><strong>Install</strong></p>\n<ol>\n<li>Download files.</li>\n<li>Copy boxer.js, boxer.css, and close.png into your project</li>\n<li>Include boxer.js and boxer.css</li>\n<li>Enclose target anchors in a container e.g.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"boxer\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"picture1.png\"</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"this is a picture\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token string\">\"picture1_thumb.jpg\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n    \n  <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"picture2.png\"</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"this is another picture\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token string\">\"picture2_thumb.jpg\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<ol start=\"5\">\n<li>Run code <code class=\"language-text\">$(\".boxer\").boxer();</code></li>\n</ol>\n<p><strong>Supports</strong></p>\n<ul>\n<li>images</li>\n<li>html snippet via AJAX</li>\n</ul>\n<p><strong>Roadmap</strong></p>\n<ul>\n<li>Easing</li>\n<li>Better AJAX support</li>\n<li>Presentation Mode</li>\n<li>JSON Processing</li>\n</ul>\n<p><strong>Links</strong></p>\n<p><a href=\"https://github.com/chrisbautista/boxerjs\">Github: BoxerJs</a>\n<a href=\"http://chrisbautista.github.io/boxerjs/\">Demo</a></p>","fields":{"slug":"/boxerjs/"},"frontmatter":{"date":"March 02, 2015","title":"BoxerJS","featured_image":"/boxerjs_codespud.png","tags":["javascript","jquery","extension"]}}},{"node":{"excerpt":"I’ve got some leeway pushing Khrunus off the ground.  I’ve always been successful using JavaScript’s timing functions but since Khrunus would primarily be built-in in AngularJS. I have to research a way to reuse my timing snippets into proper Angular code.  To study, I built a simple angular app:","html":"<p>I’ve got some leeway pushing <a title=\"Khrunus\" href=\"https://github.com/chrisbautista/Khrunus\" target=\"_blank\">Khrunus</a> off the ground.  I’ve always been successful using JavaScript’s timing functions but since Khrunus would primarily be built-in in AngularJS. I have to research a way to reuse my timing snippets into proper Angular code.  To study, I built a simple angular app:<!--more--> </p>\n<h2>Problem</h2>\n<p>How to use AngularJS to make a time-related app, in this case, a timer for logging elapsed time?</p>\n<h2>What I need</h2>\n<p>Before I started this little venture, I need to detail the parameters of the experiment.</p>\n<p>Firstly,  I need to layout my application into two sections. The top section will show a digital clock face and a button to toggle(start or stop) the clock. The bottom section will be a table showing start and end times, as well as the total duration. To know that the application is successful, start and end times should be logged. Using those values I can compute for the duration.</p>\n<p>We have two modes; an idle state,”stopped” and an active mode,”started”. We need to consider that when coding the helper functions.</p>\n<h2>Solution</h2>\n<p>Firstly, we start with a basic AngularJS template. Please note I am assuming you have at least some experience working with HTML, Javascript, and AngularJS.</p>\n<p>I need two sections so I make two main DIVs.</p>\n<p>Next, in DIV 1,  we add another div to serve as the container for the timer digits and a button.</p>\n<p>Next in DIV #2, we format a table with a header and three columns; “Start”, “End” and “Duration(secs)” correspondingly.</p>\n<p>What we have now is not very pretty, we’re going to fix that in a bit. Create a CSS file, call it “app.css”. Let’s style everything as follows,</p>\n<p>Looking good! 🙂  Now to add the functionality we need. Let’s start with some data binding and a basic controller.</p>\n<h4>HTML</h4>\n<h3>Javascript</h3>\n<p>Awesome! For the button, we’re going to use that as a trigger to toggle between modes as well as an indicator to show the user what’s happening.</p>\n<p>Now, we can switch between modes, using the button data {{mode}} as a toggle flag. Now to the meat of the application, as a reference I’m going to use this basic clock code I use when I need digital clock displays.</p>\n<p>The hero of this application is AngularJS’s <a title=\"$timeout service\" href=\"https://docs.angularjs.org/api/ng/service/$timeout\" target=\"_blank\">$timeout service</a>. The $timeout service gives the user a wrapper for window.setTimeOut. So it still acts like setTimeOut but with the code organization and excellent exception handling that AngularJS provides. Our code should follow this format</p>\n<p>We build the clock functionality via a $timeout statement, but first let’s refactor our controller and add two functions to handle the Start and Stop modes.</p>\n<p>Now for the $timeout service,</p>\n<p>You can see that we used the timeout service to recursively call the <strong>StartTimer</strong> function. When you call <code class=\"language-text\">$timeout</code>, just as window.setTimeOut, you create a timing object that we then save to our variable ‘tmPromise’. We’ll get into more of that later just take a note of it. Since we’re really making a stopwatch and not a clock that tells the current time, let’s recode. We need the current time so we use <code class=\"language-text\">date.getTime()</code>. Adding two more variables timeStart and timeEnd. When we button is clicked, we save the time to <strong>timerStart</strong>. Every time the timeout completes and we call StartTimer, the value of <strong>$scope.timeEnd</strong> changes. We then subtract <strong>$scope.timeStart</strong> to get the current elapsed time in milliseconds. We add some normalization code and we end up with this,</p>\n<p>Now for the stopTimer function, issuing the cancel method will stop the $timeout service. Remember the variable we made earlier, ‘tmPromise’. We will use that as the parameter for our cancel call illustrated below. We then collect the start and end times and push that into the history array.</p>\n<h3>Conclusion</h3>\n<p>Yay, we just made an AngularJS timer widget. Adding a service to insert a line in our table we end up with this.</p>\n<p>This is a very simple implementation. One that did not need a unit test but if we wanted to, we can use a $timeout.flush() method. More details from the reference links below.</p>\n<p>See the app in action <a title=\"here\" href=\"http://chrisbautista.github.io/experiments/cbTimerDirective/public_html/\" target=\"_blank\"><strong>here</strong></a></p>\n<blockquote>\n<p>** UPDATE: Code sample here <a title=\"here\" href=\"http://chrisbautista.github.io/experiments/cbTimerDirective/public_html/\" target=\"_blank\"><strong>here</strong></a></p>\n</blockquote>\n<p>Download all the source <a title=\"angular js timer experiment zip file\" href=\"http://chrisbautista.github.io/experiments/cbTimer/angularjs_timer_experiment.zip\" target=\"_blank\"><strong>here</strong></a>.</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://docs.angularjs.org/api/ng/service/$timeout\">https://docs.angularjs.org/api/ng/service/$timeout</a></li>\n<li><a href=\"https://docs.angularjs.org/api/ng/filter/date\">https://docs.angularjs.org/api/ng/filter/date</a></li>\n</ul>","fields":{"slug":"/2014/how-to-make-a-timer-stopwatch-using-angularjs/"},"frontmatter":{"date":"September 28, 2014","title":"How To Make A Timer/Stopwatch Using AngularJS","featured_image":"/assets/2014/09/angular-featured.png","tags":["frontend","angularjs","ui","javascript"]}}},{"node":{"excerpt":"When I started blogging again last September, I was delighted to get a template with built-in message polling to twitter. I played with it a bit and settled with the look you see at the right. I am not a prolific ‘twitterer’, but I love the whole concept of micropublishing.","html":"<p>When I started blogging again last September, I was delighted to get a template with built-in message polling to twitter. I played with it a bit and settled with the look you see at the right. I am not a prolific ‘twitterer’, but I love the whole concept of <a href=\"http://en.wikipedia.org/wiki/Micropublishing\">micropublishing</a>.</p>\n<!--more-->\n<p>Sometimes when I feel lazy but I want something new in potatokorner; I’d post a tweet, from quotes to funny videos, just to see the widget change(LOL). Great as it is – it’s not perfect. What the widget lacks is interactivity. One day, I started planning (with frameworks like <a href=\"http://jquery.com/\">Jquery</a> and <a href=\"http://mootools.net/\">Mootools</a> in mind), to make a custom widget that can access <a href=\"http://apiwiki.twitter.com/\">twitter API</a> with features like searching for a user’s tweets or scrolling through a <a href=\"https://twitter.com/twitter101/learning\">Trending Topic</a> . Also thought adding some nice animation and CSS styles. Luckily, I don’t have to; the nice peeps from Twitter beat me to the punch and released a widget – packing almost all the things I wanted. I experimented with this along with some feed scripts from Google a days back (<a href=\"http://potatokorner.blogspot.com/2009/10/updates-on-pepeng.html#main\">Updates on Pepeng</a>).</p>\n<h4>What is a Twitter Search Widget!?</h4>\n<p>The widget’s concept is to supply the it with a search term (or phrase), like ‘potatokorner’ and it will periodically check twitter.com for tweets with the word potatokorner – but not just tweets by yours truly – every single tweet which it appears. Unlike a regular search the widget periodically pulls messages from the site(twitter) and displays it in a marquee. Twitter.com describes it,</p>\n<blockquote>\n<p>“Displays search results in real time! Ideal for live events, broadcastings, conferences, TV Shows, or even just keeping up with the news.”</p>\n</blockquote>\n<h4>Get the widget</h4>\n<p>Making your widget is easy. Log in to twitter.com. Open the Settings page, then click <a href=\"http://twitter.com/goodies/widgets\">“You can add twitter to your site here”</a>.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://4.bp.blogspot.com/_BBS5bkzuLXM/Stvr3MiCQ0I/AAAAAAAADK0/PAJxPF4FpjA/s1600-h/potatokorner-twitter-search-widget.PNG\"><img src=\"http://4.bp.blogspot.com/_BBS5bkzuLXM/Stvr3MiCQ0I/AAAAAAAADK0/PAJxPF4FpjA/s320/potatokorner-twitter-search-widget.PNG\" alt=\"\" border=\"0\"></a>\n</div>\n<p>You are asked where you want to place your widget, click “My Website”.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/StvssWMQRVI/AAAAAAAADLE/0h7qv6ggYV4/s1600-h/potatokorner-twitter-search-widget-step2.PNG\"><img src=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/StvssWMQRVI/AAAAAAAADLE/0h7qv6ggYV4/s320/potatokorner-twitter-search-widget-step2.PNG\" alt=\"\" border=\"0\"></a>\n</div>\n<p>Then, you are presented three widgets, choose the “Search Widget”.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/StvsyHJVE6I/AAAAAAAADLM/tFwZeVyrcxI/s1600-h/potatokorner-twitter-search-widget-step3.PNG\"><img src=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/StvsyHJVE6I/AAAAAAAADLM/tFwZeVyrcxI/s320/potatokorner-twitter-search-widget-step3.PNG\" alt=\"\" border=\"0\"></a>\n</div>\n<p>Now what you have before you is the heart of the “search widget” configuration.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/_BBS5bkzuLXM/StvtGGtbBOI/AAAAAAAADLU/aaM8noAbmZU/s1600-h/potatokorner-twitter-search-config.PNG\"><img src=\"http://1.bp.blogspot.com/_BBS5bkzuLXM/StvtGGtbBOI/AAAAAAAADLU/aaM8noAbmZU/s320/potatokorner-twitter-search-config.PNG\" alt=\"\" border=\"0\"></a>\n</div>\n<p>You’ll learn when you’ve finally playing with your new widget that it’s a parsing nightmare when people add tags even if their topics are not related, especially when it’s a “trending topic”. Fortunately, Twitter.com provided quite a collection of filters to narrow down your search. You can limit tweets to a certain vicinity( near:{location}) or screen out certain words ( -{word}), you can even limit them to happy ones ( 🙂 ). See <a href=\"http://search.twitter.com/operators\">Advance operators</a> to build your strings. I won’t touch this much, but I’ll explain what I’m going to use.</p>\n<p>For our example, I want to add a twitter search widget to find tweets with the word “party”, but I only want positive or happy tweets! , thus the smiley, ” 🙂 “. The smiley is a generic one, but twitter is smart enough to find all the variations (e.g. “:D”,”=)” etc. ). Now lets test it.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/StvtQSnAXbI/AAAAAAAADLc/OW3As3VfJpY/s1600-h/potatokorner-twitter-search-test.PNG\"><img src=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/StvtQSnAXbI/AAAAAAAADLc/OW3As3VfJpY/s320/potatokorner-twitter-search-test.PNG\" alt=\"\" border=\"0\"></a>\n</div>\n<p>Great! It’s working. As you can see, there are only a few tweets shown. It gives it an air of history unfolding. If you like it to show all the tweets in history at once, we’ll move to that later. Now that our search string is tested and working. You have the option of changing the “Title” and “Caption”. Lets leave the title alone and match our search string to the Caption.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://4.bp.blogspot.com/_BBS5bkzuLXM/StvtXiBgOxI/AAAAAAAADLk/ObOyPgSCPs0/s1600-h/potatokorner-twitter-search-config-2-1.PNG\"><img src=\"http://4.bp.blogspot.com/_BBS5bkzuLXM/StvtXiBgOxI/AAAAAAAADLk/ObOyPgSCPs0/s320/potatokorner-twitter-search-config-2-1.PNG\" alt=\"\" border=\"0\"></a>\n</div>\n<p>So far so good, let’s see how we can configure tweets. Choose preferences. This tab controls how your tweets will look and behave.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/_BBS5bkzuLXM/Stvt9WNTcpI/AAAAAAAADLs/Nk4bRBgcKTI/s1600-h/potatokorner-twitter-search-config-2.PNG\"><img src=\"http://2.bp.blogspot.com/_BBS5bkzuLXM/Stvt9WNTcpI/AAAAAAAADLs/Nk4bRBgcKTI/s320/potatokorner-twitter-search-config-2.PNG\" alt=\"\" border=\"0\"></a>\n</div>\n<p>Enable “Poll New Results?”, if you want the widget to continue checking the public timeline of relevant tweets to your search. (Default: Checked)</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/StzbFlGO71I/AAAAAAAADL0/C_W70lovF7o/s1600-h/potatokorner-twitter-search-config-3+-poll.PNG\"><img src=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/StzbFlGO71I/AAAAAAAADL0/C_W70lovF7o/s320/potatokorner-twitter-search-config-3+-poll.PNG\" alt=\"\" border=\"0\"></a>\n</div>\n<p>Enable “Enable Scrollbars”, if you need to be able to review the rest of the resulting tweets without waiting for it to <a href=\"http://www.blogger.com/post-edit.g?blogID=21010737&#x26;postID=6325991344956883481#twitter-loop\">loop</a>. (Default: Checked)</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://4.bp.blogspot.com/_BBS5bkzuLXM/StzbK9XmG0I/AAAAAAAADL8/mTLPB6ox8dg/s1600-h/potatokorner-twitter-search-config-3+-loop.PNG\"><img src=\"http://4.bp.blogspot.com/_BBS5bkzuLXM/StzbK9XmG0I/AAAAAAAADL8/mTLPB6ox8dg/s320/potatokorner-twitter-search-config-3+-loop.PNG\" alt=\"\" border=\"0\"></a>\n</div>\n<p>Behavior has two values, its either “timed interval” or “load all tweets.” Default behavior is timed interval – tweets are shown one at a time, kind of like a news marquee. When set as timed interval, you have an option to set how much time it takes before showing more results(Interval). You can also set if you want it to repeat the results when all the tweets have been shown(Loop Results).</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/_BBS5bkzuLXM/StzeVgDk71I/AAAAAAAADMU/Ka7ak5kgIig/s1600-h/potatokorner-twitter-search-config-3+-timed.PNG\"><img src=\"http://1.bp.blogspot.com/_BBS5bkzuLXM/StzeVgDk71I/AAAAAAAADMU/Ka7ak5kgIig/s320/potatokorner-twitter-search-config-3+-timed.PNG\" alt=\"\" border=\"0\"></a>\n</div>\n<p>“Load all tweets” on the other hand, set’s the widget to show all the tweets related to your search – all in one go. No fancy animation. Kind of boring to me, but someone out there might have a use for it.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/Stzedu-uzpI/AAAAAAAADMc/pQH-SJoS6ds/s1600-h/potatokorner-twitter-search-config-3-alltweets.PNG\"><img src=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/Stzedu-uzpI/AAAAAAAADMc/pQH-SJoS6ds/s320/potatokorner-twitter-search-config-3-alltweets.PNG\" alt=\"\" border=\"0\"></a>\n</div>\n<p>For our example, let’s leave it as is.</p>\n<p>For really large results, you can increase or decrease the number of tweets to show.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/_BBS5bkzuLXM/StzlVklMMmI/AAAAAAAADMs/x4oFwD1pp8g/s1600-h/potatokorner-twitter-search-config-3+-tweets.PNG\"><img src=\"http://1.bp.blogspot.com/_BBS5bkzuLXM/StzlVklMMmI/AAAAAAAADMs/x4oFwD1pp8g/s320/potatokorner-twitter-search-config-3+-tweets.PNG\" alt=\"\" border=\"0\"></a>\n</div>\n<p>Finally, you also have control over how your tweets will look like. If you only need the messages without people’s faces polluting the content area, unset “Show Avatar”.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/StzlcscW53I/AAAAAAAADM0/tKoKQpfPuZE/s1600-h/potatokorner-twitter-search-config-3-noavatar.PNG\"><img src=\"http://3.bp.blogspot.com/_BBS5bkzuLXM/StzlcscW53I/AAAAAAAADM0/tKoKQpfPuZE/s320/potatokorner-twitter-search-config-3-noavatar.PNG\" alt=\"\" border=\"0\"></a>\n</div>\n<p>If the time the message was sent doesn’t interest you, you can remove it by unchecking “Show Timestamps”.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/_BBS5bkzuLXM/StzlidwW-cI/AAAAAAAADM8/E9NC69-DdbA/s1600-h/potatokorner-twitter-search-config-3-notime.PNG\"><img src=\"http://2.bp.blogspot.com/_BBS5bkzuLXM/StzlidwW-cI/AAAAAAAADM8/E9NC69-DdbA/s320/potatokorner-twitter-search-config-3-notime.PNG\" alt=\"\" border=\"0\"></a>\n</div>\n<p>Finally, if seeing <a href=\"http://twitter.pbworks.com/Hashtags\">hashtags</a> so many times is starting to strain your eyes, hide it by unchecking “Show hashtags”. I find helpful when my search word is a hashtag.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://4.bp.blogspot.com/_BBS5bkzuLXM/StzlnQIgVPI/AAAAAAAADNE/rLZSZLA6-l4/s1600-h/potatokorner-twitter-search-config-3-nohashtags.PNG\"><img src=\"http://4.bp.blogspot.com/_BBS5bkzuLXM/StzlnQIgVPI/AAAAAAAADNE/rLZSZLA6-l4/s320/potatokorner-twitter-search-config-3-nohashtags.PNG\" alt=\"\" border=\"0\"></a>\n</div>\n<p>Now for aesthetics, lets change colors to match my site.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/_BBS5bkzuLXM/StzelmVUs3I/AAAAAAAADMk/80RqxBQMEzg/s1600-h/potatokorner-twitter-search-config-4.PNG\"><img src=\"http://1.bp.blogspot.com/_BBS5bkzuLXM/StzelmVUs3I/AAAAAAAADMk/80RqxBQMEzg/s320/potatokorner-twitter-search-config-4.PNG\" alt=\"\" border=\"0\"></a>\n</div>\n<p>I’ll leave the dimensions as is. Unfortunately, you can not test the numbers you have set for the widget. You just have to see how it looks in your page – and decide if you need to adjust. Note you can let the widget grow into the container you want to place it, or if you’re just not sure how to adjust it to fit your site – you can try setting “auto-width”.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/_BBS5bkzuLXM/StzlugcxuiI/AAAAAAAADNM/Qe2LsIwoGfw/s1600-h/potatokorner-twitter-search-config-5.PNG\"><img src=\"http://2.bp.blogspot.com/_BBS5bkzuLXM/StzlugcxuiI/AAAAAAAADNM/Qe2LsIwoGfw/s320/potatokorner-twitter-search-config-5.PNG\" alt=\"\" border=\"0\"></a>\n</div>\n<p>I’m happy with the results, click “Finish and Grab Code” button to get the code. See our results below.</p>\n<div>\n  <a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/_BBS5bkzuLXM/Stzmzg7JsII/AAAAAAAADNU/4MuMeU_2viE/s1600-h/potatokorner-twitter-search-config-getcode.PNG\"><img src=\"http://2.bp.blogspot.com/_BBS5bkzuLXM/Stzmzg7JsII/AAAAAAAADNU/4MuMeU_2viE/s320/potatokorner-twitter-search-config-getcode.PNG\" alt=\"\" border=\"0\"></a>\n</div>\n<p>Simply insert the code into your page’s html and you’re done. see results here</p>\n<p>There you have it, shown you how to get the widget. Now go play with your new toy! If you have a problem installing, just leave a comment or email me at <code class=\"language-text\">questions at codespud dot com</code>.</p>\n<h4>Some closing tips</h4>\n<ol>\n<li>If you’re using a fluid-width layout, you might find auto-width useful.  </li>\n<li>Use the minus operator(-) plus word (you want to leave out) in the search parameter to narrow your search.  </li>\n<li>If you’ll remove the scrollbar, enable “Loop results” so you’ll be able to see all the results.  </li>\n<li>I found the optimum interval for showing tweets is 5 secs, but of course it depends on what you intend to use it for.  </li>\n<li>Sometimes, you can clean your results by showing hashtags and filtering unwanted tags out with minus(-).  </li>\n<li>Enable scrollbars if you chose to load all results.</li>\n</ol>","fields":{"slug":"/2009/install-twitter-search-widget/"},"frontmatter":{"date":"October 19, 2009","title":"Install Twitter Search Widget","featured_image":"/twitter.png","tags":["ui","javascript"]}}},{"node":{"excerpt":"Here’s something amazing for Javascript, your good-ole  NES (Nintendo Entertainment System) games are now available and playable via Ben Firshman’s JSNES page. JSNES, is an NES emulator built on javascript’s canvas objects.","html":"<p>Here’s something amazing for Javascript, your good-ole  NES (Nintendo Entertainment System) games are now available and playable via Ben Firshman’s JSNES page. JSNES, is an NES emulator built on javascript’s canvas objects.</p>\n<!--more-->\n<div>\n  <a href=\"http://benfirshman.com/projects/jsnes/\" target=\"_blank\">http://benfirshman.com/projects/jsnes/</a>\n</div>\n<p>Mr. Firshman recommends to use Google’s Chrome browser to maximize your gaming pleasure. I tried it on IE8, it doesnt work as well. So take his word for it.</p>\n<p>Aside from SMB(Super Mario Bros.), he also ported some old favorites like the Zelda, the banana maniac-Donkey Kong and the blaster wielding Megaman. </p>\n<div>\n</div>\n<div>\n  Ben Firshman shows us that with a little programming acrobatics and some improvements to browser canvas objects, anything is possible.&nbsp;\n</div>\n<div>\n</div>\n<div>\n  Enjoy peeps!&nbsp;\n</div>\n<div>\n</div>\n<blockquote>\n<p>Question: When can we start seeing 3D games running on browsers? Hehehe</p>\n</blockquote>","fields":{"slug":"/2009/nes-on-javascript/"},"frontmatter":{"date":"September 21, 2009","title":"NES on Javascript","featured_image":"/nes.png","tags":["game","javascript","website","fun"]}}}]}},"pageContext":{"tag":"javascript"}},"staticQueryHashes":["2139210123","63159454"]}