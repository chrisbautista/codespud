{"componentChunkName":"component---src-templates-blog-tag-list-js","path":"/tags/frontend/","result":{"data":{"site":{"siteMetadata":{"title":"CodeSpud"}},"allMarkdownRemark":{"totalCount":10,"edges":[{"node":{"excerpt":"Think of media queries as a bottle filled with different liquids that don‚Äôt mix, like oil and water. The shape and size of the container‚Ä¶","html":"<p>Think of media queries as a bottle filled with different liquids that don‚Äôt mix, like oil and water. The shape and size of the container (bottle) will determine how the content (water/oil) appears. Although liquids have predetermined properties that define how they exist inside the bottle. For example, oil floats because it is lighter than water. Ultimately, liquids are governed by their container, and you can‚Äôt make the oil shaped as a globe float inside the region water occupies.</p>\n<p>But what if you have a glass sphere to contain the oil and then suspend it inside the bottle? That‚Äôs what container queries do for CSS. Container queries become the smaller glass container inside the bottle. Then, your content can follow the rules of that smaller container instead of depending on the rules of one bottle. This will allow you more flexibility in styling layouts.  </p>\n<blockquote>\n<p>Container queries enable you to apply styles to an element based on the size of the element‚Äôs container. If, for example, a container has less space available in the surrounding context, you can hide certain elements or use smaller fonts. </p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries\">MDN: Css Container queries</a></li>\n</ul>\n</blockquote>\n<p>Developers have been searching for a better way to style website elements, especially their positioning on a site. Although media queries are great for setting up page layouts, they are not the best solution for creating reusable, independent, and responsive components. Ideally, we need a UI component that can be placed anywhere on a site, and it would automatically adjust itself based on the configuration of its container. Using the container dimensions instead of the viewport, we can more accurately style an element based on the available space rather than the browser viewport width. In the past, developers had to resort to JavaScript to achieve this functionality, but adding more scripts to a page can be inconvenient and unnecessary. Along comes container queries.</p>\n<h2>How to do container queries</h2>\n<p>There are two steps to making container queries in CSS.</p>\n<ol>\n<li>Set up a container</li>\n<li>Define styles in container query </li>\n</ol>\n<h3>1. Set up a container</h3>\n<p>To start using container queries, we first define a container or wrapper element with a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/container-type\">container type</a>. </p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">.section-container </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">container</span><span class=\"token punctuation\">:</span> my-container <span class=\"token operator\">/</span> inline-size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the CSS above, we are using the shorthand way of defining a container. The first value is the name we want to identify the container query the second value is the container type. It is equivalent to the CSS below.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">.section-container </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">container-name</span><span class=\"token punctuation\">:</span> my-container<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">container-type</span><span class=\"token punctuation\">:</span> inline-size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>2. Define styles in container query</h3>\n<p>A container query is similar to that a media query. </p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token atrule\"><span class=\"token rule\">@container</span> my-container <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 800px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// style here</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>These are the very minimum things you need to learn to use container queries. There are other things to know <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries#container_query_length_units\">container units</a> - I will leave that for a later post.</p>\n<h2>The experiment</h2>\n<p>To understand container queries better I did made an experiment. My idea was to create a news layout where the content is a bunch of cards with the same markup and content. Depending on how the container is configured the news cards will show in different ways. </p>\n<p>I made a wireframe with the following:</p>\n<ol>\n<li>Full-width hero card on top</li>\n<li>A medium-sized news card </li>\n<li>A news list with multiple content</li>\n<li>A grid with multiple contents</li>\n</ol>\n<img src=\"/blog/container-experiment.png\" alt=\"wireframe of news layout\">\n<p>I‚Äôve configured the cards in the wireframe to show in different styles. For the full-width top section ‚Äústage‚Äù, I want the card to show as a hero element. In the medium ‚Äústage‚Äù, the card would look like a wide news card. With the news list stage, I placed multiple cards that will show as a text list with no images. In the final grid ‚Äústage‚Äù, I wanted to show a news grid with multiple cards. </p>\n<p>Also not to forget, on smaller screens(e.g. mobile) all the cards will show as one column card grid.</p>\n<p>Remember that all these cards have the same markup. Imagine you have a server-side rendered(SSR) endpoint that returns an array of cards with similar markup sorted by descending date(e.g news post). Then you just drop all this content in different containers until you fill the layout. No need to cherry pick the data and render to different locations. </p>\n<p>Check the pen here for a demo.  </p>\n<p><a href=\"https://codepen.io/chrisbautista/pen/vYaxdXr\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/vYaxdXr/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<h2>What I learned</h2>\n<p>Doing the experiment I learned a few things. It is easy to start using container query after you get through the initial confusion in learning to think in containers.  Once you get used to thinking in container queries you‚Äôll be amazed. I was thinking it would be great if we had this a decade ago when we were building our layout editor.üòÄ</p>\n<p>You are not limited to querying width. If we use <code class=\"language-text\">container-type: size</code> we can use the container height when defining a container query block. Using height opens up more possibilities when doing layouts. For example, I made the news list text wall by using the height of the container to tell the news card to only render the text and hide the images. In some way, I made my news cards smarter. Before the container query era, I had to do some complicated CSS class combinations to achieve the same thing or worse yet use JavaScript.  </p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">.stage </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">container-name</span><span class=\"token punctuation\">:</span> stage<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">container-type</span><span class=\"token punctuation\">:</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@container</span> stage <span class=\"token punctuation\">(</span>width <span class=\"token operator\">></span> 768px<span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token punctuation\">(</span>height = 1000px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">.card </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>100% <span class=\"token operator\">/</span> 3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Wrapping up</h2>\n<p>Container queries are another great tool in a web developer‚Äôs toolbelt. I would recommend spending some time learning the basics and how it interacts with layout-specific CSS like flexbox and grids. I would also suggest spending time learning the differences between container types and how to use container units. </p>\n<p>Cheers!</p>","fields":{"slug":"/2023/using-container-queries-news-layout/"},"frontmatter":{"date":"February 24, 2023","title":"Using Container Queries to Make a News Layout","featured_image":"/blog/artur-lysyuk-bottles-unsplash.jpg","tags":["css","layout","frontend"]}}},{"node":{"excerpt":"Another common accessibility tool is the skip button. It comes in different forms. It would sometimes be smartly included in the design or hidden until needed.","html":"<p>Another common accessibility tool is the skip button. It comes in different forms. It would sometimes be smartly included in the design or hidden until needed. <!--more-->  Whatever form skip buttons allow users to bypass sections of content to make it easier to navigate websites. Adding ways to bypass content is part of the <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-navigation-mechanisms-skip\">WCAG accessibility guidelines: Bypass blocks</a>. </p>\n<h2>Problem</h2>\n<p>I recently got a complaint from a screen reader user that some UI/widget was terrible to navigate through. Widely used screen readers like JAWS, NVDA or Voiceover have a feature to navigate based on common semantic tags like headings (h1, h2, h3, etc.) or links. In the case of the broken UI control, it has quite a lot of headings and links in the content. So when the screen reader tried to use the navigation shortcut for headings. It still included the headings in the UI control. </p>\n<h2>Solution</h2>\n<p>To fix the issue we had two options. One(1) is to re-work the widget to remove the headings and use links instead. This required quite a bit of refactoring and testing. The effort is not worth the benefit. The second(2) option is to add skip buttons. We opted for the second option. </p>\n<p>Now when the screen reader or keyboard user navigates through the widget they will first encounter the skip button which they can activate to jump to the next section or ignore to continue through the widget. For the previous solution, we hard-coded the skip buttons as part of the design. </p>\n<p>The demo below shows code to generate skip buttons. The way it works is the developer provides a list of tags and selectors you want to skip. These can be blocks of content or sections that are quite difficult to navigate through like navigation, forms, etc. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> nodesToSkip <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\" header .demo-header, aside .links, section\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<p>Next, the code loops thru these sections and adds skip buttons. When the button is focused and activated( using the <key>Enter</key> key ), the focus jumps to the next section or focusable element. When you navigate to the last section there is no skip button cause there is no section to jump to next. </p>\n<p><a href=\"https://codepen.io/chrisbautista/pen/zYJLQRp\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/zYJLQRp/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a> </p>\n<p>In this demo, I opted to focus on sections but it is easy to tweak the code to focus on the next focusable element like a button or input control instead. As a bonus, whenever a section has a heading(h2) or title, the generated button text will use the heading/title text to further improve recognition. </p>\n<h2>Wrapping up</h2>\n<p>Skip buttons are a powerful tool for improving accessibility. They provide greater control over users‚Äô experience navigating through websites. Feel free to reuse the code provided to generate skip buttons in your projects. Your users and customers will thank you. </p>","fields":{"slug":"/2023/skip-button-js/"},"frontmatter":{"date":"February 17, 2023","title":"Automatically generate skip buttons to improve accessibility","featured_image":"/blog/sammie-skip.jpg","tags":["accessibility","javascript","frontend"]}}},{"node":{"excerpt":"This is part 2 of CSS snippets I used 90% of the time post.  As promised this is second part of CSS styles I commonly used with my projects. If you are going to think of a rule I‚Äôd say this is my 80/20 rule for CSS.","html":"<!--\n\nPart 2\n- centered child\n- modal overlay\n- text truncate\n   - line\n   - multiline\n- card container\n- fullscreen image\n\nPart 3\n- news layout\n- 2 column layout\n- grid layout\n- z layout\n- f layout \n\n\nangle\n\nI love CSS\nI hate repeating myself\nI am hoarder\n\n-->\n<blockquote>\n<p>This is part 2 of <a href=\"/most-used-css-patterns\">CSS snippets I used 90% of the time</a> post. </p>\n</blockquote>\n<p>As promised this is second part of CSS styles I commonly used with my projects. If you are going to think of a rule I‚Äôd say this is my 80/20 rule for CSS. <!--more--> I have a common set patterns when designing and building sites. The rest depends on what the client needs.</p>\n<p>The list this time are of interactive and UI elements used on of my recent projects.    </p>\n<h2 id=\"create\">Centering an element in a box</h2>\n<p>There are a lot ways to <a href=\"https://css-tricks.com/centering-css-complete-guide/\">center an element</a> but in 8 out 10 projects I use only two styles when I need to center an element in a box. I keep two styles because it depends on the circumstance. </p>\n<h3>Using flex</h3>\n<p>I use this if I can use <code class=\"language-text\">display:flex</code> mostly because flexbox is well ‚Äúflexible‚Äù. Most of the time I need to center more than one item so wrapping is a concern. Flexbox is very good with this. </p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// source CSS Tricks</span>\n<span class=\"token selector\">.parent </span><span class=\"token punctuation\">{</span>\n   <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n   <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n   <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// define dimensions of the box</span>\n   <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100vw<span class=\"token punctuation\">;</span>\n   <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token selector\">.child </span><span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>centered-child<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> Child element <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>This will center an element inside the box. Another good thing about using this technique is your element is in the normal document flow except when adding <code class=\"language-text\">order</code> property to child elements. If you are concerned with accessibility this is very important to remember. Using <a href=\"https://webaim.org/blog/flexbox-and-the-screen-reader-experience/\"><code class=\"language-text\">order</code> to arrange flex elements is discouraged</a> because they break the <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/meaningful-sequence\">reading order</a> of the elements.  </p>\n<h3>Absolute positioning</h3>\n<p>I use this next style if I can‚Äôt use flexbox and/or I need dynamic element like a modal. Another reason I might use this style is if I can‚Äôt touch the parent style since the all the positioning style is in the child element. </p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// Source CSS Tricks</span>\n<span class=\"token selector\">.parent </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.modal </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">,</span> -50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    This is a modal\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"overlay\"> Overlay </h2>\n<p>Overlays are another UI pattern I use a lot. They are great for preventing mouse input where you don‚Äôt want it, giving contrast to an element, and goes great with modals. Before I needed to use javascript to add the overlay as we want to know when the modal is visible in the parent. I accomplish that by adding a <code class=\"language-text\">.has-modal</code> class in the parent when modal is visible. </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parent has-modal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    This is a modal\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">.parent </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.modal </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">,</span> -50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// overlay</span>\n<span class=\"token selector\">.parent.has-modal:before  </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100vw<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0.3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we can do away with that and use <code class=\"language-text\">:has</code> selector.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    This is a modal\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// overlay</span>\n.<span class=\"token property\">parent</span><span class=\"token punctuation\">:</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>.modal<span class=\"token punctuation\">)</span><span class=\"token selector\">:before  </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100vw<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0.3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Check out the demo to see the styles in action. </p>\n<p><a href=\"https://codepen.io/chrisbautista/pen/WNgQRQE\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/WNgQRQE/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<p>Note that the overlay only prevents mouse input to the elements underneath the overlay. It will not stop keyboard users from tabbing into elements. This is not good for accessibility. We can fix this looping through the elements that need to be ignored and add <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\">inert</a>. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//e.g</span>\n\n<span class=\"token keyword\">let</span> focusableElements <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">':not(.modal) a, :not(.modal) button, input, :not(.modal) [contentEditable],:not(.modal)  [tabindex]:not([tabindex=-1])'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfocusableElements<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\nel<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inert'</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"truncaste\">Truncate text</h2>\n<p>There will be times you want to truncate a large amount of text. It could be to improve a design and optimize the space or just to indicate you have more information and you want to signal the user to dig some more. Whatever reason its good to have a handy CSS class you can use to do the truncation for you. </p>\n<p>Below is the markup we are going to use for truncation classes.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>truncate-demo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum laoreet a nisi quis lacinia. Pellentesque sit amet mauris ac nunc pellentesque dignissim a at quam. Aliquam pulvinar nulla sit amet ligula malesuada luctus a et mauris. Maecenas in mauris massa. Proin sit amet tellus a ipsum hendrerit varius. Sed eleifend odio vitae magna gravida mollis. Aenean massa ipsum, vehicula in enim gravida, tempus tempus arcu. Nullam porta nisi vitae sem fringilla, ut tristique neque dapibus. Cras commodo nunc non elit lobortis, at pretium elit efficitur. Etiam condimentum varius rutrum.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">.truncate-demo </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 2px solid #d3d3d3<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>One-line truncation</h3>\n<p>For one line truncation, the trick is use the CSS property <code class=\"language-text\">text-overflow</code>. Whether its one-line or multiline, you need to first set the boundaries of the text container, in the case of a onle truncate its the width of the container. After that set make sure nothing bleeds out of the container by setting <code class=\"language-text\">overflow:hidden</code>.</p>\n<style>\n\n.one-line {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.truncate-demo {\n  width: 100%;\n  border: 2px solid #d3d3d3;\n  padding: 8px;\n}\n\n</style>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">.one-line </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> nowrap<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-overflow</span><span class=\"token punctuation\">:</span> ellipsis<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.truncate-demo </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 2px solid #d3d3d3<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"demo\">\n <div class=\"one-line truncate-demo\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum laoreet a nisi quis lacinia. Pellentesque sit amet mauris ac nunc pellentesque dignissim a at quam. Aliquam pulvinar nulla sit amet ligula malesuada luctus a et mauris. Maecenas in mauris massa. Proin sit amet tellus a ipsum hendrerit varius. Sed eleifend odio vitae magna gravida mollis. Aenean massa ipsum, vehicula in enim gravida, tempus tempus arcu. Nullam porta nisi vitae sem fringilla, ut tristique neque dapibus. Cras commodo nunc non elit lobortis, at pretium elit efficitur. Etiam condimentum varius rutrum.</div>\n</div>\n<h3>Multiline truncation</h3>\n<p>For multiline truncation its a bit different but the same principle. For this we need to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-line-clamp\">line clamping</a>. </p>\n<style>\n\n.three-line {\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 3;\n  overflow: hidden;\n}\n\n</style>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">.three-line </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> -webkit-box<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-box-orient</span><span class=\"token punctuation\">:</span> vertical<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-line-clamp</span><span class=\"token punctuation\">:</span> 3<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"demo\">\n <div class=\"three-line truncate-demo\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum laoreet a nisi quis lacinia. Pellentesque sit amet mauris ac nunc pellentesque dignissim a at quam. Aliquam pulvinar nulla sit amet ligula malesuada luctus a et mauris. Maecenas in mauris massa. Proin sit amet tellus a ipsum hendrerit varius. Sed eleifend odio vitae magna gravida mollis. Aenean massa ipsum, vehicula in enim gravida, tempus tempus arcu. Nullam porta nisi vitae sem fringilla, ut tristique neque dapibus. Cras commodo nunc non elit lobortis, at pretium elit efficitur. Etiam condimentum varius rutrum.</div>\n</div>\n<h2 id=\"fullscreenimage\">Fullscreen background image</h2>\n<p>Fullscreen background images have been a constant mainstay in my projects. The trend started in the late 2000s, popularized by Apple‚Äôs website featuring the Iphone. Nowadays, most websites especially those in marketing, creative or business websites will have a fullscreen image background or a large image style as ‚Äúabove the fold‚Äù. Be careful with this depending on the image you may impact the speed at which your site loads. </p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">body </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path/to/background.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-repeat</span><span class=\"token punctuation\">:</span> no-repeat<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> center center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The key part here that enables fullscreen images is <code class=\"language-text\">background-size:cover</code>.  Setting <code class=\"language-text\">cover</code> to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-size\">background-size</a> resizes your image to ‚Äúcover‚Äù most of the container without stretching or skewing the image. </p>\n<h2>Wrapping up</h2>\n<p>Having a quick reference for common frontend work is a good way to improve your workflow. Hope these list of CSS styles will be of use to you. I recommend installing a snippet library so its available when you need it.  </p>","fields":{"slug":"/2023/most-used-css-patterns-part-2/"},"frontmatter":{"date":"February 09, 2023","title":"CSS Snippets I Use 90% of The Time - Part 2","featured_image":"/blog/pankaj-patel-css-unsplash.jpg","tags":["css","snippets","UX","frontend","cheatsheet"]}}},{"node":{"excerpt":"I have snippets of code I return to whenever I find patterns in a design. It is one of those efficiency hacks I‚Äôve adopted as a programmer. I have quite a collection. Gathered working on websites in different industries. Although the size and theme of these websites vary,  I can still count on some basic UI patterns.","html":"<!--\n- modal overlay\n- screenreader-only\n- golden ratio font settings\n- inline list\n- breadcrumbs\n\n- text truncate\n   - line\n   - multiline\n-  full card image\n-  button with icon\n-  flip card\n-  centered child\n\nangle\n\nI love CSS\nI hate repeating myself\nI am hoarder\n\n\n-->\n<p>I have snippets of code I return to whenever I find patterns in a design. It is one of those efficiency hacks I‚Äôve adopted as a programmer. I have quite a collection. Gathered working on websites in different industries. Although the size and theme of these websites vary,  I can still count on some basic UI patterns. <!--more--> I condensed them into tried and tested snippets I use often. </p>\n<p>In this post, I am sharing some of these CSS snippets. </p>\n<h2 id=\"font-settings\">1. Golden ratio font settings</h2>\n<p>The first thing I learned as a web developer is that how you define the text styles tells the reader the hierarchy of the information presented on a page. For that reason one of the very first things a web developer defines in CSS is the font styles. </p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'https://fonts.googleapis.com/css?family=Poppins:400'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></span>\n\n<span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Poppins'</span><span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> 400<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 1.75<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #000000<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span><span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">h1, h2, h2, h4, h5</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 3rem 0 1.38rem<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Poppins'</span><span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> 400<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 1.3<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">h1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 11.089rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">h2</span> <span class=\"token punctuation\">{</span><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 6.854rem<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">h2</span> <span class=\"token punctuation\">{</span><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 4.236rem<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">h4</span> <span class=\"token punctuation\">{</span><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 2.618rem<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">h5</span> <span class=\"token punctuation\">{</span><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1.618rem<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">small, .text_small</span> <span class=\"token punctuation\">{</span><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 0.618rem<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we‚Äôve defined all the important semantic tags concerning the text. The font sizes are defined according to the Golden Ratio. The <a href=\"https://www.britannica.com/science/golden-ratio\">golden ratio</a>, is also known as the golden section or divine proportion. In mathematics, it is defined as approximately equal to <code class=\"language-text\">1.618</code>. In aesthetics, the golden ratio is known as a basis for beauty. You can apply this in typography when you are figuring out the font size of a body text and its header. For example, if your body font size is 16px, multiply it by 1.618 to get the heading font size. I use the ‚ÄúPoppins‚Äù font here as an example. Change the font depending on your needs. </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h5</span><span class=\"token punctuation\">></span></span>Heading title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h5</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Nunc velit leo, pellentesque a velit pretium, hendrerit tempor tortor. \n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas massa \n  lectus, venenatis non elit sed, egestas gravida lacus. Etiam porta congue \n  est, sed bibendum purus feugiat eu. Integer at vulputate tellus, tristique \n  tempor lectus. Nam nisl enim, viverra egestas bibendum eget, aliquet id \n  eros. Pellentesque habitant morbi tristique senectus et netus et malesuada \n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<style>\n  .golden-ratio h5 {font-size: 1.618rem;}\n  .golden-ratio p {font-size: 1rem;}\n</style>\n<div class=\"demo golden-ratio\">\n <h5>Heading title</h5>\n <p>Nunc velit leo, pellentesque a velit pretium, hendrerit tempor tortor. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas massa lectus, venenatis non elit sed, egestas gravida lacus. Etiam porta congue est, sed bibendum purus feugiat eu. Integer at vulputate tellus, tristique tempor lectus. Nam nisl enim, viverra egestas bibendum eget, aliquet id eros. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Mauris venenatis erat et dui commodo, id tempus ante porttitor. Integer eget sapien accumsan, sodales ante ac, mattis nulla.</p>\n</div>\n<p>The golden ratio here is the <a href=\"https://fonts.google.com/knowledge/glossary/scale\">typographic scale</a> that dictates font sizes within your visual text hierarchy. The golden ratio might not fit your design but it‚Äôs a good starting point. My suggestion is to start with these and then adjust them to match your needs. I recently discovered <a href=\"https://www.layoutgridcalculator.com/type-scale/\">layoutgridcalculator‚Äôs typography tool</a>. It‚Äôs very versatile with options to define the scale ratio and the number of steps in the scale. You can even generate the CSS once you‚Äôre happy with your settings. Check it out if you‚Äôre not quite sure where to start.</p>\n<!--ad-->\n<h2 id=\"inline-lists\">2. Horizontal list</h2>\n<p>I always use list tags for accessibility. The bad thing about lists is that by default they are rendered vertically. For some designs, you will need to render these lists in a row. Start with the markup below and stick these CSS into your stylesheet and add <code class=\"language-text\">.horizontal-list</code> class to turn any list into a horizontal list. </p>\n<div class=\"demo list-initial\">\n   <ul>\n    <li>\n        list item 1\n    </li>\n    <li>\n        list item 2\n    </li>\n    <li>\n        list item 3\n    </li>\n    <li>\n        list item 4\n    </li>\n  </ul>\n</div>\n<style>\n  .demo.list .horizontal-list {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n  }\n\n .demo.list .horizontal-list li{\n  display: inline-block;\n  padding: 4px;\n  margin: 4px 0 0;\n  border: 1px solid #ddd;\n }\n\n</style>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\">  <span class=\"token selector\">.horizontal-list </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">list-style</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">.horizontal-list li</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 4px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 4px 0 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #ddd<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>horizontal-list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n        sample item 1\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n        sample item 2\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n        sample item 3\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n        sample item 4\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"demo list\">\n   <ul class=\"horizontal-list\">\n    <li>\n        list item 1\n    </li>\n    <li>\n        list item 2\n    </li>\n    <li>\n        list item 3\n    </li>\n    <li>\n        list item 4\n    </li>\n</ul>\n</div>\n<p>I used this a lot, especially for navigation. You can replace the text with anchor tags or buttons. If you have a lot of items this style will also wrap nicely. </p>\n<div class=\"demo list\">\n   <ul class=\"horizontal-list\">\n    <li>\n        list item 1\n    </li>\n    <li>\n        list item 2\n    </li>\n    <li>\n        list item 3\n    </li>\n    <li>\n        list item 4\n    </li>\n        <li>\n        list item 4\n    </li>\n        <li>\n        list item 4\n    </li>\n        <li>\n        list item 4\n    </li>\n        <li>\n        list item 4\n    </li>\n          <li>\n        list item 4\n    </li>      <li>\n        list item 4\n    </li>\n  </ul>\n</div>\n<p>It is good to remember that this is not the only way to style a list. It has not failed me so far so I am sticking with it. </p>\n<h2 id=\"breadcrumbs\">3. Breadcrumbs</h2>\n<p>The horizontal list earlier is the basis for another common web UI pattern. The breadcrumb is a great navigation tool, especially for sites with a lot of content. You tackle it as a list with a divider symbol, usually, a chevron pointed to a child page.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>breadcrumbs<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>horizontal-list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>parent item 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>parent item 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>parent item 3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n          current page title\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"> <span class=\"token selector\">.breadcrumbs li:not(:last-child)::after</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'>'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0 5px<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<style>\n  .demo.crumb .horizontal-list {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n  }\n\n .demo.crumb .horizontal-list li {\n  display: inline-block;\n  padding: 4px;\n  margin: 4px 0 0 -8px;\n }\n\n .demo.crumb li:not(:last-child)::after {\n    display: inline-block;\n    content: '>';\n    padding: 0 5px;\n }\n\n .demo.crumb li a {\n    border-bottom: none !important;\n }\n</style>\n<div class=\"demo crumb\">\n  <nav class=\"breadcrumbs\">\n    <ul class=\"horizontal-list\">\n      <li >\n          <a href=\"#\">parent item 1</a>\n      </li>\n      <li >\n          <a href=\"#\">parent item 2</a>\n      </li>\n      <li >\n          <a href=\"#\">parent item 3</a>\n      </li>\n      <li >\n          current page title\n      </li>\n    </ul>\n  </nav>\n</div>\n<p>It‚Äôs important to note that you need to add the ‚Äúhorizontal list‚Äù style with the breadcrumb CSS here. </p>\n<h2 id=\"screen-reader-only\">4. For screen readers only</h2>\n<p>Accessibility work might take you into situations where you need to expose text to screenreaders but hide it from sighted users. One use case is when you need image buttons without text. </p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.screenreader-only</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span>absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>-10000px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span>auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>1px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>1px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span>hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>horizontal-list icon-buttons<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>‚úñ<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>üíæ<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<style>\n  .demo.icon .horizontal-list {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    border: 1px solid #ddd;\n  }\n\n .demo.icon .horizontal-list li{\n  display: inline-block;\n  padding: 4px;\n  margin: 4px 0 0;\n }\n\n .demo.icon button {\n  background-color: transparent;\n  border: none;\n  font-size: 1.5rem;\n }\n\n  .demo.icon .screenreader-only {\n  position:absolute;\n  left:-10000px;\n  top:auto;\n  width:1px;\n  height:1px;\n  overflow:hidden;\n }\n\n</style>\n<p>Here we have a list of icon buttons. The output can be understood by sighted users but is next to useless for screen reader users. We need descriptive text to tell screen reader users the buttons‚Äô purpose. </p>\n<div class=\"demo icon\">\n    <ul class=\"horizontal-list icon-buttons\">\n      <li>\n          <button><span>‚úñ</span></button>\n      </li>\n      <li>\n          <button><span>üíæ</span></button>\n      </li>\n    </ul>\n</div>\n<p>To remedy this we change the markup a bit to include the button text. Wrap the text in span with <code class=\"language-text\">screenreader-only</code> class. </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>horizontal-list icon-buttons<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>‚úñ<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>screenreader-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> Delete<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>üíæ<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>screenreader-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> Save<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Now when a screen reader focuses on one of the buttons it will announce the included text. </p>\n<p>Use a screen reader to test the widget below. </p>\n<div class=\"demo icon\">\n    <ul class=\"horizontal-list icon-buttons\">\n      <li>\n          <button><span>‚úñ</span><span class=\"screenreader-only\"> Delete</span></button>\n      </li>\n      <li>\n          <button><span>üíæ</span><span class=\"screenreader-only\"> Save</span></button>\n      </li>\n    </ul>\n</div>\n<h2 id=\"disabled\">5. Disabled area</h2>\n<p>Here is a style commonly used but rarely thought about. I for one only remember adding disabled styles when I actually need it. The use case is you want to disable an area to prevent interaction. On form controls (input, textarea, buttons etc.) you can accomplish this by using the <code class=\"language-text\">[disabled=true]</code> parameter. But for non-form controls like a table or big wall of text. There is no markup or attribute to aid with this. </p>\n<p><strong>Example</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wall-of-text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\nFusce porta pellentesque molestie. Praesent sit amet tempus enim, in convallis risus. Vivamus id urna augue. Quisque laoreet fringilla lorem vitae posuere. Integer non ex molestie, maximus ex non, tristique enim. Pellentesque dapibus ultrices elit, eget ornare risus. Etiam eget ullamcorper nunc, sed ultricies enim. Quisque vehicula sit amet enim eu imperdiet. Aenean dignissim purus nisi, ultricies accumsan tortor finibus et. Duis dictum orci vitae convallis bibendum.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Another reason to disable a section of your page is to tell the user the difference between different states like when a toggle controls some content. </p>\n<style>\n\n  .demo.disabled .toggle ~ .wall-of-text {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n\n  .demo.disabled .toggle:checked ~ .wall-of-text {\n    opacity: 1;\n    pointer-events: auto;\n  }\n\n</style>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\">  <span class=\"token selector\">.disabled, [disabled]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0.5<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">pointer-events</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"demo disabled\">\n  <input type=\"checkbox\" class=\"toggle\"> Read agreement\n  <div class=\"wall-of-text\">\n  Fusce porta pellentesque molestie. Praesent sit amet tempus enim, in convallis risus. Vivamus id urna augue. Quisque laoreet fringilla lorem vitae posuere. Integer non ex molestie, maximus ex non, tristique enim. Pellentesque dapibus ultrices elit, eget ornare risus. Etiam eget ullamcorper nunc, sed ultricies enim. Quisque vehicula sit amet enim eu imperdiet. Aenean dignissim purus nisi, ultricies accumsan tortor finibus et. Duis dictum orci vitae convallis bibendum.\n  <label><input type=\"radio\" name=\"choice\" class=\"toggle\"> Agree</label>\n  <label><input type=\"radio\" name=\"choice\" class=\"toggle\"> Disagree</label>\n  </div>   \n</div>\n<p><strong>Update:</strong> Most browsers now support <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert\">inert</a> attribute. It works similarly to <code class=\"language-text\">pointer-events: none</code> that prevents triggering or receiving any events on the element. Note that, unlike form controls that change the style when <code class=\"language-text\">disabled</code> attribute is set, there is no visible indication when inert is set. It is the developer‚Äôs responsibility to define if needed. </p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">[inert]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0.5<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Wrapping up</h2>\n<p>These styles may not be as glamorous as grid layouts or flip cards but equally important when building a website. There are more styles to share in future posts. </p>","fields":{"slug":"/2023/most-used-css-patterns/"},"frontmatter":{"date":"January 28, 2023","title":"CSS Snippets I Use 90% of The Time - Part 1","featured_image":"/blog/pankaj-patel-css-unsplash.jpg","tags":["css","snippets","accessibility","UX","frontend","cheatsheat"]}}},{"node":{"excerpt":"Improving accessibility is an exercise in empathy. We put ourselves in other people‚Äôs shoes and imagine how we can do a specific task. Tasks like going up a flight of stairs, knowing when to cross a street, or how to consume a website.","html":"<p>Improving accessibility is an exercise in empathy. We put ourselves in other people‚Äôs shoes and imagine how we can do a specific task. Tasks like going up a flight of stairs, knowing when to cross a street, or how to consume a website. <!--more--> Knowing the difficulties people encounter when using your website/application, can aid us in designing better experiences for our users.</p>\n<p>One of the areas UX designers and developers alike fail to give attention to is keyboard navigation. Keyboard navigation is important because you may have users that depend on the keyboard or screenreaders to read your website. If your site is hard to navigate for these users, they might just quit your site all together and move on. </p>\n<p>Here are my top three tips for better keyboard and screen reader navigation</p>\n<h2>1. Use headings and landmarks</h2>\n<p>I mentioned before in <a href=\"/2022/five_steps_to_improve_accessibility\">five steps to improve accessibility</a>. One of the simplest thing you can do to improve accessibility is to use semantic tags like headings and landmarks to mark up your HTML. Headings and landmark tags not only help tell the screen reader about the information hierarchy on your page but also helps in navigation. This technique benefits screenreader users. </p>\n<p><a href=\"https://www.w3.org/WAI/tutorials/page-structure/headings/\">Headings</a> provide a straightforward way of distinguishing information hierarchy on a page. The first heading (<code class=\"language-text\">&lt;h1 /></code>) is commonly the title of the page which tells the reader what the site or page is about. After that, you organize the supporting information into sub-topics titled <code class=\"language-text\">&lt;h2/></code> and so on.  </p>\n<p><strong>Headings</strong> </p>\n<ul>\n<li>h1</li>\n<li>h2</li>\n<li>h3</li>\n<li>h4</li>\n<li>h5</li>\n<li>h6</li>\n</ul>\n<p><a href=\"https://www.w3.org/WAI/tutorials/page-structure/regions/\">Page regions or landmarks</a> divide the content into meaningful areas. For example, the <code class=\"language-text\">&lt;header /></code> will contain navigation links and the name of a website, and the <code class=\"language-text\">&lt;main /></code> tag will wrap the ‚Äúmain‚Äù content of the page.</p>\n<p><strong>Region tags</strong> </p>\n<ul>\n<li>header</li>\n<li>footer </li>\n<li>aside </li>\n<li>nav</li>\n<li>main</li>\n<li>section</li>\n</ul>\n<p>We can also use <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">ARIA roles</a></p>\n<p><strong>Landmark roles</strong></p>\n<ul>\n<li>banner</li>\n<li>complementary</li>\n<li>main</li>\n<li>navigation</li>\n<li>region</li>\n<li>and more.</li>\n</ul>\n<p>Screen readers are capable of traversing a page through headings and landmarks. Using certain shortcuts, assistive technologies can jump from one heading to another. Some screenreaders can even list all the headings and landmarks on a page and then give the user a choice to jump to a specific heading or landmark. </p>\n<h2>2. Add skip links</h2>\n<p>The worst part about navigating a page with the keyboard (e.g. <kbd>Tab</kbd>) is having to go through a lot of page real estate. For example, you would need to go through the main navigation, aside elements, tag lists, and call-to-action buttons before you can get to the main content. It can be exhausting for your users to do that every time. My <kbd>Tab</kbd> key finger (if that is a thing) already hurts just thinking about it. It wastes your users‚Äô time when they can already be reading your awesome content. To remedy this add skip links to your markup. Skip links can be part of your design or hidden until needed. These elements allow the user to jump to a specific topic or area on your page. Saving them so much pain. </p>\n<!--ad-->\n<p>Here‚Äôs a simple ‚Äúskip to main content‚Äù link you can incorporate to your site.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">.skip-to-main-content </span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// hide by default but readable to screenreaders </span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> -999px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transitio</span><span class=\"token punctuation\">:</span> top 0.35s<span class=\"token punctuation\">;</span>\n\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:focus</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// show in to view when focused </span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#main-content<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>skip-to-main-content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Skip to main content<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n...\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>article</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main-content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>article</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The key here is to make the skip link the very top element in the markup so that it gets focused first. The link scrolls the page to the area marked by <code class=\"language-text\">id=main-content</code>. </p>\n<h2>3. Minimize key presses</h2>\n<p>If you have a user interface/design that requires a lot of traversals and you can‚Äôt use skip links, modify the key handling used for navigation. </p>\n<h3>3.1 Assign other keys for navigation</h3>\n<div class=\"img-demo\">\n  <img src=\"/blog/just-tabs.png\"/>\n</div>\n<p>Tables are a common pattern to present information for a related group of data. Take, for example, the wireframe above, we have columns for data and a column for action buttons. The easiest we can do is just mark up the HTML so that the focusable elements like buttons can be ‚Äútabbed‚Äù into. In the previous image, we marked the element the user needs to interact with. If you use the <kbd>Tab</kbd> key, it will take you 8 key presses before a user reaches the <code class=\"language-text\">Delete</code> button. I call <strong>8</strong> key presses the traversal index (<code class=\"language-text\">T</code> index for short) to activate the <code class=\"language-text\">Delete</code> button. </p>\n<p>Before we go further, note I just coined the term, traversal index. Not sure if there‚Äôs a proper term for that. </p>\n<p>Anyhow, the table still looks fine with three controls(checkbox, delete and save button) and a few rows. But when you‚Äôve add more focusable elements or when the number of table rows increases, the traversal index will grow quite large. </p>\n<p>We want to reduce the <code class=\"language-text\">T</code> index to make your keyboard(/screen reader) users happy.  Now check out the sample below, </p>\n<div class=\"img-demo\">\n  <img src=\"/blog/with-arrow-keys.png\"/>\n</div>\n<p>In this table, we‚Äôve added event handlers to use <kbd>Arrow Up</kbd> and <kbd>Arrow Down</kbd> keys to navigate between table rows. Once a row is focused(indicated by grey background color), the user can then use the <kbd>Tab</kbd> key to navigate between the items within the row. With this simple change, we‚Äôve reduced the <code class=\"language-text\">T</code> index to 4. Sparing your users from carpal tunnel syndrome. </p>\n<p>It is important to note that since this is not a common navigation convention for tables, you need to notify the user about the extended navigation before or when the table is focused. </p>\n<blockquote>\n<p>For example,</p>\n<p><strong>Instruction:</strong> Use arrow keys to navigate rows and <kbd>Tab</kbd>(/<kbd>Shift</kbd>+<kbd>Tab</kbd>) key to move between items in a row. </p>\n</blockquote>\n<!--ad-->\n<h3>3.2 Limit navigation between same level areas</h3>\n<p>Here‚Äôs another,</p>\n<div class=\"img-demo\">\n  <img src=\"/blog/page-sections-tabs-only.png\"/>\n</div>\n<p>The wireframe shows three sections (header, table, and links). The header has only one link and the table has four(4) rows with one(1) focusable element per row. To navigate from the header to the ‚Äúlinks‚Äù section, we will need to press the <kbd>Tab</kbd> key six(6) times. The problematic step here is we spend a lot of time focusing on the table rows before arriving at the Links section.</p>\n<p>We can improve the keyboard navigation by keeping the ‚Äútab‚Äù stops on the three sections initially. One way of doing this is to prevent your table contents from getting focused until needed. For instance, adding <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\">inert</a> attribute to the <code class=\"language-text\">&lt;tbody /></code> wrapper will prevent the table contents from getting focused. This change reduces the <code class=\"language-text\">T</code> index to <code class=\"language-text\">3</code>. </p>\n<p>The second part of this technique is to assign a special key( or keys) to enable navigation inside the table. For example, same with the previous table navigation handler, when the table is focused pressing <kbd>Arrow down</kbd> or <kbd>Arrow up</kbd> keys will focus one of the rows. Then you can navigate vertically or horizontally inside the table after. We can then continue through the table rows or press <kbd>Escape</kbd> key to exit the table. </p>\n<div class=\"img-demo\">\n  <img src=\"/blog/page-sections-plan-focus.png\"/>\n</div>\n<p>You might think that the additional navigation is complex. It won‚Äôt be - it really depends on your implementation. It will take quite a bit of coding but the other side of the equation is a better way of navigating your page.</p>\n<p>Another option we can do here to improve the <code class=\"language-text\">T</code> index is to assign a key combination(/s) to each section. For example, assign <kbd>/</kbd> + <kbd>l</kbd> to jump straight to the links section. This will keep the default navigation behavior but still provide the user a means to avoid extraneous key presses. </p>\n<p>Again, the key for both techniques is to inform the user of the special keyboard navigation. </p>\n<h2>Wrapping up</h2>\n<p>Improve keyboard accessibility further by making sure to;</p>\n<ul>\n<li>use headings and landmarks; </li>\n<li>add skip links when necessary and; </li>\n<li>reduce the number of keypresses to navigate a page/section</li>\n</ul>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://www.w3.org/WAI/tutorials/page-structure/\">WCAG Tutorials</a></li>\n<li><a href=\"https://webaim.org/techniques/skipnav/\">WebAIM: Skip navigation links</a></li>\n<li><a href=\"https://a11y-guidelines.orange.com/en/web/toolbox/methods-and-test-tools/navigating-with-a-screen-reader/\">Navigating with a screenreader</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">MDN: WAI-ARIA roles</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element#content_sectioning\">MDN: Elements - Content sectioning</a></li>\n</ul>","fields":{"slug":"/2023/three-things-you-can-do-for-keyboard-screanreader-navigation/"},"frontmatter":{"date":"January 20, 2023","title":"Top three things to do for better keyboard and screenreader navigation","featured_image":"/blog/christin-hume-unsplash.jpg","tags":["accessibility","UX","frontend"]}}},{"node":{"excerpt":"Part of my new year resolution for 2023 is to learn at least 3 new front-end frameworks. One of these frameworks I intend to dive deeper into is Vue.js.  Every time I want to learn something new I try to plan first. A very quick to-do list related to the subject. I know there‚Äôs a lot of great guides out there about Vue.js.","html":"<p>Part of my <a href=\"/2022/programmers_resolution_2023/\">new year resolution for 2023</a> is to learn at least 3 new front-end frameworks. One of these frameworks I intend to dive deeper into is Vue.js. </p>\n<p>Every time I want to learn something new I try to plan first. A very quick to-do list related to the subject. I know there‚Äôs a lot of great guides out there about Vue.js. <!--more--> But I still like making my little todo list. It keeps me focused. </p>\n<p>To start, I went to <a href=\"https://vuejs.org/guide/introduction.html\">Vue.js‚Äô documentation page</a>. I scanned all the topics provided. I looked for the least amount of concepts to get a sense of Vue.js - enough to start a simple application. Then, I grew my knowledge gradually. I‚Äôve outlined these initial concepts in this post. </p>\n<p>If you‚Äôre like me, one that is practically new to Vue.js, or if you worked on Vue.js before but interested in a refresher, or are just interested in reading on the topic, continue to read on.</p>\n<h2>Vue.js learning plan</h2>\n<p>To be honest I got lost quite early because of topics I am not familiar with. Topics like the difference between Options API and Composition API. If you don‚Äôt know what that is either, then you were me at the beginning. <a href=\"https://vuejs.org/guide/introduction.html#api-styles\">Vue.js documentation on API Preference</a> should explain the difference between API styles. </p>\n<p>To simplify, I restricted my study to just using the <a href=\"https://vuejs.org/guide/introduction.html#options-api\">Options API</a>. Feel free to try whichever API style you prefer. I found I readily applied the same concepts using Composition API once I understood it. So don‚Äôt worry about having to learn both in the beginning. </p>\n<ol>\n<li><a href=\"/2023/newbies_guide_to_learning_vuejs/#create\">How to create a Vue application</a></li>\n<li><a href=\"/2023/newbies_guide_to_learning_vuejs/#templates\">Working with Templates</a> </li>\n<li><a href=\"/2023/newbies_guide_to_learning_vuejs/#directives\">Vue.js Directives</a> </li>\n<li><a href=\"/2023/newbies_guide_to_learning_vuejs/#data\">Data handling and methods</a></li>\n<li><a href=\"/2023/newbies_guide_to_learning_vuejs/#computed\">Computed properties</a></li>\n<li><a href=\"/2023/newbies_guide_to_learning_vuejs/#event-handling\">Handling events</a></li>\n</ol>\n<!--ad-->\n<h3 id=\"create\">1. How to create a Vue Application</h3>\n<p>To start off, the first thing any developer wants to learn is how to make a simple application. Like most front-end frameworks nowadays, there are two ways to start creating an application. The first option is hosting an HTML page with the library CDN loaded and one is to build an application using build setup. Choose whichever way you want to start with. What‚Äôs important is you get started early to practice.</p>\n<p><strong>HTML page loading Vue CDN</strong></p>\n<ul>\n<li><a href=\"https://vuejs.org/guide/quick-start.html#using-vue-from-cdn\">Vuejs.org: Using a CDN</a></li>\n<li><a href=\"https://vueschool.io/lessons/getting-started-with-vuejs\">Vue School: Getting started with VueJS</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/vue@3/dist/vue.global.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>Build setup with NodeJS</strong></p>\n<ul>\n<li><a href=\"https://vuejs.org/guide/quick-start.html#creating-a-vue-application\">Vuejs.org: Using NodeJS Setup</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started#installation\">MDN: Vue.js - Installation</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token function\">npm</span> init vue@latest</code></pre></div>\n<h3 id=\"templates\">2. Working with Templates</h3>\n<p>Vue.js has templates to define the structure of a simple application. Templates are written in HTML(or HTML-like syntax) and can include special library-specific directives and expressions to render data. </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Message: {{ msg }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>{{ rawHtml }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li><a href=\"https://vuejs.org/guide/essentials/template-syntax.html\">Vuejs.org: Template Syntax</a></li>\n<li><a href=\"https://vueschool.io/lessons/vuejs-template-syntax-and-expressions\">Vue School: Vue.js Template Syntax and Expressions</a></li>\n</ul>\n<h3 id=\"directives\">3. Vue.js Directives</h3>\n<p>While working with templates, you will come across directives. Directives appear as element attributes specific to Vue.js. They are prefixed with <code class=\"language-text\">v-</code> syntax like the example below. Directives extend templates with logic and additional functionality. The example below the directive <code class=\"language-text\">v-for</code> loops thru the items and render the text for each item inside the div.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item in items<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  {{ item.text }}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li><a href=\"https://vuejs.org/api/built-in-directives.html\">VueJS.org: Directives</a></li>\n<li><a href=\"https://www.codecademy.com/courses/learn-vue-js/lessons/vue-introduction/exercises/directives\">CodeAcademy: Directives üíµ</a></li>\n<li><a href=\"https://vuejsdevelopers.com/lessons/understanding-directives-1/1/\">Vuejsdevelopers.com: Understanding Directives</a></li>\n</ul>\n<h3 id=\"data\">4. Data handling and methods</h3>\n<p>Vue.js components have a data object that holds the component‚Äôs state, and methods that can be used to manipulate the state. In my opinion, the ability to manage and manipulate data is what makes front-end frameworks interesting. It‚Äôs the difference between a simple HTML page and a dynamic site. </p>\n<ul>\n<li><a href=\"https://vuejs.org/api/options-state.html#data\">VueJS.org: Data</a></li>\n<li><a href=\"https://vueschool.io/lessons/vue-methods\">Vue School: Fundamentals - Vue methods</a></li>\n</ul>\n<h3>State management</h3>\n<p>State management is an advance topic related to data and how it drives your application. You can use the data object and other techniques to manage the state of the application. For simple cases that is enough. For more complex applications we should be using state management libraries. These libraries are Vue.js‚Äô answer to the flux pattern libraries ubiquitous to React.js projects.</p>\n<ul>\n<li><a href=\"https://pinia.vuejs.org/introduction.html\">Pinia</a></li>\n<li><a href=\"https://vuex.vuejs.org/\">Vuex</a></li>\n</ul>\n<p>Some articles I‚Äôve read - recommends using <strong>Pinia</strong> over <strong>Vuex</strong>. </p>\n<h3 id=\"computed\">5. Computed Properties</h3>\n<p>Computed properties are calculated based on other data or properties on a page. The contrived example below illustrates what computed properties are used for. The values are automatically ‚Äúcalculated‚Äù from the source property, <code class=\"language-text\">store.fruits</code>. When the source property changes the computed value also changes without additional code. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">store</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">fruits</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">'mango'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">//...</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">hasMangoToSell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span>fruits<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mango'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">'Yes'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'No'</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">></span></span>Has mango to sell?<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span>{{ hasMangoToSell }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span>\n  ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The <code class=\"language-text\">hasMangoToSell</code> computed property above is ‚Äúcomputed‚Äù from the data object property <code class=\"language-text\">store</code>. </p>\n<!--ad-->\n<ul>\n<li><a href=\"https://vuejs.org/guide/essentials/computed.html\">VueJs.org: Computed properties</a></li>\n<li><a href=\"https://vueschool.io/lessons/vuejs-computed-properties\">Vue School: Computed properties</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_computed_properties\">MDN: Using Vue computed properties</a></li>\n</ul>\n<h3 id=\"event-handling\">6. Handling events</h3>\n<p>Event handling is the essence of front-end interactivity. Vue.js allows you to handle events, such as button clicks, form inputs, and more. These events could either be inline or method handlers. </p>\n<p>Inline handlers executed code is defined inside a <code class=\"language-text\">@&lt;event name here>=\"\"</code> attribute. Like so: </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>counter++<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Increment<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>There are {{ counter }} sheep jumping over the fence<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Method handlers on the other hand are defined from the application object itself under the <code class=\"language-text\">methods</code> prop. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>increment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Increment<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>There are {{ counter }} sheep jumping over the fence<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li><a href=\"https://vuejs.org/guide/essentials/event-handling.html\">VueJS.org: Event Handling</a></li>\n<li><a href=\"https://vuejs.org/guide/essentials/forms.html\">VueJS.org: Form Input Bindings</a></li>\n<li><a href=\"https://vueschool.io/lessons/vuejs-user-events\">Vue School: User events</a></li>\n</ul>\n<h2>Wrapping up</h2>\n<p>There are other concepts a Vue.js developer needs to learn of course. I think you will encounter those topics while running through the topics in this list. Advanced topics like components, watchers, and hooks. Feel free to add that to your own learning plan. I am thinking to cover those topics when I start building more complex applications.</p>\n<p>After the list above I plan to explore more advanced topics and start building a project. It is important to practice by building small projects, experimenting with different features, and following tutorials. I think that is still the best way to learn. </p>\n<h2>Bonus</h2>\n<p>Aside from the excellent documentation on Vue.js‚Äô website. I found their <a href=\"https://vuejs.org/tutorial/#step-1\">tutorial</a> page really helpful too. If you like learning ala-FreecodeCamp-style, you can appreciate a similar experience. Same with FreecodeCamp, you are presented with topics on the language accompanied with code problems to solve. I recommend checking it out.</p>\n<h2>My progress so far</h2>\n<p>Below is my where I am in terms of my efforts learning Vue.js.  </p>\n<ol>\n<li><span>Learn Vue.js essential concepts</span> (partial)</li>\n<li>Debugging a VueJS application</li>\n<li>Create a blog application using Vue.js</li>\n<li>Learn Vue-Router</li>\n<li>Build for Production</li>\n</ol>","fields":{"slug":"/2023/newbies_guide_to_learning_vuejs/"},"frontmatter":{"date":"January 14, 2023","title":"Newbie's Guide to Learning Vue.js","featured_image":"/blog/viewfinder-unsplash.jpg","tags":["vue","frontend","web-development"]}}},{"node":{"excerpt":"A few issues I found recently for clients were related to accessibility. A few perfectly working user interfaces were not keyboard accessible. Not because they are custom controls nor because the controls were not tabable.","html":"<p>A few issues I found recently for clients were related to accessibility. A few perfectly working user interfaces were not keyboard accessible. Not because they are custom controls nor because the controls were not tabable. <!--more--> But, because the keyboard experience did not match the mouse-only interactions. These user interfaces are confusing, to say the least. </p>\n<p>I solved these issues by using the <code class=\"language-text\">:focus-within</code> psuedo-selector.</p>\n<p>I listed a few of them and the solutions.</p>\n<h2>Table row with hidden buttons</h2>\n<p>Here the developer added an effect that shows the buttons when hovered. The markup is accessible to screen readers but does not look correct for sighted persons that use the keyboard. Accessibility is not just for screenreaders. <a href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-focus-order.html\">Sighted people need to make sense</a> of the page too. </p>\n<style>\n.demo table {\n  min-width: 500px;\n  border-collapse: collapse;\n}\n\n.demo td,\n.demo th {\n  border: none;\n}\n\n.demo td,\n.demo th:not(:first-child) {\n  padding: 1rem 0.8rem;\n  margin: 0;\n  text-align: left;\n}\n\nthead tr {\n  border-bottom: 3px solid #ddd;\n}\n\ntbody {\n  /**\n  * Show buttons on hover and when an element is focused inside the row\n  */\n    border-bottom: 2px solid #ddd;\n}\ntbody tr button {\n  opacity: 0;\n}\ntbody tr:hover {\n  background-color: #ffd57e;\n}\ntbody tr:hover button {\n  opacity: 100%;\n}\n\nbutton {\n  border: none;\n  padding: 0;\n  margin: 0;\n  background: transparent;\n  -webkit-appearance: none;\n  box-shadow: none;\n}\n\n</style>\n<div class=\"demo\">\n<table tabindex=\"0\">\n  <thead>\n    <tr>\n      <th>\n        <div class=\"sr-only\">Checkbox</div>\n      </th>\n      <th>Name</th>\n      <th>Job description</th>\n      <th>\n        <div class=\"sr-only\">Controls</div>\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><input type=\"checkbox\" value=\"1\" name=\"user\"></td>\n      <td>John Doe</td>\n      <td>rocket scientist</td>\n      <td>\n        <button class=\"delete\" aria-label=\"delete\">‚ùå</button>\n        <button class=\"save\"  aria-label=\"save\">üíæ</button>\n      </td>\n    </tr>\n    <tr>\n      <td><input type=\"checkbox\" value=\"1\" name=\"user\"></td>\n      <td>Adam smith</td>\n      <td>economist</td>\n      <td>\n        <button class=\"delete\" aria-label=\"delete\">‚ùå</button>\n        <button class=\"save\" aria-label=\"save\">üíæ</button>\n      </td>\n    </tr>\n    <tr>\n      <td><input type=\"checkbox\" value=\"1\" name=\"user\"></td>\n      <td>Jose <rizal></rizal>\n      </td>\n      <td>novelist</td>\n      <td>\n        <button class=\"delete\" aria-label=\"delete\">‚ùå</button>\n        <button class=\"save\" aria-label=\"save\">üíæ</button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">tabindex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>thead</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Checkbox<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Job description<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Controls<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>thead</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tbody</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>John Doe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>rocket scientist<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>delete<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>delete<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>‚ùå<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>save<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>save<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>üíæ<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n      ...\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tbody</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Using the mouse, the table above works perfectly well. There is color highlighting and the buttons become visible when the mouse is over a table row. </p>\n<p>If you navigate the table using the keyboard, the experience is not what you will expect. Firstly, you don‚Äôt see the highlight color when focused on a row. The worst of it is you will be able to go through all the focusable elements using the keyboard - including the invisible buttons. This is confusing for sighted people using the keyboard. </p>\n<!--ad-->\n<p>Let‚Äôs check the style code below. The buttons are invisible by default(<code class=\"language-text\">opacity: 0</code>). When the mouse is over the row (<code class=\"language-text\">:hover</code>), it gets a background color and buttons become visible(<code class=\"language-text\">opacity: 100%</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// SCSS</span>\n\n<span class=\"token selector\">tbody tr </span><span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n  * Show buttons on hover\n  */</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #ffd57e<span class=\"token punctuation\">;</span>\n    <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Solution</h3>\n<p>We can use javascript and add an event handler on the focusable elements that gets triggered whenever any element on the row is focused. With that we can set a class (<code class=\"language-text\">.has-focused-element</code>) that applies the same style above.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> els <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tr input[type=checkbox], tr button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nels<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focus'</span><span class=\"token punctuation\">,</span> onFocus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// etc...</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// SCSS</span>\n\n<span class=\"token selector\">tbody tr </span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token comment\">/**\n  * Show buttons on hover\n  */</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover,\n  <span class=\"token parent important\">&amp;</span>.has-focused-element </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #ffd57e<span class=\"token punctuation\">;</span>\n    <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The changes above will work but uneccessary. We should try to solve any style problems inside the CSS first before reaching for Javascript.</p>\n<p>Another solution is to use <code class=\"language-text\">:focus-within</code> where the <code class=\"language-text\">:hover</code> psuedo-selector is defined. </p>\n<blockquote>\n<p>The :focus-within CSS pseudo-class matches an element if the element or any of its descendants are focused. In other words, it represents an element that is itself matched by the :focus pseudo-class or has a descendant that is matched by :focus. (This includes descendants in shadow trees.) - <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-within\">MDN</a></p>\n</blockquote>\n<p>‚ÄúFocus-within‚Äù psuedo selector can match elements that has elements that gets focused. In this case, we have the <code class=\"language-text\">checkbox</code> and <code class=\"language-text\">button</code> elements. When these elements gets focus, we can apply the same style as if we hovered the pointer on the table row. This will work without adding a line of javascript. </p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// SCSS</span>\n\n<span class=\"token selector\">tbody tr </span><span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n  * Show buttons on hover and when an element is focused inside the row\n  */</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover,\n  <span class=\"token parent important\">&amp;</span>:focus-within </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #ffd57e<span class=\"token punctuation\">;</span>\n    <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Solution in action</h3>\n<p>Here‚Äôs the same table using <code class=\"language-text\">:focus-within</code>,</p>\n<style>\n\n.fix tbody tr:hover, .fix tbody tr:focus-within {\n  background-color: #ffd57e;\n}\n.fix tbody tr:hover button, .fix tbody tr:focus-within button {\n  opacity: 100%;\n}\n\n</style>\n<div class=\"demo fix\">\n<table tabindex=\"0\">\n        <thead>\n          <tr>\n            <th>\n              <div class=\"sr-only\">Checkbox</div>\n            </th>\n            <th>Name</th>\n            <th>Job description</th>\n            <th>\n              <div class=\"sr-only\">Controls</div>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td><input type=\"checkbox\" value=\"1\" name=\"user\"></td>\n            <td>John Doe</td>\n            <td>rocket scientist</td>\n            <td>\n              <button class=\"delete\">‚ùå</button>\n              <button class=\"save\">üíæ</button>\n            </td>\n          </tr>\n          <tr>\n            <td><input type=\"checkbox\" value=\"1\" name=\"user\"></td>\n            <td>Adam smith</td>\n            <td>economist</td>\n            <td>\n              <button class=\"delete\">‚ùå</button>\n              <button class=\"save\">üíæ</button>\n            </td>\n          </tr>\n          <tr>\n            <td><input type=\"checkbox\" value=\"1\" name=\"user\"></td>\n            <td>Jose <rizal></rizal>\n            </td>\n            <td>novelist</td>\n            <td>\n              <button class=\"delete\">‚ùå</button>\n              <button class=\"save\">üíæ</button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n</div>\n<p>A user can navigate through the focusable elements in the row and see the ‚Äúhover‚Äù effect. </p>\n<!--ad-->\n<h2>Card with like(‚ô•) button</h2>\n<p>Here‚Äôs another user interface with a hover effect but no keyboard focus effect. Hovering over any part of the card applies a heart icon on top of the image indicating to the user that they can make the image their favorite. This card UI is part of an image gallery.</p>\n<style>\n\n.card {\n  min-width: 250px;\n  max-width: 250px;\n  overflow: hidden;\n  position: relative;\n  box-shadow: 1px 1px 4px 0 rgba(0 0 0 / 0.2), 2px 2px 8px 1px rgba(0 0 0 / 0.2);\n  padding: 15px 15px 10px 15px;\n  border-radius: 6px;\n}\n.card img {\n  width: 100%;\n  transition: opacity 0.35s ease-in-out;\n  margin: 0;\n}\n.card span {\n  font-size: 9rem;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  color: #ddd;\n  transform: translate(-50%, -50%);\n  text-decoration: none;\n  opacity: 0;\n}\n.card:hover img, .fix .card:focus-within img {\n  opacity: 70%;\n  background-color: #000;\n}\n.card:hover span, .fix .card:focus-within span {\n  opacity: 100%;\n}\n.card:hover button, .fix .card:focus-within button {\n  opacity: 0;\n}\n.fix .card:focus-within {\n  outline: 4px dashed #555;\n  outline-offset: -5px;\n}\n.card button {\n  position: absolute;\n  bottom: 20px;\n  right: 20px;\n  color: #ddd;\n  font-size: 1.5rem;\n  padding: 2px 4px;\n}\n\n</style>\n<div class='demo' tabindex=\"0\">\n<div class=\"card\">\n    <img src=\"https://images.unsplash.com/photo-1671026423293-7adf6a6abd13?crop=entropy&amp;cs=tinysrgb&amp;fm=jpg&amp;ixid=MnwzMjM4NDZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NzMwNTEwNzE&amp;ixlib=rb-4.0.3&amp;q=80\" alt=\"\">\n    <span>‚ô•</span>\n    <button class=\"like\">‚ô•</button>\n  </div>\n</div>\n<p>Works when using the mouse but when navigating using the keyboard - again the user experience fails. It lacks a good keyboard experience. When you tab through the card, the button gets focused - which is fine - but it‚Äôs not the effect we wanted.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>card<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://images.unsplash.com/photo-1671026423293-7adf6a6abd13?crop=entropy&amp;cs=tinysrgb&amp;fm=jpg&amp;ixid=MnwzMjM4NDZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NzMwNTEwNzE&amp;ixlib=rb-4.0.3&amp;q=80<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>‚ô•<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button-group<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>like<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>‚ô•<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// scss</span>\n\n<span class=\"token selector\">.card </span><span class=\"token punctuation\">{</span>\n  \n  <span class=\"token comment\">// ...</span>\n  \n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover </span><span class=\"token punctuation\">{</span>\n    <span class=\"token selector\">img </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 70%<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\">span </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I know some will ask why can we not just add <code class=\"language-text\">tabindex=0</code> on the card and add a <code class=\"language-text\">:focus</code> style. Yeah that could work. But, we would end up with two focus steps(one for the card and the heart (‚ô•) button) instead of just the button. We don‚Äôt want that.</p>\n<h3>Solution</h3>\n<p>Again <code class=\"language-text\">:focus-within</code> to the rescue. We go back to the style code and look for <code class=\"language-text\">:hover</code> styling. </p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// scss</span>\n<span class=\"token comment\">/**\n  * Make heart cover image visible when button is focused\n  */</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover,\n  <span class=\"token parent important\">&amp;</span>:focus-within </span><span class=\"token punctuation\">{</span>\n    <span class=\"token selector\">img </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 70%<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\">span </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The changes above should apply the same experience for both mouse and keyboard users. </p>\n<p>As a rule, we also want to add an outline when the card is focused using the keyboard. Similar to what we get when we focus any interactive control with the keyboard.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// scss</span>\n<span class=\"token selector\">.card </span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  \n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:focus-within </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> 4px dashed #333<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">outline-offset</span><span class=\"token punctuation\">:</span> 2px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Solution in action</h3>\n<p>Use the <kbd>Tab</kbd> key to navigate through the card. When the button gets focused the card activates the hover effect we defined earlier. Now both hover and focus events show the same effect.</p>\n<div class='demo fix' tabindex=\"0\">\n<div class=\"card\">\n    <img src=\"https://images.unsplash.com/photo-1671026423293-7adf6a6abd13?crop=entropy&amp;cs=tinysrgb&amp;fm=jpg&amp;ixid=MnwzMjM4NDZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NzMwNTEwNzE&amp;ixlib=rb-4.0.3&amp;q=80\" alt=\"\">\n    <span>‚ô•</span>\n    <button class=\"like\">‚ô•</button>\n  </div>\n</div>\n<!--ad-->\n<h2>Apply effects when buttons are hovered</h2>\n<p>In this example we have an image with a color swatch control. When you hover over any of the colors, the corresponding color value is blended with the image. This works correctly with the mouse but with the keyboard. We want to be able to get the same effect on the image when any of the buttons gets focused using the keyboard.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>picker<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>picker-group<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>picker-item<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">--selected-color</span><span class=\"token punctuation\">:</span> #912424</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>red<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>picker-item<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">--selected-color</span><span class=\"token punctuation\">:</span> #3566b2</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>blue<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>picker-item<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">--selected-color</span><span class=\"token punctuation\">:</span> #226642</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>green<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// scss</span>\n<span class=\"token selector\">.picker </span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// ...</span>\n  \n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url</span><span class=\"token punctuation\">(</span><span class=\"token property\">https</span><span class=\"token punctuation\">:</span><span class=\"token comment\">//images.unsplash.com/photo-1552944150-6dd1180e5999?crop=entropy&amp;cs=tinysrgb&amp;fm=jpg&amp;ixid=MnwzMjM4NDZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NzMwNTkzNzg&amp;ixlib=rb-4.0.3&amp;q=80);</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--selected-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover </span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// blend image with color when button is hovered or focused</span>\n    <span class=\"token property\">background-blend-mode</span><span class=\"token punctuation\">:</span> hard-light<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For this one we have some scripting to setup the hover(mouseover) effect. We try set the CSS variable <code class=\"language-text\">--selected-color</code> as the picker background color. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> picker <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".picker\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> buttons <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".picker-item\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">onHighlight</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">;</span>\n  picker<span class=\"token punctuation\">.</span>style <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>cssText<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">onRemoveColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  picker<span class=\"token punctuation\">.</span>style <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbuttons<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">button</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseover\"</span><span class=\"token punctuation\">,</span> onHighlight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npicker<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseout\"</span><span class=\"token punctuation\">,</span> onRemoveColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<style>\n.picker {\n  position: relative;\n  display: flex;\n  width: 300px;\n  height: 300px;\n  overflow: hidden;\n  background-image: url(https://images.unsplash.com/photo-1552944150-6dd1180e5999?crop=entropy&cs=tinysrgb&fm=jpg&ixid=MnwzMjM4NDZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NzMwNTkzNzg&ixlib=rb-4.0.3&q=80);\n  background-size: cover;\n  background-position: 20%;\n  border-radius: 4px;\n  background-color: var(--selected-color);\n  transition: background-color 0.35s ease-in-out;\n  flex: 1;\n}\n.picker:hover, .picker:focus-within {\n  background-blend-mode: hard-light;\n}\n.picker-item {\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  border: 2px solid #ededed;\n  background-color: var(--selected-color);\n  cursor: pointer;\n}\n.picker-group {\n  position: absolute;\n  bottom: 8px;\n  left: 8px;\n}\n</style>\n<p>This is how it looks. My blog software does not run javascript so the UI below only shows a snapshot of one of the button focused. I will include a Codepen demo later in this page so you can interact with it. </p>\n<div class='demo'>\n  <div class=\"picker\" style=\"--selected-color: #912424; background-blend-mode: hard-light;\">\n    <div class=\"picker-group\" >\n      <button class=\"picker-item\" style=\"--selected-color: #912424; outline: 2px dashed #fff;\"><span class=\"sr-only\">red</span></button>\n      <button class=\"picker-item\" style=\"--selected-color: #3566b2\"><span class=\"sr-only\">blue</span></button>\n      <button class=\"picker-item\" style=\"--selected-color: #226642\"><span class=\"sr-only\">green</span></button>\n    </div>\n  </div>\n</div>\n<p>Again the issue here is that the interface does not work well with the keyboard for sighted people. It‚Äôs screen reader friendly but the experience is lacking when not using the mouse. </p>\n<p>This is a bit more complicated so we leverage <code class=\"language-text\">:focus-within</code> in conjunction with a <code class=\"language-text\">focus</code> event handler to set the color and blend style when using the keyboard. </p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// SCSS</span>\n\n<span class=\"token selector\">.picker </span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover,\n  <span class=\"token parent important\">&amp;</span>:focus-within </span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// blend image with color when button is hovered or focused</span>\n    <span class=\"token property\">background-blend-mode</span><span class=\"token punctuation\">:</span> hard-light<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ...</span>\n\nbuttons<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">button</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseover\"</span><span class=\"token punctuation\">,</span> onHighlight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"focus\"</span><span class=\"token punctuation\">,</span> onHighlight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// trigger highlight script when buttons are focused</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//...</span></code></pre></div>\n<p>Using the solution above, we get a better experience without a lot of extra code. See the solution in action in the Codepen below. </p>\n<h2>Full solution</h2>\n<p>Here are all three solutions in action. Check out the final code to understand the solutions in their entirety. </p>\n<p><a href=\"https://codepen.io/chrisbautista/pen/bGjBZzM\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/bGjBZzM/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<h2>Wrapping up</h2>\n<p>Sometimes as web developers, it is great to work on problems that improve the user experience for a variety of people. For all the tools in our disposal its really great to know that adding a single psuedo-selector like <code class=\"language-text\">:focus-within</code> could be so useful. Without it, we might have ended up with some complicated solutions or worst case have to start from scratch. </p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-within\">MDN: focus-within</a></li>\n<li><a href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-focus-order.html\">WCAG: Focus order</a></li>\n<li><a href=\"https://www.w3.org/TR/2012/NOTE-UNDERSTANDING-WCAG20-20120103/navigation-mechanisms-focus-visible.html\">WCAG: Focus visible</a></li>\n</ul>","fields":{"slug":"/2023/fix_accessibility_with_focus_within/"},"frontmatter":{"date":"January 08, 2023","title":"Fix accessibility using focus-within","featured_image":"/blog/devin-avery-focus-unsplash.jpg","tags":["accessibility","css","frontend"]}}},{"node":{"excerpt":"I am the most undisciplined person I know. I make resolutions every year - and every year - I fall short. But I am stubborn too. So this year, I have decided to be a better programmer and work on my journey in this blog. I am starting with my new year‚Äôs resolution as a front-end developer.","html":"<!--\n[Inspired by math](https://matt.might.net/articles/programmers-resolutions/)\n\nResolution\n\n1. Learn 5 new frontend technologies\n2. Focus on web accessibility \n3. Streamline workflow \n4. Create 1 blog post per week\n5. Stay healthy \n-->\n<p>I am the most undisciplined person I know. I make resolutions every year - and every year - I fall short. But I am stubborn too. So this year, I have decided to be a better programmer and work on my journey in this blog. I am starting with my new year‚Äôs resolution as a front-end developer. <!--more--></p>\n<p>To keep me honest I have contracted my wife to check on my progress every month for each resolution. I made it a mission where I get a reward for accomplising my goal and punishment if I fail.  I got the idea from this list of <a href=\"https://www.makeuseof.com/strict-commitment-apps-that-force-you-working/\">commitment apps</a>. My wife promised to make it really hurt financially if I fail. That should keep me on my toes.üòÅ</p>\n<p>Inspired by <a href=\"https://matt.might.net/articles/programmers-resolutions/\">Matt‚Äôs programmers resolutions</a> here are my five new year resolutions. </p>\n<ol>\n<li><a href=\"#frameworks\">Learn three(3) new front-end frameworks</a></li>\n<li><a href=\"#accessibility\">Focus on web accessibility</a></li>\n<li><a href=\"#blog\">Create one (1) blog post per week</a></li>\n<li><a href=\"#stayhealthy\">Stay healthy</a> </li>\n<li><a href=\"#workflow\">Streamline workflow</a> </li>\n</ol>\n<h2 id=\"frameworks\">1. Learn three (3) new front-end frameworks </h2>\n<p>This year was a good year for frameworks. <a href=\"https://tsh.io/state-of-frontend/#frameworks\">More and more developers are using front-end frameworks</a>. I aim to learn at least three(3) new front-end frameworks. I have been working primarily with ReactJS. I can not say I am an expert. But I am proficient enough to earn a living. This year to start, I want the reach the same proficiency in Vue, Svelte, and NextJS. I have chosen these three because they are well documented and I found a great amount of community support. </p>\n<p>By the end of this year, I should have the following for each language;</p>\n<ul>\n<li>Personal project on github</li>\n<li>Blog post on how I made the project</li>\n<li>Cheatsheet I can share on this blog </li>\n</ul>\n<!--ad-->\n<h2 id=\"accessibility\">2. Focus on web accessibility </h2>\n<p>This year I have been interested with web accessibility. I thought I had been doing a great job of making my projects inclusive. I was dead wrong. This year I will work on projects that improve accessibility, champion accessibility in our company, and share my experiences with my peers.</p>\n<h2 id=\"blog\">3. Create one (1) blog post per week</h2>\n<p>I started blogging to force myself to share the things that interest me. Sharing is my incentive to explore new things. I have been really lax this past few years. I used personal stuff as an excuse when really its my lack of discipline is the issue. This past few months I have been blogging, I realized I learn more when creating an article than I do at studying intentionally. Blogging forces me to research and dig deep into the topic than when I am just solving a specific problem. This year I will try to publish at least one(1) post a week. </p>\n<h2 id=\"stayhealthy\">4. Stay healthy</h2>\n<p>From Matt‚Äôs list of programmer‚Äôs resolution, this one resonated with me a lot. For most who work as a developer keeping healthy is a hard battle. This year I want to do what I can to be healthy. Starting with the following habits;</p>\n<ul>\n<li>Less caffeine</li>\n<li>Go out for fresh air at least once a day</li>\n<li>Run twice a week</li>\n<li>Set aside some time to be offline once a day</li>\n</ul>\n<h2 id=\"workflow\">5. Streamline workflow</h2>\n<p>To accomplish the previous resolutions, I need to be more efficient. I have not explored automating some of my tasks and been working with the same toolset from three years ago. This year I will explore streamlining my workflow.  </p>\n<p>Tasks like; </p>\n<ul>\n<li>Choosing a new machine for development;</li>\n<li>Cleaning up my IDE plugins;</li>\n<li>Using design software</li>\n<li>Uncluttering my workstation</li>\n<li>Exploring new tools</li>\n</ul>\n<p>I will probably figure out more things to do later. I will keep you updated. </p>\n<p>So that‚Äôs it! I have listed my new year‚Äôs resolution as a programmer. What‚Äôs yours? </p>\n<p>Happy new year to all! üéâüéâüéâüéâüéâ</p>","fields":{"slug":"/2022/programmers_resolution_2023/"},"frontmatter":{"date":"December 31, 2022","title":"Programmer's New Year Resolution","featured_image":"/blog/boliviainteligente-unsplash.jpg","tags":["web-development","personal","frontend"]}}},{"node":{"excerpt":"I‚Äôve got some¬†leeway pushing¬†Khrunus off the ground. ¬†I‚Äôve always been successful using JavaScript‚Äôs timing functions but since Khrunus would primarily be built-in in AngularJS. I have to research a way to reuse my timing snippets into proper Angular code. ¬†To study, I built a simple angular app:","html":"<p>I‚Äôve got some¬†leeway pushing¬†<a title=\"Khrunus\" href=\"https://github.com/chrisbautista/Khrunus\" target=\"_blank\">Khrunus</a> off the ground. ¬†I‚Äôve always been successful using JavaScript‚Äôs timing functions but since Khrunus would primarily be built-in in AngularJS. I have to research a way to reuse my timing snippets into proper Angular code. ¬†To study, I built a simple angular app:<!--more--> </p>\n<h2>Problem</h2>\n<p>How to use AngularJS to make a time-related app, in this case, a timer for logging elapsed time?</p>\n<h2>What I need</h2>\n<p>Before I started this little venture, I need to detail the parameters of the experiment.</p>\n<p>Firstly, ¬†I need to layout my application into two sections. The top section will show a digital clock face and a button to toggle(start or stop) the clock. The bottom section will be a table showing start and end times, as well as the total duration. To know that the application is successful, start and end times should be logged. Using those values I can compute for the duration.</p>\n<p>We have two modes; an idle state,‚Äùstopped‚Äù and an active mode,‚Äùstarted‚Äù. We need¬†to consider that when coding the helper functions.</p>\n<h2>Solution</h2>\n<p>Firstly, we start with a basic AngularJS template. Please note I am assuming you have at least some experience working with HTML, Javascript, and AngularJS.</p>\n<p>I need two sections so I make two main DIVs.</p>\n<p>Next, in DIV 1, ¬†we add another div to serve as the container for the timer digits and a button.</p>\n<p>Next in DIV #2, we format a table with a header and three columns; ‚ÄúStart‚Äù, ‚ÄúEnd‚Äù and ‚ÄúDuration(secs)‚Äù correspondingly.</p>\n<p>What we have now is not very pretty, we‚Äôre going to fix that in a bit. Create a CSS file, call it ‚Äúapp.css‚Äù. Let‚Äôs style everything as follows,</p>\n<p>Looking good! üôÇ ¬†Now to add the functionality we need. Let‚Äôs start with some¬†data binding and a basic controller.</p>\n<h4>HTML</h4>\n<h3>Javascript</h3>\n<p>Awesome! For the button, we‚Äôre going to use that as a trigger to toggle between modes as well as an indicator to show the user what‚Äôs happening.</p>\n<p>Now, we can switch between modes, using the button data {{mode}} as a toggle flag. Now to the meat of the application, as a reference I‚Äôm going to use this basic clock code I use when I need digital clock displays.</p>\n<p>The hero of this application is AngularJS‚Äôs <a title=\"$timeout service\" href=\"https://docs.angularjs.org/api/ng/service/$timeout\" target=\"_blank\">$timeout service</a>. The $timeout service gives the user a wrapper for window.setTimeOut. So it still acts like setTimeOut but with the code organization and excellent exception handling that AngularJS provides. Our code should follow this format</p>\n<p>We build¬†the clock functionality via a $timeout statement, but first let‚Äôs refactor¬†our controller and add two functions to handle the Start and Stop modes.</p>\n<p>Now for the $timeout service,</p>\n<p>You can see that we used the timeout service to recursively call the <strong>StartTimer</strong> function. When you call <code class=\"language-text\">$timeout</code>, just as window.setTimeOut, you create a timing object that we then save to our variable ‚ÄòtmPromise‚Äô. We‚Äôll get into more of that later just take a note of it. Since we‚Äôre really making a stopwatch and not a clock that tells the current time, let‚Äôs recode. We need the current time so we use <code class=\"language-text\">date.getTime()</code>. Adding two more variables timeStart and timeEnd. When we button is clicked, we save the time to <strong>timerStart</strong>. Every time the timeout completes and we call StartTimer, the value of <strong>$scope.timeEnd</strong> changes. We then subtract <strong>$scope.timeStart</strong> to get the current elapsed time in milliseconds. We add some normalization code and we end up with this,</p>\n<p>Now for the stopTimer function, issuing the cancel method will stop the $timeout service. Remember the variable we made earlier, ‚ÄòtmPromise‚Äô. We will use that as the parameter for our cancel call illustrated below. We then collect the start and end times and push that into the history array.</p>\n<h3>Conclusion</h3>\n<p>Yay, we just made an AngularJS timer widget. Adding a service to insert a line in our table we end up with this.</p>\n<p>This is a very simple implementation. One that did not need a unit test but if we wanted to, we can use a $timeout.flush() method. More details from the reference links below.</p>\n<p>See the app in action <a title=\"here\" href=\"http://chrisbautista.github.io/experiments/cbTimerDirective/public_html/\" target=\"_blank\"><strong>here</strong></a></p>\n<blockquote>\n<p>** UPDATE: Code sample here <a title=\"here\" href=\"http://chrisbautista.github.io/experiments/cbTimerDirective/public_html/\" target=\"_blank\"><strong>here</strong></a></p>\n</blockquote>\n<p>Download all the source <a title=\"angular js timer experiment zip file\" href=\"http://chrisbautista.github.io/experiments/cbTimer/angularjs_timer_experiment.zip\" target=\"_blank\"><strong>here</strong></a>.</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://docs.angularjs.org/api/ng/service/$timeout\">https://docs.angularjs.org/api/ng/service/$timeout</a></li>\n<li><a href=\"https://docs.angularjs.org/api/ng/filter/date\">https://docs.angularjs.org/api/ng/filter/date</a></li>\n</ul>","fields":{"slug":"/2014/how-to-make-a-timer-stopwatch-using-angularjs/"},"frontmatter":{"date":"September 28, 2014","title":"How To Make A Timer/Stopwatch Using AngularJS","featured_image":"/assets/2014/09/angular-featured.png","tags":["frontend","angularjs","ui","javascript"]}}},{"node":{"excerpt":"Google announced recently in its official blog, that it has acquired reCAPTCHA. CAPTCHA is a web technology made out of necessity. It primarily is used to prevent BOTS (or automated apps designed to do malicious tasks) by adding an extra step to site pages that require human interaction.","html":"<p>Google announced recently in its official blog, that it has acquired reCAPTCHA. <a href=\"http://en.wikipedia.org/wiki/CAPTCHA\" target=\"_blank\">CAPTCHA</a> is a web technology made out of necessity. It primarily is used to prevent BOTS (or automated apps designed to do malicious tasks) by adding an extra step to site pages that require human interaction. <!--more-->Yes, they‚Äôre the annoying barely readable text images when you register/login for a site.</p>\n<div style=\"clear: both; text-align: center;\">\n  <a href=\"http://4.bp.blogspot.com/_BBS5bkzuLXM/SrSXzUCQrPI/AAAAAAAACgk/abV4JRYilQE/s1600-h/recaptcha-1231dasdqd.gif\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://4.bp.blogspot.com/_BBS5bkzuLXM/SrSXzUCQrPI/AAAAAAAACgk/abV4JRYilQE/s320/recaptcha-1231dasdqd.gif\"></a>\n</div>\n<p>Anyway, this move by Google is more than just for improving it‚Äôs CAPTCHA capabilities. As they explain, reCAPTCHA technology will improve Google projects that require reading text in images. The best to benefit from this are¬†<span style=\"font-family: Arial; font-size: 13px; white-space: pre;\">Google‚Äôs <span style=\"font-family: 'Times New Roman'; font-size: medium; white-space: normal;\">¬†<a href=\"http://books.google.com/\" target=\"_blank\">Books</a> project and the recent <a href=\"http://fastflip.googlelabs.com/\" target=\"_blank\">Fast Flip </a> zine search. For more info see the <a href=\"http://googleblog.blogspot.com/2009/09/teaching-computers-to-read-google.html\" target=\"_blank\">official announcement.</a></span></span></p>","fields":{"slug":"/2009/google-got-recaptcha/"},"frontmatter":{"date":"September 19, 2009","title":"Google got reCAPTCHA","featured_image":null,"tags":["google","security","frontend"]}}}]}},"pageContext":{"tag":"frontend"}},"staticQueryHashes":["2139210123","63159454"]}