{"componentChunkName":"component---src-templates-blog-tag-list-js","path":"/tags/frontend/","result":{"data":{"site":{"siteMetadata":{"title":"CodeSpud"}},"allMarkdownRemark":{"totalCount":6,"edges":[{"node":{"excerpt":"Improving accessibility is an exercise in empathy. We put ourselves in other people’s shoes and imagine how we can do a specific task. Tasks like going up a flight of stairs, knowing when to cross a street, or how to consume a website.","html":"<p>Improving accessibility is an exercise in empathy. We put ourselves in other people’s shoes and imagine how we can do a specific task. Tasks like going up a flight of stairs, knowing when to cross a street, or how to consume a website. <!--more--> Knowing the difficulties people encounter when using your website/application, can aid us in designing better experiences for our users.</p>\n<p>One of the areas UX designers and developers alike fail to give attention to is keyboard navigation. Keyboard navigation is important because you may have users that depend on the keyboard or screenreaders to read your website. If your site is hard to navigate for these users, they might just quit your site all together and move on. </p>\n<p>Here are my top three tips for better keyboard and screen reader navigation</p>\n<h2>1. Use headings and landmarks</h2>\n<p>I mentioned before in <a href=\"/2022/five_steps_to_improve_accessibility\">five steps to improve accessibility</a>. One of the simplest thing you can do to improve accessibility is to use semantic tags like headings and landmarks to mark up your HTML. Headings and landmark tags not only help tell the screen reader about the information hierarchy on your page but also helps in navigation. This technique benefits screenreader users. </p>\n<p><a href=\"https://www.w3.org/WAI/tutorials/page-structure/headings/\">Headings</a> provide a straightforward way of distinguishing information hierarchy on a page. The first heading (<code class=\"language-text\">&lt;h1 /></code>) is commonly the title of the page which tells the reader what the site or page is about. After that, you organize the supporting information into sub-topics titled <code class=\"language-text\">&lt;h2/></code> and so on.  </p>\n<p><strong>Headings</strong> </p>\n<ul>\n<li>h1</li>\n<li>h2</li>\n<li>h3</li>\n<li>h4</li>\n<li>h5</li>\n<li>h6</li>\n</ul>\n<p><a href=\"https://www.w3.org/WAI/tutorials/page-structure/regions/\">Page regions or landmarks</a> divide the content into meaningful areas. For example, the <code class=\"language-text\">&lt;header /></code> will contain navigation links and the name of a website, and the <code class=\"language-text\">&lt;main /></code> tag will wrap the “main” content of the page.</p>\n<p><strong>Region tags</strong> </p>\n<ul>\n<li>header</li>\n<li>footer </li>\n<li>aside </li>\n<li>nav</li>\n<li>main</li>\n<li>section</li>\n</ul>\n<p>We can also use <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">ARIA roles</a></p>\n<p><strong>Landmark roles</strong></p>\n<ul>\n<li>banner</li>\n<li>complementary</li>\n<li>main</li>\n<li>navigation</li>\n<li>region</li>\n<li>and more.</li>\n</ul>\n<p>Screen readers are capable of traversing a page through headings and landmarks. Using certain shortcuts, assistive technologies can jump from one heading to another. Some screenreaders can even list all the headings and landmarks on a page and then give the user a choice to jump to a specific heading or landmark. </p>\n<h2>2. Add skip links</h2>\n<p>The worst part about navigating a page with the keyboard (e.g. <kbd>Tab</kbd>) is having to go through a lot of page real estate. For example, you would need to go through the main navigation, aside elements, tag lists, and call-to-action buttons before you can get to the main content. It can be exhausting for your users to do that every time. My <kbd>Tab</kbd> key finger (if that is a thing) already hurts just thinking about it. It wastes your users’ time when they can already be reading your awesome content. To remedy this add skip links to your markup. Skip links can be part of your design or hidden until needed. These elements allow the user to jump to a specific topic or area on your page. Saving them so much pain. </p>\n<!--ad-->\n<p>Here’s a simple “skip to main content” link you can incorporate to your site.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">.skip-to-main-content </span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// hide by default but readable to screenreaders </span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> -999px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transitio</span><span class=\"token punctuation\">:</span> top 0.35s<span class=\"token punctuation\">;</span>\n\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:focus</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// show in to view when focused </span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#main-content<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>skip-to-main-content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Skip to main content<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n...\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>article</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main-content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>article</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The key here is to make the skip link the very top element in the markup so that it gets focused first. The link scrolls the page to the area marked by <code class=\"language-text\">id=main-content</code>. </p>\n<h2>3. Minimize key presses</h2>\n<p>If you have a user interface/design that requires a lot of traversals and you can’t use skip links, modify the key handling used for navigation. </p>\n<h3>3.1 Assign other keys for navigation</h3>\n<div class=\"img-demo\">\n  <img src=\"/blog/just-tabs.png\"/>\n</div>\n<p>Tables are a common pattern to present information for a related group of data. Take, for example, the wireframe above, we have columns for data and a column for action buttons. The easiest we can do is just mark up the HTML so that the focusable elements like buttons can be “tabbed” into. In the previous image, we marked the element the user needs to interact with. If you use the <kbd>Tab</kbd> key, it will take you 8 key presses before a user reaches the <code class=\"language-text\">Delete</code> button. I call <strong>8</strong> key presses the traversal index (<code class=\"language-text\">T</code> index for short) to activate the <code class=\"language-text\">Delete</code> button. Before we go further, note I just coined the term, traversal index. Not sure if there’s a proper term for that. Anyhow, it is still OK now for the sample table with three controls(checkbox, delete and save button) but when you’ve got more focusable elements or when the number of table rows increases, the traversal index will grow quite large. We don’t want that. </p>\n<p>We want to reduce the <code class=\"language-text\">T</code> index to make your keyboard(/screen reader) users happy.  Now check out the sample below, </p>\n<div class=\"img-demo\">\n  <img src=\"/blog/with-arrow-keys.png\"/>\n</div>\n<p>In this table, we’ve added event handlers to use <kbd>Arrow Up</kbd> and <kbd>Arrow Down</kbd> keys to navigate between table rows. Once the specific row is focused(indicated by grey background color), the user can then use the <kbd>Tab</kbd> key to navigate between the elements within the row. With this simple addition, we’ve reduced the <code class=\"language-text\">T</code> index to 4. We’ve spared the user from carpal tunnel syndrome or other typing-related pain. </p>\n<p>It is important to note that since this is not a common navigation convention for tables, you need to notify the user about the extended navigation before or when the table is focused. </p>\n<blockquote>\n<p>For example,</p>\n<p><strong>Instruction:</strong> Use arrow keys to navigate rows and <kbd>Tab</kbd>(/<kbd>Shift</kbd>+<kbd>Tab</kbd>) key to move between items in a row. </p>\n</blockquote>\n<!--ad-->\n<h3>3.2 Limit navigation between same level areas</h3>\n<p>Here’s another,</p>\n<div class=\"img-demo\">\n  <img src=\"/blog/page-sections-tabs-only.png\"/>\n</div>\n<p>The wireframe shows three sections (header, table, and links). The header has only one link and the table has four(4) rows with one(1) focusable element per row. To navigate from the header to the “links” section, we will need to press the <kbd>Tab</kbd> key six(6) times. The problematic step here is we spend a lot of time focusing on the table rows before arriving at the Links section.</p>\n<p>We can improve the keyboard navigation by keeping the “tab” stops on the three sections initially. One way of doing this is to prevent your table contents from getting focused until needed. For instance, adding <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\">inert</a> attribute to the <code class=\"language-text\">&lt;tbody /></code> wrapper will prevent the table contents from getting focused. This change reduces the <code class=\"language-text\">T</code> index to <code class=\"language-text\">3</code>. </p>\n<p>The second part of this technique is to assign a special key( or keys) to enable navigation inside the table. For example, same with the previous table navigation handler, when the table is focused pressing <kbd>Arrow down</kbd> or <kbd>Arrow up</kbd> keys will focus one of the rows. Then you can navigate vertically or horizontally inside the table after. When the user is done, we can continue through the table rows or press <kbd>Escape</kbd> key to exit the table. </p>\n<div class=\"img-demo\">\n  <img src=\"/blog/page-sections-plan-focus.png\"/>\n</div>\n<p>You might think that this is complex. It might be - but it really depends on your implementation. It will take quite a bit of coding but the other side of the equation is a more intuitive way of navigating your page.</p>\n<p>Another way to improve the <code class=\"language-text\">T</code> index for this wireframe is to assign a key combination(/s) to each section. For example, assign <kbd>/</kbd> + <kbd>l</kbd> to jump straight to the links section. This will keep the default navigation behavior but still provide the user a means to avoid extraneous key presses. </p>\n<p>The key for both techniques is to inform the user of the special keyboard navigation. </p>\n<h2>Wrapping up</h2>\n<p>Making sure your website is keyboard accessible is an important task. We can improve keyboard accessibility a step further by making sure to;</p>\n<ul>\n<li>use headings and landmarks; </li>\n<li>add skip links and; </li>\n<li>reduce the number of keypresses when navigating.</li>\n</ul>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://www.w3.org/WAI/tutorials/page-structure/\">WCAG Tutorials</a></li>\n<li><a href=\"https://webaim.org/techniques/skipnav/\">WebAIM: Skip navigation links</a></li>\n<li><a href=\"https://a11y-guidelines.orange.com/en/web/toolbox/methods-and-test-tools/navigating-with-a-screen-reader/\">Navigating with a screenreader</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">MDN: WAI-ARIA roles</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element#content_sectioning\">MDN: Elements - Content sectioning</a></li>\n</ul>","fields":{"slug":"/2023/three-things-you-can-do-for-keyboard-screanreader-navigation/"},"frontmatter":{"date":"January 20, 2023","title":"Top three things to do for better keyboard and screenreader navigation","featured_image":"/blog/christin-hume-unsplash.jpg","tags":["accessibility","UX","frontend"]}}},{"node":{"excerpt":"Part of my new year resolution for 2023 is to learn at least 3 new front-end frameworks. One of these frameworks I intend to dive deeper into is Vue.js.  Every time I want to learn something new I try to plan first. A very quick to-do list related to the subject. I know there’s a lot of great guides out there about Vue.js.","html":"<p>Part of my <a href=\"/2022/programmers_resolution_2023/\">new year resolution for 2023</a> is to learn at least 3 new front-end frameworks. One of these frameworks I intend to dive deeper into is Vue.js. </p>\n<p>Every time I want to learn something new I try to plan first. A very quick to-do list related to the subject. I know there’s a lot of great guides out there about Vue.js. <!--more--> But I still like making my little todo list. It keeps me focused. </p>\n<p>To start, I went to <a href=\"https://vuejs.org/guide/introduction.html\">Vue.js’ documentation page</a>. I scanned all the topics provided. I looked for the least amount of concepts to get a sense of Vue.js - enough to start a simple application. Then, I grew my knowledge gradually. I’ve outlined these initial concepts in this post. </p>\n<p>If you’re like me, one that is practically new to Vue.js, or if you worked on Vue.js before but interested in a refresher, or are just interested in reading on the topic, continue to read on.</p>\n<h2>Vue.js learning plan</h2>\n<p>To be honest I got lost quite early because of topics I am not familiar with. Topics like the difference between Options API and Composition API. If you don’t know what that is either, then you were me at the beginning. <a href=\"https://vuejs.org/guide/introduction.html#api-styles\">Vue.js documentation on API Preference</a> should explain the difference between API styles. </p>\n<p>To simplify, I restricted my study to just using the <a href=\"https://vuejs.org/guide/introduction.html#options-api\">Options API</a>. Feel free to try whichever API style you prefer. I found I readily applied the same concepts using Composition API once I understood it. So don’t worry about having to learn both in the beginning. </p>\n<ol>\n<li><a href=\"/2023/newbies_guide_to_learning_vuejs/#create\">How to create a Vue application</a></li>\n<li><a href=\"/2023/newbies_guide_to_learning_vuejs/#templates\">Working with Templates</a> </li>\n<li><a href=\"/2023/newbies_guide_to_learning_vuejs/#directives\">Vue.js Directives</a> </li>\n<li><a href=\"/2023/newbies_guide_to_learning_vuejs/#data\">Data handling and methods</a></li>\n<li><a href=\"/2023/newbies_guide_to_learning_vuejs/#computed\">Computed properties</a></li>\n<li><a href=\"/2023/newbies_guide_to_learning_vuejs/#event-handling\">Handling events</a></li>\n</ol>\n<!--ad-->\n<h3 id=\"create\">1. How to create a Vue Application</h3>\n<p>To start off, the first thing any developer wants to learn is how to make a simple application. Like most front-end frameworks nowadays, there are two ways to start creating an application. The first option is hosting an HTML page with the library CDN loaded and one is to build an application using build setup. Choose whichever way you want to start with. What’s important is you get started early to practice.</p>\n<p><strong>HTML page loading Vue CDN</strong></p>\n<ul>\n<li><a href=\"https://vuejs.org/guide/quick-start.html#using-vue-from-cdn\">Vuejs.org: Using a CDN</a></li>\n<li><a href=\"https://vueschool.io/lessons/getting-started-with-vuejs\">Vue School: Getting started with VueJS</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/vue@3/dist/vue.global.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>Build setup with NodeJS</strong></p>\n<ul>\n<li><a href=\"https://vuejs.org/guide/quick-start.html#creating-a-vue-application\">Vuejs.org: Using NodeJS Setup</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started#installation\">MDN: Vue.js - Installation</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token function\">npm</span> init vue@latest</code></pre></div>\n<h3 id=\"templates\">2. Working with Templates</h3>\n<p>Vue.js has templates to define the structure of a simple application. Templates are written in HTML(or HTML-like syntax) and can include special library-specific directives and expressions to render data. </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Message: {{ msg }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>{{ rawHtml }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li><a href=\"https://vuejs.org/guide/essentials/template-syntax.html\">Vuejs.org: Template Syntax</a></li>\n<li><a href=\"https://vueschool.io/lessons/vuejs-template-syntax-and-expressions\">Vue School: Vue.js Template Syntax and Expressions</a></li>\n</ul>\n<h3 id=\"directives\">3. Vue.js Directives</h3>\n<p>While working with templates, you will come across directives. Directives appear as element attributes specific to Vue.js. They are prefixed with <code class=\"language-text\">v-</code> syntax like the example below. Directives extend templates with logic and additional functionality. The example below the directive <code class=\"language-text\">v-for</code> loops thru the items and render the text for each item inside the div.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item in items<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  {{ item.text }}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li><a href=\"https://vuejs.org/api/built-in-directives.html\">VueJS.org: Directives</a></li>\n<li><a href=\"https://www.codecademy.com/courses/learn-vue-js/lessons/vue-introduction/exercises/directives\">CodeAcademy: Directives 💵</a></li>\n<li><a href=\"https://vuejsdevelopers.com/lessons/understanding-directives-1/1/\">Vuejsdevelopers.com: Understanding Directives</a></li>\n</ul>\n<h3 id=\"data\">4. Data handling and methods</h3>\n<p>Vue.js components have a data object that holds the component’s state, and methods that can be used to manipulate the state. In my opinion, the ability to manage and manipulate data is what makes front-end frameworks interesting. It’s the difference between a simple HTML page and a dynamic site. </p>\n<ul>\n<li><a href=\"https://vuejs.org/api/options-state.html#data\">VueJS.org: Data</a></li>\n<li><a href=\"https://vueschool.io/lessons/vue-methods\">Vue School: Fundamentals - Vue methods</a></li>\n</ul>\n<h3>State management</h3>\n<p>State management is an advance topic related to data and how it drives your application. You can use the data object and other techniques to manage the state of the application. For simple cases that is enough. For more complex applications we should be using state management libraries. These libraries are Vue.js’ answer to the flux pattern libraries ubiquitous to React.js projects.</p>\n<ul>\n<li><a href=\"https://pinia.vuejs.org/introduction.html\">Pinia</a></li>\n<li><a href=\"https://vuex.vuejs.org/\">Vuex</a></li>\n</ul>\n<p>Some articles I’ve read - recommends using <strong>Pinia</strong> over <strong>Vuex</strong>. </p>\n<h3 id=\"computed\">5. Computed Properties</h3>\n<p>Computed properties are calculated based on other data or properties on a page. The contrived example below illustrates what computed properties are used for. The values are automatically “calculated” from the source property, <code class=\"language-text\">store.fruits</code>. When the source property changes the computed value also changes without additional code. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">store</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">fruits</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">'mango'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">//...</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">hasMangoToSell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span>fruits<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mango'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">'Yes'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'No'</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">></span></span>Has mango to sell?<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span>{{ hasMangoToSell }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span>\n  ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The <code class=\"language-text\">hasMangoToSell</code> computed property above is “computed” from the data object property <code class=\"language-text\">store</code>. </p>\n<!--ad-->\n<ul>\n<li><a href=\"https://vuejs.org/guide/essentials/computed.html\">VueJs.org: Computed properties</a></li>\n<li><a href=\"https://vueschool.io/lessons/vuejs-computed-properties\">Vue School: Computed properties</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_computed_properties\">MDN: Using Vue computed properties</a></li>\n</ul>\n<h3 id=\"event-handling\">6. Handling events</h3>\n<p>Event handling is the essence of front-end interactivity. Vue.js allows you to handle events, such as button clicks, form inputs, and more. These events could either be inline or method handlers. </p>\n<p>Inline handlers executed code is defined inside a <code class=\"language-text\">@&lt;event name here>=\"\"</code> attribute. Like so: </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>counter++<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Increment<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>There are {{ counter }} sheep jumping over the fence<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Method handlers on the other hand are defined from the application object itself under the <code class=\"language-text\">methods</code> prop. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>increment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Increment<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>There are {{ counter }} sheep jumping over the fence<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li><a href=\"https://vuejs.org/guide/essentials/event-handling.html\">VueJS.org: Event Handling</a></li>\n<li><a href=\"https://vuejs.org/guide/essentials/forms.html\">VueJS.org: Form Input Bindings</a></li>\n<li><a href=\"https://vueschool.io/lessons/vuejs-user-events\">Vue School: User events</a></li>\n</ul>\n<h2>Wrapping up</h2>\n<p>There are other concepts a Vue.js developer needs to learn of course. I think you will encounter those topics while running through the topics in this list. Advanced topics like components, watchers, and hooks. Feel free to add that to your own learning plan. I am thinking to cover those topics when I start building more complex applications.</p>\n<p>After the list above I plan to explore more advanced topics and start building a project. It is important to practice by building small projects, experimenting with different features, and following tutorials. I think that is still the best way to learn. </p>\n<h2>Bonus</h2>\n<p>Aside from the excellent documentation on Vue.js’ website. I found their <a href=\"https://vuejs.org/tutorial/#step-1\">tutorial</a> page really helpful too. If you like learning ala-FreecodeCamp-style, you can appreciate a similar experience. Same with FreecodeCamp, you are presented with topics on the language accompanied with code problems to solve. I recommend checking it out.</p>\n<h2>My progress so far</h2>\n<p>Below is my where I am in terms of my efforts learning Vue.js.  </p>\n<ol>\n<li><span>Learn Vue.js essential concepts</span> (partial)</li>\n<li>Debugging a VueJS application</li>\n<li>Create a blog application using Vue.js</li>\n<li>Learn Vue-Router</li>\n<li>Build for Production</li>\n</ol>","fields":{"slug":"/2023/newbies_guide_to_learning_vuejs/"},"frontmatter":{"date":"January 14, 2023","title":"Learning Vue: First steps","featured_image":"/blog/viewfinder-unsplash.jpg","tags":["vue","frontend","web-development"]}}},{"node":{"excerpt":"A few issues I found recently for clients were related to accessibility. A few perfectly working user interfaces were not keyboard accessible. Not because they are custom controls nor because the controls were not tabable.","html":"<p>A few issues I found recently for clients were related to accessibility. A few perfectly working user interfaces were not keyboard accessible. Not because they are custom controls nor because the controls were not tabable. <!--more--> But, because the keyboard experience did not match the mouse-only interactions. These user interfaces are confusing, to say the least. </p>\n<p>I solved these issues by using the <code class=\"language-text\">:focus-within</code> psuedo-selector.</p>\n<p>I listed a few of them and the solutions.</p>\n<h2>Table row with hidden buttons</h2>\n<p>Here the developer added an effect that shows the buttons when hovered. The markup is accessible to screen readers but does not look correct for sighted persons that use the keyboard. Accessibility is not just for screenreaders. <a href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-focus-order.html\">Sighted people need to make sense</a> of the page too. </p>\n<style>\n.demo table {\n  min-width: 500px;\n  border-collapse: collapse;\n}\n\n.demo td,\n.demo th {\n  border: none;\n}\n\n.demo td,\n.demo th:not(:first-child) {\n  padding: 1rem 0.8rem;\n  margin: 0;\n  text-align: left;\n}\n\nthead tr {\n  border-bottom: 3px solid #ddd;\n}\n\ntbody {\n  /**\n  * Show buttons on hover and when an element is focused inside the row\n  */\n    border-bottom: 2px solid #ddd;\n}\ntbody tr button {\n  opacity: 0;\n}\ntbody tr:hover {\n  background-color: #ffd57e;\n}\ntbody tr:hover button {\n  opacity: 100%;\n}\n\nbutton {\n  border: none;\n  padding: 0;\n  margin: 0;\n  background: transparent;\n  -webkit-appearance: none;\n  box-shadow: none;\n}\n\n</style>\n<div class=\"demo\">\n<table tabindex=\"0\">\n  <thead>\n    <tr>\n      <th>\n        <div class=\"sr-only\">Checkbox</div>\n      </th>\n      <th>Name</th>\n      <th>Job description</th>\n      <th>\n        <div class=\"sr-only\">Controls</div>\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><input type=\"checkbox\" value=\"1\" name=\"user\"></td>\n      <td>John Doe</td>\n      <td>rocket scientist</td>\n      <td>\n        <button class=\"delete\" aria-label=\"delete\">❌</button>\n        <button class=\"save\"  aria-label=\"save\">💾</button>\n      </td>\n    </tr>\n    <tr>\n      <td><input type=\"checkbox\" value=\"1\" name=\"user\"></td>\n      <td>Adam smith</td>\n      <td>economist</td>\n      <td>\n        <button class=\"delete\" aria-label=\"delete\">❌</button>\n        <button class=\"save\" aria-label=\"save\">💾</button>\n      </td>\n    </tr>\n    <tr>\n      <td><input type=\"checkbox\" value=\"1\" name=\"user\"></td>\n      <td>Jose <rizal></rizal>\n      </td>\n      <td>novelist</td>\n      <td>\n        <button class=\"delete\" aria-label=\"delete\">❌</button>\n        <button class=\"save\" aria-label=\"save\">💾</button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">tabindex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>thead</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Checkbox<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Job description<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Controls<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>thead</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tbody</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>John Doe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>rocket scientist<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>delete<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>delete<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>❌<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>save<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>save<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>💾<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n      ...\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tbody</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Using the mouse, the table above works perfectly well. There is color highlighting and the buttons become visible when the mouse is over a table row. </p>\n<p>If you navigate the table using the keyboard, the experience is not what you will expect. Firstly, you don’t see the highlight color when focused on a row. The worst of it is you will be able to go through all the focusable elements using the keyboard - including the invisible buttons. This is confusing for sighted people using the keyboard. </p>\n<!--ad-->\n<p>Let’s check the style code below. The buttons are invisible by default(<code class=\"language-text\">opacity: 0</code>). When the mouse is over the row (<code class=\"language-text\">:hover</code>), it gets a background color and buttons become visible(<code class=\"language-text\">opacity: 100%</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// SCSS</span>\n\n<span class=\"token selector\">tbody tr </span><span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n  * Show buttons on hover\n  */</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #ffd57e<span class=\"token punctuation\">;</span>\n    <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Solution</h3>\n<p>We can use javascript and add an event handler on the focusable elements that gets triggered whenever any element on the row is focused. With that we can set a class (<code class=\"language-text\">.has-focused-element</code>) that applies the same style above.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> els <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tr input[type=checkbox], tr button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nels<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focus'</span><span class=\"token punctuation\">,</span> onFocus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// etc...</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// SCSS</span>\n\n<span class=\"token selector\">tbody tr </span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token comment\">/**\n  * Show buttons on hover\n  */</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover,\n  <span class=\"token parent important\">&amp;</span>.has-focused-element </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #ffd57e<span class=\"token punctuation\">;</span>\n    <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The changes above will work but uneccessary. We should try to solve any style problems inside the CSS first before reaching for Javascript.</p>\n<p>Another solution is to use <code class=\"language-text\">:focus-within</code> where the <code class=\"language-text\">:hover</code> psuedo-selector is defined. </p>\n<blockquote>\n<p>The :focus-within CSS pseudo-class matches an element if the element or any of its descendants are focused. In other words, it represents an element that is itself matched by the :focus pseudo-class or has a descendant that is matched by :focus. (This includes descendants in shadow trees.) - <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-within\">MDN</a></p>\n</blockquote>\n<p>“Focus-within” psuedo selector can match elements that has elements that gets focused. In this case, we have the <code class=\"language-text\">checkbox</code> and <code class=\"language-text\">button</code> elements. When these elements gets focus, we can apply the same style as if we hovered the pointer on the table row. This will work without adding a line of javascript. </p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// SCSS</span>\n\n<span class=\"token selector\">tbody tr </span><span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n  * Show buttons on hover and when an element is focused inside the row\n  */</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover,\n  <span class=\"token parent important\">&amp;</span>:focus-within </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #ffd57e<span class=\"token punctuation\">;</span>\n    <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Solution in action</h3>\n<p>Here’s the same table using <code class=\"language-text\">:focus-within</code>,</p>\n<style>\n\n.fix tbody tr:hover, .fix tbody tr:focus-within {\n  background-color: #ffd57e;\n}\n.fix tbody tr:hover button, .fix tbody tr:focus-within button {\n  opacity: 100%;\n}\n\n</style>\n<div class=\"demo fix\">\n<table tabindex=\"0\">\n        <thead>\n          <tr>\n            <th>\n              <div class=\"sr-only\">Checkbox</div>\n            </th>\n            <th>Name</th>\n            <th>Job description</th>\n            <th>\n              <div class=\"sr-only\">Controls</div>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td><input type=\"checkbox\" value=\"1\" name=\"user\"></td>\n            <td>John Doe</td>\n            <td>rocket scientist</td>\n            <td>\n              <button class=\"delete\">❌</button>\n              <button class=\"save\">💾</button>\n            </td>\n          </tr>\n          <tr>\n            <td><input type=\"checkbox\" value=\"1\" name=\"user\"></td>\n            <td>Adam smith</td>\n            <td>economist</td>\n            <td>\n              <button class=\"delete\">❌</button>\n              <button class=\"save\">💾</button>\n            </td>\n          </tr>\n          <tr>\n            <td><input type=\"checkbox\" value=\"1\" name=\"user\"></td>\n            <td>Jose <rizal></rizal>\n            </td>\n            <td>novelist</td>\n            <td>\n              <button class=\"delete\">❌</button>\n              <button class=\"save\">💾</button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n</div>\n<p>A user can navigate through the focusable elements in the row and see the “hover” effect. </p>\n<!--ad-->\n<h2>Card with like(♥) button</h2>\n<p>Here’s another user interface with a hover effect but no keyboard focus effect. Hovering over any part of the card applies a heart icon on top of the image indicating to the user that they can make the image their favorite. This card UI is part of an image gallery.</p>\n<style>\n\n.card {\n  min-width: 250px;\n  max-width: 250px;\n  overflow: hidden;\n  position: relative;\n  box-shadow: 1px 1px 4px 0 rgba(0 0 0 / 0.2), 2px 2px 8px 1px rgba(0 0 0 / 0.2);\n  padding: 15px 15px 10px 15px;\n  border-radius: 6px;\n}\n.card img {\n  width: 100%;\n  transition: opacity 0.35s ease-in-out;\n  margin: 0;\n}\n.card span {\n  font-size: 9rem;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  color: #ddd;\n  transform: translate(-50%, -50%);\n  text-decoration: none;\n  opacity: 0;\n}\n.card:hover img, .fix .card:focus-within img {\n  opacity: 70%;\n  background-color: #000;\n}\n.card:hover span, .fix .card:focus-within span {\n  opacity: 100%;\n}\n.card:hover button, .fix .card:focus-within button {\n  opacity: 0;\n}\n.fix .card:focus-within {\n  outline: 4px dashed #555;\n  outline-offset: -5px;\n}\n.card button {\n  position: absolute;\n  bottom: 20px;\n  right: 20px;\n  color: #ddd;\n  font-size: 1.5rem;\n  padding: 2px 4px;\n}\n\n</style>\n<div class='demo' tabindex=\"0\">\n<div class=\"card\">\n    <img src=\"https://images.unsplash.com/photo-1671026423293-7adf6a6abd13?crop=entropy&amp;cs=tinysrgb&amp;fm=jpg&amp;ixid=MnwzMjM4NDZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NzMwNTEwNzE&amp;ixlib=rb-4.0.3&amp;q=80\" alt=\"\">\n    <span>♥</span>\n    <button class=\"like\">♥</button>\n  </div>\n</div>\n<p>Works when using the mouse but when navigating using the keyboard - again the user experience fails. It lacks a good keyboard experience. When you tab through the card, the button gets focused - which is fine - but it’s not the effect we wanted.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>card<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://images.unsplash.com/photo-1671026423293-7adf6a6abd13?crop=entropy&amp;cs=tinysrgb&amp;fm=jpg&amp;ixid=MnwzMjM4NDZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NzMwNTEwNzE&amp;ixlib=rb-4.0.3&amp;q=80<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>♥<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button-group<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>like<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>♥<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// scss</span>\n\n<span class=\"token selector\">.card </span><span class=\"token punctuation\">{</span>\n  \n  <span class=\"token comment\">// ...</span>\n  \n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover </span><span class=\"token punctuation\">{</span>\n    <span class=\"token selector\">img </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 70%<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\">span </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I know some will ask why can we not just add <code class=\"language-text\">tabindex=0</code> on the card and add a <code class=\"language-text\">:focus</code> style. Yeah that could work. But, we would end up with two focus steps(one for the card and the heart (♥) button) instead of just the button. We don’t want that.</p>\n<h3>Solution</h3>\n<p>Again <code class=\"language-text\">:focus-within</code> to the rescue. We go back to the style code and look for <code class=\"language-text\">:hover</code> styling. </p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// scss</span>\n<span class=\"token comment\">/**\n  * Make heart cover image visible when button is focused\n  */</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover,\n  <span class=\"token parent important\">&amp;</span>:focus-within </span><span class=\"token punctuation\">{</span>\n    <span class=\"token selector\">img </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 70%<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\">span </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The changes above should apply the same experience for both mouse and keyboard users. </p>\n<p>As a rule, we also want to add an outline when the card is focused using the keyboard. Similar to what we get when we focus any interactive control with the keyboard.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// scss</span>\n<span class=\"token selector\">.card </span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  \n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:focus-within </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> 4px dashed #333<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">outline-offset</span><span class=\"token punctuation\">:</span> 2px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Solution in action</h3>\n<p>Use the <kbd>Tab</kbd> key to navigate through the card. When the button gets focused the card activates the hover effect we defined earlier. Now both hover and focus events show the same effect.</p>\n<div class='demo fix' tabindex=\"0\">\n<div class=\"card\">\n    <img src=\"https://images.unsplash.com/photo-1671026423293-7adf6a6abd13?crop=entropy&amp;cs=tinysrgb&amp;fm=jpg&amp;ixid=MnwzMjM4NDZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NzMwNTEwNzE&amp;ixlib=rb-4.0.3&amp;q=80\" alt=\"\">\n    <span>♥</span>\n    <button class=\"like\">♥</button>\n  </div>\n</div>\n<!--ad-->\n<h2>Apply effects when buttons are hovered</h2>\n<p>In this example we have an image with a color swatch control. When you hover over any of the colors, the corresponding color value is blended with the image. This works correctly with the mouse but with the keyboard. We want to be able to get the same effect on the image when any of the buttons gets focused using the keyboard.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>picker<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>picker-group<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>picker-item<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">--selected-color</span><span class=\"token punctuation\">:</span> #912424</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>red<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>picker-item<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">--selected-color</span><span class=\"token punctuation\">:</span> #3566b2</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>blue<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>picker-item<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">--selected-color</span><span class=\"token punctuation\">:</span> #226642</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>green<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// scss</span>\n<span class=\"token selector\">.picker </span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// ...</span>\n  \n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url</span><span class=\"token punctuation\">(</span><span class=\"token property\">https</span><span class=\"token punctuation\">:</span><span class=\"token comment\">//images.unsplash.com/photo-1552944150-6dd1180e5999?crop=entropy&amp;cs=tinysrgb&amp;fm=jpg&amp;ixid=MnwzMjM4NDZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NzMwNTkzNzg&amp;ixlib=rb-4.0.3&amp;q=80);</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--selected-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover </span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// blend image with color when button is hovered or focused</span>\n    <span class=\"token property\">background-blend-mode</span><span class=\"token punctuation\">:</span> hard-light<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For this one we have some scripting to setup the hover(mouseover) effect. We try set the CSS variable <code class=\"language-text\">--selected-color</code> as the picker background color. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> picker <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".picker\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> buttons <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".picker-item\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">onHighlight</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">;</span>\n  picker<span class=\"token punctuation\">.</span>style <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>cssText<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">onRemoveColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  picker<span class=\"token punctuation\">.</span>style <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbuttons<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">button</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseover\"</span><span class=\"token punctuation\">,</span> onHighlight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npicker<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseout\"</span><span class=\"token punctuation\">,</span> onRemoveColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<style>\n.picker {\n  position: relative;\n  display: flex;\n  width: 300px;\n  height: 300px;\n  overflow: hidden;\n  background-image: url(https://images.unsplash.com/photo-1552944150-6dd1180e5999?crop=entropy&cs=tinysrgb&fm=jpg&ixid=MnwzMjM4NDZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NzMwNTkzNzg&ixlib=rb-4.0.3&q=80);\n  background-size: cover;\n  background-position: 20%;\n  border-radius: 4px;\n  background-color: var(--selected-color);\n  transition: background-color 0.35s ease-in-out;\n  flex: 1;\n}\n.picker:hover, .picker:focus-within {\n  background-blend-mode: hard-light;\n}\n.picker-item {\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  border: 2px solid #ededed;\n  background-color: var(--selected-color);\n  cursor: pointer;\n}\n.picker-group {\n  position: absolute;\n  bottom: 8px;\n  left: 8px;\n}\n</style>\n<p>This is how it looks. My blog software does not run javascript so the UI below only shows a snapshot of one of the button focused. I will include a Codepen demo later in this page so you can interact with it. </p>\n<div class='demo'>\n  <div class=\"picker\" style=\"--selected-color: #912424; background-blend-mode: hard-light;\">\n    <div class=\"picker-group\" >\n      <button class=\"picker-item\" style=\"--selected-color: #912424; outline: 2px dashed #fff;\"><span class=\"sr-only\">red</span></button>\n      <button class=\"picker-item\" style=\"--selected-color: #3566b2\"><span class=\"sr-only\">blue</span></button>\n      <button class=\"picker-item\" style=\"--selected-color: #226642\"><span class=\"sr-only\">green</span></button>\n    </div>\n  </div>\n</div>\n<p>Again the issue here is that the interface does not work well with the keyboard for sighted people. It’s screen reader friendly but the experience is lacking when not using the mouse. </p>\n<p>This is a bit more complicated so we leverage <code class=\"language-text\">:focus-within</code> in conjunction with a <code class=\"language-text\">focus</code> event handler to set the color and blend style when using the keyboard. </p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// SCSS</span>\n\n<span class=\"token selector\">.picker </span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover,\n  <span class=\"token parent important\">&amp;</span>:focus-within </span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// blend image with color when button is hovered or focused</span>\n    <span class=\"token property\">background-blend-mode</span><span class=\"token punctuation\">:</span> hard-light<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ...</span>\n\nbuttons<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">button</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseover\"</span><span class=\"token punctuation\">,</span> onHighlight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"focus\"</span><span class=\"token punctuation\">,</span> onHighlight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// trigger highlight script when buttons are focused</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//...</span></code></pre></div>\n<p>Using the solution above, we get a better experience without a lot of extra code. See the solution in action in the Codepen below. </p>\n<h2>Full solution</h2>\n<p>Here are all three solutions in action. Check out the final code to understand the solutions in their entirety. </p>\n<p><a href=\"https://codepen.io/chrisbautista/pen/bGjBZzM\"><div><iframe \n        height='400'\n        title='chrisbautista embedded pen' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/bGjBZzM/?height=400&theme-id=dark&default-tab=result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<h2>Wrapping up</h2>\n<p>Sometimes as web developers, it is great to work on problems that improve the user experience for a variety of people. For all the tools in our disposal its really great to know that adding a single psuedo-selector like <code class=\"language-text\">:focus-within</code> could be so useful. Without it, we might have ended up with some complicated solutions or worst case have to start from scratch. </p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-within\">MDN: focus-within</a></li>\n<li><a href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-focus-order.html\">WCAG: Focus order</a></li>\n<li><a href=\"https://www.w3.org/TR/2012/NOTE-UNDERSTANDING-WCAG20-20120103/navigation-mechanisms-focus-visible.html\">WCAG: Focus visible</a></li>\n</ul>","fields":{"slug":"/2023/fix_accessibility_with_focus_within/"},"frontmatter":{"date":"January 08, 2023","title":"Fix accessibility using focus-within","featured_image":"/blog/devin-avery-focus-unsplash.jpg","tags":["accessibility","css","frontend"]}}},{"node":{"excerpt":"I am the most undisciplined person I know. I make resolutions every year - and every year - I fall short. But I am stubborn too. So this year, I have decided to be a better programmer and work on my journey in this blog. I am starting with my new year’s resolution as a front-end developer.","html":"<!--\n[Inspired by math](https://matt.might.net/articles/programmers-resolutions/)\n\nResolution\n\n1. Learn 5 new frontend technologies\n2. Focus on web accessibility \n3. Streamline workflow \n4. Create 1 blog post per week\n5. Stay healthy \n-->\n<p>I am the most undisciplined person I know. I make resolutions every year - and every year - I fall short. But I am stubborn too. So this year, I have decided to be a better programmer and work on my journey in this blog. I am starting with my new year’s resolution as a front-end developer. <!--more--></p>\n<p>To keep me honest I have contracted my wife to check on my progress every month for each resolution. I made it a mission where I get a reward for accomplising my goal and punishment if I fail.  I got the idea from this list of <a href=\"https://www.makeuseof.com/strict-commitment-apps-that-force-you-working/\">commitment apps</a>. My wife promised to make it really hurt financially if I fail. That should keep me on my toes.😁</p>\n<p>Inspired by <a href=\"https://matt.might.net/articles/programmers-resolutions/\">Matt’s programmers resolutions</a> here are my five new year resolutions. </p>\n<ol>\n<li><a href=\"#frameworks\">Learn three(3) new front-end frameworks</a></li>\n<li><a href=\"#accessibility\">Focus on web accessibility</a></li>\n<li><a href=\"#blog\">Create one (1) blog post per week</a></li>\n<li><a href=\"#stayhealthy\">Stay healthy</a> </li>\n<li><a href=\"#workflow\">Streamline workflow</a> </li>\n</ol>\n<h2 id=\"frameworks\">1. Learn three (3) new front-end frameworks </h2>\n<p>This year was a good year for frameworks. <a href=\"https://tsh.io/state-of-frontend/#frameworks\">More and more developers are using front-end frameworks</a>. I aim to learn at least three(3) new front-end frameworks. I have been working primarily with ReactJS. I can not say I am an expert. But I am proficient enough to earn a living. This year to start, I want the reach the same proficiency in Vue, Svelte, and NextJS. I have chosen these three because they are well documented and I found a great amount of community support. </p>\n<p>By the end of this year, I should have the following for each language;</p>\n<ul>\n<li>Personal project on github</li>\n<li>Blog post on how I made the project</li>\n<li>Cheatsheet I can share on this blog </li>\n</ul>\n<!--ad-->\n<h2 id=\"accessibility\">2. Focus on web accessibility </h2>\n<p>This year I have been interested with web accessibility. I thought I had been doing a great job of making my projects inclusive. I was dead wrong. This year I will work on projects that improve accessibility, champion accessibility in our company, and share my experiences with my peers.</p>\n<h2 id=\"blog\">3. Create one (1) blog post per week</h2>\n<p>I started blogging to force myself to share the things that interest me. Sharing is my incentive to explore new things. I have been really lax this past few years. I used personal stuff as an excuse when really its my lack of discipline is the issue. This past few months I have been blogging, I realized I learn more when creating an article than I do at studying intentionally. Blogging forces me to research and dig deep into the topic than when I am just solving a specific problem. This year I will try to publish at least one(1) post a week. </p>\n<h2 id=\"stayhealthy\">4. Stay healthy</h2>\n<p>From Matt’s list of programmer’s resolution, this one resonated with me a lot. For most who work as a developer keeping healthy is a hard battle. This year I want to do what I can to be healthy. Starting with the following habits;</p>\n<ul>\n<li>Less caffeine</li>\n<li>Go out for fresh air at least once a day</li>\n<li>Run twice a week</li>\n<li>Set aside some time to be offline once a day</li>\n</ul>\n<h2 id=\"workflow\">5. Streamline workflow</h2>\n<p>To accomplish the previous resolutions, I need to be more efficient. I have not explored automating some of my tasks and been working with the same toolset from three years ago. This year I will explore streamlining my workflow.  </p>\n<p>Tasks like; </p>\n<ul>\n<li>Choosing a new machine for development;</li>\n<li>Cleaning up my IDE plugins;</li>\n<li>Using design software</li>\n<li>Uncluttering my workstation</li>\n<li>Exploring new tools</li>\n</ul>\n<p>I will probably figure out more things to do later. I will keep you updated. </p>\n<p>So that’s it! I have listed my new year’s resolution as a programmer. What’s yours? </p>\n<p>Happy new year to all! 🎉🎉🎉🎉🎉</p>","fields":{"slug":"/2022/programmers_resolution_2023/"},"frontmatter":{"date":"December 31, 2022","title":"Programmer's New Year Resolution","featured_image":"/blog/boliviainteligente-unsplash.jpg","tags":["web-development","personal","frontend"]}}},{"node":{"excerpt":"I’ve got some leeway pushing Khrunus off the ground.  I’ve always been successful using JavaScript’s timing functions but since Khrunus would primarily be built-in in AngularJS. I have to research a way to reuse my timing snippets into proper Angular code.  To study, I built a simple angular app:","html":"<p>I’ve got some leeway pushing <a title=\"Khrunus\" href=\"https://github.com/chrisbautista/Khrunus\" target=\"_blank\">Khrunus</a> off the ground.  I’ve always been successful using JavaScript’s timing functions but since Khrunus would primarily be built-in in AngularJS. I have to research a way to reuse my timing snippets into proper Angular code.  To study, I built a simple angular app:<!--more--> </p>\n<h2>Problem</h2>\n<p>How to use AngularJS to make a time-related app, in this case, a timer for logging elapsed time?</p>\n<h2>What I need</h2>\n<p>Before I started this little venture, I need to detail the parameters of the experiment.</p>\n<p>Firstly,  I need to layout my application into two sections. The top section will show a digital clock face and a button to toggle(start or stop) the clock. The bottom section will be a table showing start and end times, as well as the total duration. To know that the application is successful, start and end times should be logged. Using those values I can compute for the duration.</p>\n<p>We have two modes; an idle state,”stopped” and an active mode,”started”. We need to consider that when coding the helper functions.</p>\n<h2>Solution</h2>\n<p>Firstly, we start with a basic AngularJS template. Please note I am assuming you have at least some experience working with HTML, Javascript, and AngularJS.</p>\n<p>I need two sections so I make two main DIVs.</p>\n<p>Next, in DIV 1,  we add another div to serve as the container for the timer digits and a button.</p>\n<p>Next in DIV #2, we format a table with a header and three columns; “Start”, “End” and “Duration(secs)” correspondingly.</p>\n<p>What we have now is not very pretty, we’re going to fix that in a bit. Create a CSS file, call it “app.css”. Let’s style everything as follows,</p>\n<p>Looking good! 🙂  Now to add the functionality we need. Let’s start with some data binding and a basic controller.</p>\n<h4>HTML</h4>\n<h3>Javascript</h3>\n<p>Awesome! For the button, we’re going to use that as a trigger to toggle between modes as well as an indicator to show the user what’s happening.</p>\n<p>Now, we can switch between modes, using the button data {{mode}} as a toggle flag. Now to the meat of the application, as a reference I’m going to use this basic clock code I use when I need digital clock displays.</p>\n<p>The hero of this application is AngularJS’s <a title=\"$timeout service\" href=\"https://docs.angularjs.org/api/ng/service/$timeout\" target=\"_blank\">$timeout service</a>. The $timeout service gives the user a wrapper for window.setTimeOut. So it still acts like setTimeOut but with the code organization and excellent exception handling that AngularJS provides. Our code should follow this format</p>\n<p>We build the clock functionality via a $timeout statement, but first let’s refactor our controller and add two functions to handle the Start and Stop modes.</p>\n<p>Now for the $timeout service,</p>\n<p>You can see that we used the timeout service to recursively call the <strong>StartTimer</strong> function. When you call <code class=\"language-text\">$timeout</code>, just as window.setTimeOut, you create a timing object that we then save to our variable ‘tmPromise’. We’ll get into more of that later just take a note of it. Since we’re really making a stopwatch and not a clock that tells the current time, let’s recode. We need the current time so we use <code class=\"language-text\">date.getTime()</code>. Adding two more variables timeStart and timeEnd. When we button is clicked, we save the time to <strong>timerStart</strong>. Every time the timeout completes and we call StartTimer, the value of <strong>$scope.timeEnd</strong> changes. We then subtract <strong>$scope.timeStart</strong> to get the current elapsed time in milliseconds. We add some normalization code and we end up with this,</p>\n<p>Now for the stopTimer function, issuing the cancel method will stop the $timeout service. Remember the variable we made earlier, ‘tmPromise’. We will use that as the parameter for our cancel call illustrated below. We then collect the start and end times and push that into the history array.</p>\n<h3>Conclusion</h3>\n<p>Yay, we just made an AngularJS timer widget. Adding a service to insert a line in our table we end up with this.</p>\n<p>This is a very simple implementation. One that did not need a unit test but if we wanted to, we can use a $timeout.flush() method. More details from the reference links below.</p>\n<p>See the app in action <a title=\"here\" href=\"http://chrisbautista.github.io/experiments/cbTimerDirective/public_html/\" target=\"_blank\"><strong>here</strong></a></p>\n<blockquote>\n<p>** UPDATE: Code sample here <a title=\"here\" href=\"http://chrisbautista.github.io/experiments/cbTimerDirective/public_html/\" target=\"_blank\"><strong>here</strong></a></p>\n</blockquote>\n<p>Download all the source <a title=\"angular js timer experiment zip file\" href=\"http://chrisbautista.github.io/experiments/cbTimer/angularjs_timer_experiment.zip\" target=\"_blank\"><strong>here</strong></a>.</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://docs.angularjs.org/api/ng/service/$timeout\">https://docs.angularjs.org/api/ng/service/$timeout</a></li>\n<li><a href=\"https://docs.angularjs.org/api/ng/filter/date\">https://docs.angularjs.org/api/ng/filter/date</a></li>\n</ul>","fields":{"slug":"/2014/how-to-make-a-timer-stopwatch-using-angularjs/"},"frontmatter":{"date":"September 28, 2014","title":"How To Make A Timer/Stopwatch Using AngularJS","featured_image":"/assets/2014/09/angular-featured.png","tags":["frontend","angularjs","ui","javascript"]}}},{"node":{"excerpt":"Google announced recently in its official blog, that it has acquired reCAPTCHA. CAPTCHA is a web technology made out of necessity. It primarily is used to prevent BOTS (or automated apps designed to do malicious tasks) by adding an extra step to site pages that require human interaction.","html":"<p>Google announced recently in its official blog, that it has acquired reCAPTCHA. <a href=\"http://en.wikipedia.org/wiki/CAPTCHA\" target=\"_blank\">CAPTCHA</a> is a web technology made out of necessity. It primarily is used to prevent BOTS (or automated apps designed to do malicious tasks) by adding an extra step to site pages that require human interaction. <!--more-->Yes, they’re the annoying barely readable text images when you register/login for a site.</p>\n<div style=\"clear: both; text-align: center;\">\n  <a href=\"http://4.bp.blogspot.com/_BBS5bkzuLXM/SrSXzUCQrPI/AAAAAAAACgk/abV4JRYilQE/s1600-h/recaptcha-1231dasdqd.gif\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://4.bp.blogspot.com/_BBS5bkzuLXM/SrSXzUCQrPI/AAAAAAAACgk/abV4JRYilQE/s320/recaptcha-1231dasdqd.gif\"></a>\n</div>\n<p>Anyway, this move by Google is more than just for improving it’s CAPTCHA capabilities. As they explain, reCAPTCHA technology will improve Google projects that require reading text in images. The best to benefit from this are <span style=\"font-family: Arial; font-size: 13px; white-space: pre;\">Google’s <span style=\"font-family: 'Times New Roman'; font-size: medium; white-space: normal;\"> <a href=\"http://books.google.com/\" target=\"_blank\">Books</a> project and the recent <a href=\"http://fastflip.googlelabs.com/\" target=\"_blank\">Fast Flip </a> zine search. For more info see the <a href=\"http://googleblog.blogspot.com/2009/09/teaching-computers-to-read-google.html\" target=\"_blank\">official announcement.</a></span></span></p>","fields":{"slug":"/2009/google-got-recaptcha/"},"frontmatter":{"date":"September 19, 2009","title":"Google got reCAPTCHA","featured_image":null,"tags":["google","security","frontend"]}}}]}},"pageContext":{"tag":"frontend"}},"staticQueryHashes":["2139210123","63159454"]}