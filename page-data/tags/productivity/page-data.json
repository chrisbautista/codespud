{"componentChunkName":"component---src-templates-blog-tag-list-js","path":"/tags/productivity/","result":{"data":{"site":{"siteMetadata":{"title":"CodeSpud"}},"allMarkdownRemark":{"totalCount":2,"edges":[{"node":{"excerpt":"Developing with accessibility in mind requires knowledge of WCAG rules and good techniques. These techniques boils down to remembering good accessbility patterns in code. Linters are good at discerning less ideal patterns and provide hints on how to fix them. Before I used to think linters are optional for developers. But now I don’t think I can work without them. Using a good IDE linter will help making sure your code follows accessibility best practices and in turn make you more productive.","html":"<!--\n    Angle:\n\n    Aid in making sure code is acessible\n    Find patterns that are against accessibility rules\n    Provide sufficient techniques in code\n    Avoid accessibility issues in code\n\n    - Webhint https://marketplace.visualstudio.com/items?itemName=webhint.vscode-webhint\n\n    - Axe-Linter https://marketplace.visualstudio.com/items?itemName=deque-systems.vscode-axe-linter\n\n    - Web Accessibility https://marketplace.visualstudio.com/items?itemName=MaxvanderSchee.web-accessibility\n\n    - Eslint with jsx-a11y https://www.npmjs.com/search?ranking=popularity&q=eslint%20a11y\n\n    - SonarLint https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarlint-vscode\n\n    - Bonus: ErrorLens https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens\n-->\n<p>Developing with accessibility in mind requires knowledge of WCAG rules and good techniques. These techniques boils down to remembering good accessbility patterns in code. Linters are good at discerning less ideal patterns and provide hints on how to fix them. Before I used to think linters are optional for developers. But now I don’t think I can work without them. Using a good IDE linter will help making sure your code follows accessibility best practices and in turn make you more productive.</p>\n<!--more-->\n<blockquote>\n<p>Web accessibility involves following certain design principles which ensure that people who experience difficulties or limitations have the same or a similar experience as those who do not. - <a href=\"https://blog.hubspot.com/website/web-accessibility\">Hubspot</a></p>\n</blockquote>\n<p>In the example below the linter should be able to recognize that the button tag is missing a visible label.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>save.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>responsive<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The code above is problematic for screenreaders because it does not have any text to describe what action the button is supposed to do.  I have seen a lot of HTML markup that forgets this simple rule. A linter would have caught this before even going into production.</p>\n<p>Here is the same code with a linter</p>\n<img src=\"/blog/code-with-linter.png\"  alt=\"Code with linter warning\" class=\"no-margin\">\n<p>Visual Studio Code have plugins that help coders make their code pass accessibility checks.</p>\n<p>Here are the top 5 plugins I use:</p>\n<h2>1. <a href=\"https://marketplace.visualstudio.com/items?itemName=deque-systems.vscode-axe-linter\">Axe accessibility linter</a></h2>\n<p><strong>Axe</strong> is a leader in accessibility testing and tooling. They built <a href=\"https://github.com/dequelabs/axe-core\">axe-core</a> which powers axe-linter. It is easy to install and no configuration needed. You can start enjoying the benefits of realtime code accessibility checks.</p>\n<p>Its pre-configured to check the following file extensions:</p>\n<ul>\n<li>React (.js, .ts, .jsx, .tsx)</li>\n<li>HTML (.htm, .html)</li>\n<li>Markdown (.md, .markdown)</li>\n</ul>\n<p>The great thing about axe-linter is you can click a link in the hint. The linked page will explain the issue, why its relevant and how to fix it.</p>\n<img src=\"/blog/vsce-example.png\" alt=\"Axe linter\">\n<!--ad-->\n<h2>2. <a href=\"https://webhint.io/docs/user-guide/extensions/vscode-webhint/\">Webhint</a></h2>\n<blockquote>\n<p>Webhint helps you improve your site’s accessibility, speed, cross-browser compatibility, and more by checking your code for best practices and common errors. - <a href=\"https://webhint.io/\">Webhint</a></p>\n</blockquote>\n<p><strong>Webhint.io</strong> is a tool that looks for a suite of website best practices. These best practices include accessibility, website performance, security, etc. The <a href=\"https://webhint.io/docs/user-guide/\">command line tool</a> will scan the site provided and return a report. The webhint visual studio extension, on the other hand, analyzes code while you develop.  (<a href=\"https://webhint.io/docs/user-guide/hints/hint-axe/\">See accessibility hints</a>).</p>\n<p>It also uses axe-core to analyze the code.</p>\n<img src=\"/blog/webhint-vscode.gif\" alt=\"Webhint.io\">\n<h2>3. <a href=\"https://marketplace.visualstudio.com/items?itemName=MaxvanderSchee.web-accessibility\">Web Accessibility</a></h2>\n<p><strong>Website accessiblity</strong> is another Vscode plugin geared at checking for accessibility issues in code. Not as extensive as the first two plugins but I think that is a good thing. Its focus is just accessibility issues nothing else. The hints are simple and does not offer any other options. Perfect for coders who love memory efficient IDEs.</p>\n<img src=\"/blog/web-accessibility.gif\" alt=\"Web accessibility\">\n<h2>4. <a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">Eslint</a> with <a href=\"https://www.npmjs.com/search?ranking=popularity&#x26;q=eslint%20a11y\">jsx-a11y</a></h2>\n<p>Eslint is a bit more complex to install than the previous plugins. If you’ve been developing with the Eslint and Eslint plugin then you will have an easier time.  </p>\n<h3>Installation</h3>\n<p>Run these commands in your project root</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev eslint eslint-plugin-jsx-a11y\n./node_modules/.bin/eslint <span class=\"token parameter variable\">--init</span></code></pre></div>\n<p>You can also do this globally;</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> eslint eslint-plugin-jsx-a11y \neslint <span class=\"token parameter variable\">--init</span></code></pre></div>\n<p>Finally, add jsx-a11y in plugins section of your <code class=\"language-text\">.eslintrc</code></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n\n <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"jsx-a11y\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You might get a popup saying there is an error starting eslint plugin, check the output logs in Vscode for any issues. In most cases, making sure you have the latest nodejs and npm fixes the issue.</p>\n<h2>5. <a href=\"https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarlint-vscode\">SonarLint</a></h2>\n<p>Last but not the least, Sonarlint is a code quality checking tool, like Webhint and Eslint. It checks for a suite of issues in your code not just accessibility. It requires Java runtime to work.</p>\n<p>The accessibility rules are limited to <a href=\"https://rules.sonarsource.com/html/tag/accessibility\">HTML</a> portion of your code.  </p>\n<p>If you are more interested in accessibility checks, I recommend using the other plugins on this list.</p>\n<!--ad-->\n<h2>Bonus: <a href=\"https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens\">Errorlens</a></h2>\n<p>Errorlens is not an accessibility plugin but a support plugin that places the warnings and errors from the linters front and center. Its nice to see the issues directly without having to hover over the squiggly lines or opening the “problems” tab.</p>\n<p>Once you have chosen your accessibility plugin I recommend installing Errorlens to improve visibility of errors and warning messages.</p>\n<p><strong>Without Errorlens</strong></p>\n<img src=\"/blog/without-errorlens.png\" alt=\"Vscode without Errorlens\" class=\"no-margin\">\n<p><strong>With Errorlens</strong></p>\n<img src=\"/blog/vscode-with-errorlens.png\" alt=\"Vscode with Errorlens\" class=\"no-margin\">\n<h2>Wrapping up</h2>\n<p>You still need to have unit and regression tests in place before pushing anything into production but at least the number accessibility issues that get through would be less than just leaving it to CI/CD testing suites. Using proper tools in development makes your work look more professional. It also helps your team. Use these accessibility plugins so you can bake in accessibility into your workflow will less effort.</p>","fields":{"slug":"/2022/five_accessibility_vscode_extensions/"},"frontmatter":{"date":"December 15, 2022","title":"Five Web Accessibility Extensions for Visual Studio Code","featured_image":"/blog/kevin-ku-w7ZyuGYNpRQ-unsplash.jpg","tags":["accessibility","tools","productivity","vscode"]}}},{"node":{"excerpt":"If you work with Linux or Unix-like operating systems like Ubuntu or the MacOS, you might be familiar with Bourne-Again Shell or BASH for short. This article will show you that with a little elbow grease, you can have your BASH prompt work for you and heck maybe have a little fun with it.","html":"<p>If you work with Linux or Unix-like operating systems like Ubuntu or the MacOS, you might be familiar with Bourne-Again Shell or <a href=\"https://www.gnu.org/software/bash/bash.html\">BASH</a> for short. This article will show you that with a little elbow grease, you can have your BASH prompt work for you and heck maybe have a little fun with it.</p>\n<!--more-->\n<p>People tell me the invention of the GUI (graphical user interface) is the best thing that ever happened to modern computing. I beg to differ. Not all work is accomplished through the GUI nor is it efficient.</p>\n<p>I find myself working on the command line for work more and more — managing my servers even my Apple computer. So I get to spend much of my time on the command line. Launching commands like a stenographer recording the latest court drama. I realized very early how powerful the command line could be.</p>\n<p>But not having a GUI does not mean you should be happy with the default command prompt. Is this familiar?<figure></p>\n<p><img src=\"/assets/2016/11/boring.png\" alt=\"boring\" width=\"512\" height=\"224\" class=\"alignnone size-full wp-image-544\" srcset=\"/assets/2016/11/boring.png 512w, /assets/2016/11/boring-300x131.png 300w\" sizes=\"(max-width: 512px) 100vw, 512px\" /> <figcaption>Boring command prompt!</figcaption></figure></p>\n<p>Using the table below we can build a BASH prompt that is not only pretty but saves us a few keystrokes as well.</p>\n<h2>BASH Special Characters Reference</h2>\n<table >\n  <tr>\n    <th>\n      Special character\n    </th>\n    \n    <th align=\"left\">\n      Description\n    </th>\n    \n    <th>\n      Special character\n    </th>\n    \n    <th align=\"left\">\n      Description\n    </th>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\a\n    </td>\n    \n    <td>\n      an ASCII bell character (07)\n    </td>\n    \n    <td align=\"center\">\n      \\d\n    </td>\n    \n    <td>\n      the date in &#8220;Weekday Month Date&#8221; format (e.g., &#8220;Tue May 26&#8221;)\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\]\n    </td>\n    \n    <td>\n      end a sequence of non-printing characters\n    </td>\n    \n    <td align=\"center\">\n      \\e\n    </td>\n    \n    <td>\n      an ASCII escape character (033)\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\h\n    </td>\n    \n    <td>\n      the hostname up to the first `.&#8217;\n    </td>\n    \n    <td align=\"center\">\n      \\H\n    </td>\n    \n    <td>\n      the hostname\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\j\n    </td>\n    \n    <td>\n      the number of jobs currently managed by the shell\n    </td>\n    \n    <td align=\"center\">\n      \\l\n    </td>\n    \n    <td>\n      the basename of the shell&#8217;s terminal device name\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\n\n    </td>\n    \n    <td>\n      newline\n    </td>\n    \n    <td align=\"center\">\n      \\r\n    </td>\n    \n    <td>\n      carriage return\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\s\n    </td>\n    \n    <td>\n      the name of the shell, the basename of $0 (the portion following the final slash)\n    </td>\n    \n    <td align=\"center\">\n      \\t\n    </td>\n    \n    <td>\n      the current time in 24-hour HH:MM:SS format\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\T\n    </td>\n    \n    <td>\n      the current time in 12-hour HH:MM:SS format\n    </td>\n    \n    <td align=\"center\">\n      \\@\n    </td>\n    \n    <td>\n      the current time in 12-hour am/pm format\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\A\n    </td>\n    \n    <td>\n      the current time in 24-hour HH:MM format\n    </td>\n    \n    <td align=\"center\">\n      \\u\n    </td>\n    \n    <td>\n      the username of the current user\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\v\n    </td>\n    \n    <td>\n      the version of bash (e.g., 2.00)\n    </td>\n    \n    <td align=\"center\">\n      \\V\n    </td>\n    \n    <td>\n      the release of bash, version + patchelvel (e.g., 2.00.0)\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\w\n    </td>\n    \n    <td>\n      the current working directory\n    </td>\n    \n    <td align=\"center\">\n      \\W\n    </td>\n    \n    <td>\n      the basename of the current working directory\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\!\n    </td>\n    \n    <td>\n      the history number of this command\n    </td>\n    \n    <td align=\"center\">\n      \\#\n    </td>\n    \n    <td>\n      the command number of this command\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\$\n    </td>\n    \n    <td>\n      if the effective UID is 0, a #, otherwise a $\n    </td>\n    \n    <td align=\"center\">\n      \\nnn\n    </td>\n    \n    <td>\n      the character corresponding to the octal number nnn\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\\\\n    </td>\n    \n    <td>\n      a backslash\n    </td>\n    \n    <td align=\"center\">\n      \\[\n    </td>\n    \n    <td>\n      begin a sequence of non-printing characters, which could be used to embed a terminal control sequence into the prompt\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\D{format}\n    </td>\n    \n    <td colspan=\"3\">\n      the format is passed to strftime(3) and the result is inserted into the prompt string; an empty format results in a locale-specific time representation. The braces are required\n    </td>\n  </tr>\n</table>\n<h2>Change the Bash Prompt</h2>\n<p>The environment variable we want to modify is <strong>PS1</strong>.<figure></p>\n<p><img src=\"/assets/2016/11/editPS1.png\" alt=\"editps1\" width=\"376\" height=\"90\" class=\"alignnone size-full wp-image-535\" srcset=\"/assets/2016/11/editPS1.png 376w, /assets/2016/11/editPS1-300x72.png 300w\" sizes=\"(max-width: 376px) 100vw, 376px\" /> </figure></p>\n<p>Using the reference table above we can break down the current prompt as</p>\n<ul>\n<li><em>\\u</em> – the current user</li>\n<li><em>\\h</em> – the computer’s hostname</li>\n<li><em>\\w</em> – the current working directory</li>\n</ul>\n<p>Not very useful is it? Let’s change that.</p>\n<p>By modifying the PS1 variable and exporting it with the command below we can manipulate the prompt to output anything we want.<figure></p>\n<p><img src=\"/assets/2016/11/bash_prompt_smiley.png\" alt=\"bash_prompt_smiley\" width=\"476\" height=\"131\" class=\"alignnone size-full wp-image-538\" srcset=\"/assets/2016/11/bash_prompt_smiley.png 476w, /assets/2016/11/bash_prompt_smiley-300x83.png 300w\" sizes=\"(max-width: 476px) 100vw, 476px\" /> <figcaption>Add a smiley</figcaption></figure></p>\n<p>Below is my favorite bash prompt which I install for all my servers and even my workstation. I can easily see important details like the hostname – very important if you find yourself managing multiple terminal windows and you can distinguish between windows. This configuration also shows the load averages, the current date and time and the working directory. The color helps to give it contrast to the monotonous black on white default of most terminal windows.<figure></p>\n<p><img src=\"/assets/2016/11/mybashpromot_in_action.png\" alt=\"mybashpromot_in_action\" width=\"719\" height=\"370\" class=\"alignnone size-full wp-image-536\" srcset=\"/assets/2016/11/mybashpromot_in_action.png 719w, /assets/2016/11/mybashpromot_in_action-300x154.png 300w\" sizes=\"(max-width: 719px) 100vw, 719px\" /> </figure></p>\n<h2>Make it Permanent</h2>\n<p>To make your BASH prompt permanent, just edit ~/.bash_profile or ~/.bashrc or ~/.profile or run the command<figure></p>\n<img src=\"/assets/2016/11/make_bashprompt_permanent.png\" alt=\"Make your bash prompt permanent\" width=\"722\" height=\"183\" class=\"alignnone size-full wp-image-541\" srcset=\"/assets/2016/11/make_bashprompt_permanent.png 722w, /assets/2016/11/make_bashprompt_permanent-300x76.png 300w\" sizes=\"(max-width: 722px) 100vw, 722px\" />  \n</figure>\n<h2>Ideas</h2>\n<ol>\n<li>Count the files in the current directory</li>\n<li>Display in blinking colors the last line of a todo list</li>\n<li>Display CPU/Memory/Disk usage</li>\n<li>Display command to pull up a help screen</li>\n<li>Echo a smiley if the system is working in top condition</li>\n</ol>\n<p>There you have it, you can now work on the command line with a little bit more help. The key here is to be creative and think of what you want your bash prompt to have. Enjoy!</p>","fields":{"slug":"/2016/make-bash-prompt-work/"},"frontmatter":{"date":"November 14, 2016","title":"Make Your Bash Prompt Work For You","featured_image":"/assets/2016/11/mybashpromot_in_action.png","tags":["bash","productivity","cli"]}}}]}},"pageContext":{"tag":"productivity"}},"staticQueryHashes":["2139210123","63159454"]}