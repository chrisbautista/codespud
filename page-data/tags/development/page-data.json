{"componentChunkName":"component---src-templates-blog-tag-list-js","path":"/tags/development/","result":{"data":{"site":{"siteMetadata":{"title":"CodeSpud"}},"allMarkdownRemark":{"totalCount":1,"edges":[{"node":{"excerpt":"In this post we explore the marvelous world of Discriminated Unions in TypeScript.  Discriminated Unions are a way to combine types that…","html":"<p>In this post we explore the marvelous world of Discriminated Unions in TypeScript. </p>\n<p><em>Discriminated Unions</em> are a way to combine types that have a common discriminant (usually a literal property) so that TypeScript can narrow down which type it’s dealing with. Let’s explore the 10 patterns that make these unions your coding sidekick!</p>\n<p>If you’re like me that learn better with sample code, then I won’t go into explaining what Discriminated Unions anymore and let’s get straight to some examples. </p>\n<h2>1. Basic Discriminated Union</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">Circle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> kind<span class=\"token operator\">:</span> <span class=\"token string\">\"circle\"</span><span class=\"token punctuation\">;</span> radius<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">Square</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> kind<span class=\"token operator\">:</span> <span class=\"token string\">\"square\"</span><span class=\"token punctuation\">;</span> side<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">Shape</span> <span class=\"token operator\">=</span> Circle <span class=\"token operator\">|</span> Square<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span>shape<span class=\"token operator\">:</span> Shape<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">.</span>kind<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">case</span> <span class=\"token string\">\"circle\"</span><span class=\"token operator\">:</span>\n\t      <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>radius <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">case</span> <span class=\"token string\">\"square\"</span><span class=\"token operator\">:</span>\n\t      <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>side <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>side<span class=\"token punctuation\">;</span>\n\t  <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>This pattern shows the simple yet powerful use of a common property (<code class=\"language-text\">kind</code>) to determine how to process each shape.  This is most common pattern on when to use Discriminated Unions. When your object has a common property that helps “discriminate” the “shape” of the object. Other common properties used are “type”, “status”, “responseType” etc.</em></p>\n<h2>2.  Exhaustiveness Checking</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">assertNever</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unexpected object: \"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span>shape<span class=\"token operator\">:</span> Shape<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">.</span>kind<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">case</span> <span class=\"token string\">\"circle\"</span><span class=\"token operator\">:</span>\n\t      <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>radius <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">case</span> <span class=\"token string\">\"square\"</span><span class=\"token operator\">:</span>\n\t      <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>side <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t      <span class=\"token keyword\">return</span> <span class=\"token function\">assertNever</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Compiler will remind you if a new type is forgotten.</span>\n\t  <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>*This example  ensures every case is handled, it introduces a function that throws an exception if you introduced one you have not defined. Use this pattern to safeguard agains “oops” moments. </p>\n<h2>3. Handling Different API Responses</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">APISuccess</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> kind<span class=\"token operator\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span> data<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">APIError</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> kind<span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">;</span> errorCode<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">APIResponse</span> <span class=\"token operator\">=</span> APISuccess <span class=\"token operator\">|</span> APIError<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">handleResponse</span><span class=\"token punctuation\">(</span>response<span class=\"token operator\">:</span> APIResponse<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>kind<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">case</span> <span class=\"token string\">\"success\"</span><span class=\"token operator\">:</span>\n\t      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Data: \"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">case</span> <span class=\"token string\">\"error\"</span><span class=\"token operator\">:</span>\n\t      <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Error </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>response<span class=\"token punctuation\">.</span>errorCode<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>response<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>By using a discriminant (<code class=\"language-text\">kind</code>), this pattern cleanly separates successful responses from errors. Imagine it as the Avengers assembling to tackle any API threat—each with its own special move!</em></p>\n<h2>4. Handling Success and Failure</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\t<span class=\"token comment\">//...</span>\n\t\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">Success<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span> data<span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">Failure</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token string\">\"failure\"</span><span class=\"token punctuation\">;</span> error<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">Result<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Success<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> Failure<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ChatResponse</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ApiResponse</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>IMyComponentProps<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">,</span> setResult<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Result<span class=\"token operator\">&lt;</span>ChatResponse<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">function</span> <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n\t\t  <span class=\"token comment\">// Simulating an API call ...</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token keyword\">function</span> <span class=\"token function\">handleFetchResult</span><span class=\"token punctuation\">(</span>response<span class=\"token operator\">:</span> Result<span class=\"token operator\">&lt;</span>ChatResponse<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\t\t\n\t\t\t<span class=\"token function\">setResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>response<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>SuccessfulFetchView data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>FailedFetchView error<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>*Here we use Discriminated Unions to elegantly handle both success and error outcomes and render the appropriate view. </p>\n<h2>5. Representing UI States</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">LoadingState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token string\">\"loading\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">LoadedState<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token string\">\"loaded\"</span><span class=\"token punctuation\">;</span> data<span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">ErrorState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">;</span> message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">UIState<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> LoadingState <span class=\"token operator\">|</span> LoadedState<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> ErrorState<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">getMessageText</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> UIState<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">case</span> <span class=\"token string\">\"loading\"</span><span class=\"token operator\">:</span>\n\t      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Loading...\"</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">case</span> <span class=\"token string\">\"loaded\"</span><span class=\"token operator\">:</span>\n\t      <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Data: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">case</span> <span class=\"token string\">\"error\"</span><span class=\"token operator\">:</span>\n\t      <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Error: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>This pattern leverages discriminated unions to manage different UI states. It’s like switching between your favorite streaming channels—each state brings a different vibe to the screen!</em></p>\n<h2>6. Navigating Nested Data Structures</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">;</span> value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> children<span class=\"token operator\">:</span> TreeNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">LeafNode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"leaf\"</span><span class=\"token punctuation\">;</span> value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">Tree</span> <span class=\"token operator\">=</span> TreeNode <span class=\"token operator\">|</span> LeafNode<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">sumTree</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">:</span> Tree<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"leaf\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">return</span> tree<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\t  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">return</span> tree<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> tree<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> sum <span class=\"token operator\">+</span> <span class=\"token function\">sumTree</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>This pattern shows how discriminated unions can power recursive data structures, like summing values in a tree. It’s your code’s version of a nested Russian doll, but with fewer existential crises!</em></p>\n<hr>\n<h2>7.  Managing Different Events</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">ClickEvent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"click\"</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">KeyPressEvent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"keypress\"</span><span class=\"token punctuation\">;</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">Event</span> <span class=\"token operator\">=</span> ClickEvent <span class=\"token operator\">|</span> KeyPressEvent<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">handleEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> Event<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">case</span> <span class=\"token string\">\"click\"</span><span class=\"token operator\">:</span>\n\t      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Clicked at (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>event<span class=\"token punctuation\">.</span>x<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>event<span class=\"token punctuation\">.</span>y<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">case</span> <span class=\"token string\">\"keypress\"</span><span class=\"token operator\">:</span>\n\t      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Key pressed: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>event<span class=\"token punctuation\">.</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>Discriminated unions here allow you to handle different events with precision. It’s like having a remote control that instantly switches channels—only, in this case, you’re switching event handlers!</em></p>\n<hr>\n<h2>8. Representing Validation States</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">ValidForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token string\">\"valid\"</span><span class=\"token punctuation\">;</span> values<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">InvalidForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token string\">\"invalid\"</span><span class=\"token punctuation\">;</span> errors<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">FormState</span> <span class=\"token operator\">=</span> ValidForm <span class=\"token operator\">|</span> InvalidForm<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">processForm</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> FormState<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">case</span> <span class=\"token string\">\"valid\"</span><span class=\"token operator\">:</span>\n\t      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Processing form with values: \"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">case</span> <span class=\"token string\">\"invalid\"</span><span class=\"token operator\">:</span>\n\t      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Errors: \"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>This pattern utilizes discriminated unions to clearly represent whether a form is valid or not. It’s like having a Hogwarts sorting hat that instantly tells you if your form is magical (valid) or a muggle (invalid)!</em></p>\n<hr>\n<h2>9. Handling Multiple Plugin Types</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\t<span class=\"token keyword\">interface</span> <span class=\"token class-name\">BasePlugin</span> <span class=\"token punctuation\">{</span>\n\t  type<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">interface</span> <span class=\"token class-name\">LoggerPlugin</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BasePlugin</span> <span class=\"token punctuation\">{</span>\n\t  type<span class=\"token operator\">:</span> <span class=\"token string\">\"logger\"</span><span class=\"token punctuation\">;</span>\n\t  logLevel<span class=\"token operator\">:</span> <span class=\"token string\">\"debug\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"info\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"warn\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">interface</span> <span class=\"token class-name\">AuthPlugin</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BasePlugin</span> <span class=\"token punctuation\">{</span>\n\t  type<span class=\"token operator\">:</span> <span class=\"token string\">\"auth\"</span><span class=\"token punctuation\">;</span>\n\t  provider<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">Plugin</span> <span class=\"token operator\">=</span> LoggerPlugin <span class=\"token operator\">|</span> AuthPlugin<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">initializePlugin</span><span class=\"token punctuation\">(</span>plugin<span class=\"token operator\">:</span> Plugin<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">case</span> <span class=\"token string\">\"logger\"</span><span class=\"token operator\">:</span>\n\t      logger<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Logger initialized with level </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>plugin<span class=\"token punctuation\">.</span>logLevel<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">case</span> <span class=\"token string\">\"auth\"</span><span class=\"token operator\">:</span>\n\t      logger<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Auth plugin using </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>plugin<span class=\"token punctuation\">.</span>provider<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>Here, discriminated unions help manage various plugin types within an architecture. Think of it as assembling your own tech-savvy Justice League where every plugin has a specific role to play!</em></p>\n<hr>\n<h2>10. Streamlining Command Execution</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">CreateCommand</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"create\"</span><span class=\"token punctuation\">;</span> payload<span class=\"token operator\">:</span> User <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">UpdateCommand</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"update\"</span><span class=\"token punctuation\">;</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> payload<span class=\"token operator\">:</span> User <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">DeleteCommand</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"delete\"</span><span class=\"token punctuation\">;</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">Command</span> <span class=\"token operator\">=</span> CreateCommand <span class=\"token operator\">|</span> UpdateCommand <span class=\"token operator\">|</span> DeleteCommand<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>command<span class=\"token operator\">:</span> Command<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DbResponse <span class=\"token punctuation\">{</span>\n\t  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">case</span> <span class=\"token string\">\"create\"</span><span class=\"token operator\">:</span>\n\t      <span class=\"token keyword\">return</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>payload<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t    <span class=\"token keyword\">case</span> <span class=\"token string\">\"update\"</span><span class=\"token operator\">:</span>\n\t      <span class=\"token keyword\">return</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\n\t    <span class=\"token keyword\">case</span> <span class=\"token string\">\"delete\"</span><span class=\"token operator\">:</span>\n\t      <span class=\"token keyword\">return</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\n\t  <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>*In this pattern, discriminated unions simplify the handling of different commands, ensuring that each command is executed correctly. It’s akin to having a Swiss Army knife of commands, ready to take on any task with precision! *</p>\n<hr>\n<h2>When to use Discrimated Unions</h2>\n<div class=\"gatsby-highlight\" data-language=\"pgsql\"><pre class=\"language-pgsql\"><code class=\"language-pgsql\">                            ┌───────────────────────────────────┐\n                            │ Do you have multiple related     │\n                            │ types that share common fields?  │\n                            └───────────────────────────────────┘\n                                           │\n                     Yes                   ▼                   No\n                      ─────────────────► ┌───────────────────┐ ──────► Consider other patterns\n                                         │ Do the types have │\n                                         │ a clear &quot;kind&quot; or │\n                                         │ &quot;type&quot; discriminator? │\n                                         └───────────────────┘\n                                           │\n                     Yes                   ▼                   No\n                      ─────────────────► ┌───────────────────┐ ──────► Use Union Types without\n                                         │ Do you need type  │        discriminators or Interfaces\n                                         │ safety in switch  │\n                                         │ or if-else checks?│\n                                         └───────────────────┘\n                                           │\n                     Yes                   ▼                   No\n                      ─────────────────► ┌───────────────────┐ ──────► Consider simple types\n                                         │ Use Discriminated │\n                                         │ Unions for better │\n                                         │ type safety       │\n                                         └───────────────────┘</code></pre></div>\n<p>If you said yes to all the questions then use a Discriminated Union. If you said no to one of the questions, maybe you need to think of a different pattern. </p>\n<h1>Wrap-Up</h1>\n<p>Discriminated unions is another Typescript feature to help you write robust, maintainable code. By clearly defining each possible state or variant, you can avoid runtime errors and make your code self-documenting, just like a well-curated 80’s playlist. As you experiment with these patterns, explore further resources like the <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html\">TypeScript Handbook on Advanced Types</a> and <a href=\"https://basarat.gitbook.io/typescript/\">TypeScript Deep Dive</a> to continue your journey. </p>\n<p>Happy coding!</p>","fields":{"slug":"/2025/discriminated-unions-examples-typescript/"},"frontmatter":{"date":"February 08, 2025","title":"Ten Common Typescript Discriminated Union Examples","featured_image":"/blog/rick-mason-lego-unsplash.jpg","tags":["typescript","development"]}}}]}},"pageContext":{"tag":"development"}},"staticQueryHashes":["2139210123","63159454"]}