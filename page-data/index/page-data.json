{"componentChunkName":"component---src-templates-blog-list-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"CodeSpud"}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"Improving accessibility is an exercise in empathy. We put ourselves in other people’s shoes and imagine how we can do a specific task. Tasks like going up a flight of stairs, knowing when to cross a street, or how to consume a website.","html":"<p>Improving accessibility is an exercise in empathy. We put ourselves in other people’s shoes and imagine how we can do a specific task. Tasks like going up a flight of stairs, knowing when to cross a street, or how to consume a website. <!--more--> Knowing the difficulties people encounter when using your website/application, can aid us in designing better experiences for our users.</p>\n<p>One of the areas UX designers and developers alike fail to give attention to is keyboard navigation. Keyboard navigation is important because you may have users that depend on the keyboard or screenreaders to read your website. If your site is hard to navigate for these users, they might just quit your site all together and move on. </p>\n<p>Here are my top three tips for better keyboard and screen reader navigation</p>\n<h2>1. Use headings and landmarks</h2>\n<p>I mentioned before in <a href=\"/2022/five_steps_to_improve_accessibility\">five steps to improve accessibility</a>. One of the simplest thing you can do to improve accessibility is to use semantic tags like headings and landmarks to mark up your HTML. Headings and landmark tags not only help tell the screen reader about the information hierarchy on your page but also helps in navigation. This technique benefits screenreader users. </p>\n<p><a href=\"https://www.w3.org/WAI/tutorials/page-structure/headings/\">Headings</a> provide a straightforward way of distinguishing information hierarchy on a page. The first heading (<code class=\"language-text\">&lt;h1 /></code>) is commonly the title of the page which tells the reader what the site or page is about. After that, you organize the supporting information into sub-topics titled <code class=\"language-text\">&lt;h2/></code> and so on.  </p>\n<p><strong>Headings</strong> </p>\n<ul>\n<li>h1</li>\n<li>h2</li>\n<li>h3</li>\n<li>h4</li>\n<li>h5</li>\n<li>h6</li>\n</ul>\n<p><a href=\"https://www.w3.org/WAI/tutorials/page-structure/regions/\">Page regions or landmarks</a> divide the content into meaningful areas. For example, the <code class=\"language-text\">&lt;header /></code> will contain navigation links and the name of a website, and the <code class=\"language-text\">&lt;main /></code> tag will wrap the “main” content of the page.</p>\n<p><strong>Region tags</strong> </p>\n<ul>\n<li>header</li>\n<li>footer </li>\n<li>aside </li>\n<li>nav</li>\n<li>main</li>\n<li>section</li>\n</ul>\n<p>We can also use <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">ARIA roles</a></p>\n<p><strong>Landmark roles</strong></p>\n<ul>\n<li>banner</li>\n<li>complementary</li>\n<li>main</li>\n<li>navigation</li>\n<li>region</li>\n<li>and more.</li>\n</ul>\n<p>Screen readers are capable of traversing a page through headings and landmarks. Using certain shortcuts, assistive technologies can jump from one heading to another. Some screenreaders can even list all the headings and landmarks on a page and then give the user a choice to jump to a specific heading or landmark. </p>\n<h2>2. Add skip links</h2>\n<p>The worst part about navigating a page with the keyboard (e.g. <kbd>Tab</kbd>) is having to go through a lot of page real estate. For example, you would need to go through the main navigation, aside elements, tag lists, and call-to-action buttons before you can get to the main content. It can be exhausting for your users to do that every time. My <kbd>Tab</kbd> key finger (if that is a thing) already hurts just thinking about it. It wastes your users’ time when they can already be reading your awesome content. To remedy this add skip links to your markup. Skip links can be part of your design or hidden until needed. These elements allow the user to jump to a specific topic or area on your page. Saving them so much pain. </p>\n<p>Here’s a simple “skip to main content” link you can incorporate to your site.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">.skip-to-main-content </span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// hide by default but readable to screenreaders </span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> -999px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transitio</span><span class=\"token punctuation\">:</span> top 0.35s<span class=\"token punctuation\">;</span>\n\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:focus</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// show in to view when focused </span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#main-content<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>skip-to-main-content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Skip to main content<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n...\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>article</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main-content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>article</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The key here is to make the skip link the very top element in the markup so that it gets focused first. The link scrolls the page to the area marked by <code class=\"language-text\">id=main-content</code>. </p>\n<h2>3. Minimize key presses</h2>\n<p>If you have a user interface/design that requires a lot of traversals and you can’t use skip links, modify the key handling used for navigation. </p>\n<h3>3.1 Assign other keys for navigation</h3>\n<div class=\"img-demo\">\n  <img src=\"/blog/just-tabs.png\"/>\n</div>\n<p>Tables are a common pattern to present information for a related group of data. Take, for example, the wireframe above, we have columns for data and a column for action buttons. The easiest we can do is just mark up the HTML so that the focusable elements like buttons can be “tabbed” into. In the previous image, we marked the element the user needs to interact with. If you use the <kbd>Tab</kbd> key, it will take you 8 key presses before a user reaches the <code class=\"language-text\">Delete</code> button. I call <strong>8</strong> key presses the traversal index (<code class=\"language-text\">T</code> index for short) to activate the <code class=\"language-text\">Delete</code> button. Before we go further, note I just coined the term, traversal index. Not sure if there’s a proper term for that. Anyhow, it is still OK now for the sample table with three controls(checkbox, delete and save button) but when you’ve got more focusable elements or when the number of table rows increases, the traversal index will grow quite large. We don’t want that. </p>\n<p>We want to reduce the <code class=\"language-text\">T</code> index to make your keyboard(/screen reader) users happy.  Now check out the sample below, </p>\n<div class=\"img-demo\">\n  <img src=\"/blog/with-arrow-keys.png\"/>\n</div>\n<p>In this table, we’ve added event handlers to use <kbd>Arrow Up</kbd> and <kbd>Arrow Down</kbd> keys to navigate between table rows. Once the specific row is focused(indicated by grey background color), the user can then use the <kbd>Tab</kbd> key to navigate between the elements within the row. With this simple addition, we’ve reduced the <code class=\"language-text\">T</code> index to 4. We’ve spared the user from carpal tunnel syndrome or other typing-related pain. </p>\n<p>It is important to note that since this is not a common navigation convention for tables, you need to notify the user about the extended navigation before or when the table is focused. </p>\n<blockquote>\n<p>For example,</p>\n<p><strong>Instruction:</strong> Use arrow keys to navigate rows and <kbd>Tab</kbd>(/<kbd>Shift</kbd>+<kbd>Tab</kbd>) key to move between items in a row. </p>\n</blockquote>\n<h3>3.2 Limit navigation between same level areas</h3>\n<p>Here’s another,</p>\n<div class=\"img-demo\">\n  <img src=\"/blog/page-sections-tabs-only.png\"/>\n</div>\n<p>The wireframe shows three sections (header, table, and links). The header has only one link and the table has four(4) rows with one(1) focusable element per row. To navigate from the header to the “links” section, we will need to press the <kbd>Tab</kbd> key six(6) times. The problematic step here is we spend a lot of time focusing on the table rows before arriving at the Links section.</p>\n<p>We can improve the keyboard navigation by keeping the “tab” stops on the three sections initially. One way of doing this is to prevent your table contents from getting focused until needed. For instance, adding <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\">inert</a> attribute to the <code class=\"language-text\">&lt;tbody /></code> wrapper will prevent the table contents from getting focused. This change reduces the <code class=\"language-text\">T</code> index to <code class=\"language-text\">3</code>. </p>\n<p>The second part of this technique is to assign a special key( or keys) to enable navigation inside the table. For example, same with the previous table navigation handler, when the table is focused pressing <kbd>Arrow down</kbd> or <kbd>Arrow up</kbd> keys will focus one of the rows. Then you can navigate vertically or horizontally inside the table after. When the user is done, we can continue through the table rows or press <kbd>Escape</kbd> key to exit the table. </p>\n<div class=\"img-demo\">\n  <img src=\"/blog/page-sections-plan-focus.png\"/>\n</div>\n<p>You might think that this is complex. It might be - but it really depends on your implementation. It will take quite a bit of coding but the other side of the equation is a more intuitive way of navigating your page.</p>\n<p>Another way to improve the <code class=\"language-text\">T</code> index for this wireframe is to assign a key combination(/s) to each section. For example, assign <kbd>/</kbd> + <kbd>l</kbd> to jump straight to the links section. This will keep the default navigation behavior but still provide the user a means to avoid extraneous key presses. </p>\n<p>The key for both techniques is to inform the user of the special keyboard navigation. </p>\n<h2>Wrapping up</h2>\n<p>Making sure your website keyboard accessible is a very important task. We can improve keyboard accessibility a step further by making sure to;</p>\n<ul>\n<li>use headings and landmarks; </li>\n<li>add skip links and; </li>\n<li>reduce the number of keypresses when navigating.</li>\n</ul>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://www.w3.org/WAI/tutorials/page-structure/\">WCAG Tutorials</a></li>\n<li><a href=\"https://webaim.org/techniques/skipnav/\">WebAIM: Skip navigation links</a></li>\n<li><a href=\"https://a11y-guidelines.orange.com/en/web/toolbox/methods-and-test-tools/navigating-with-a-screen-reader/\">Navigating with a screenreader</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">MDN: WAI-ARIA roles</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element#content_sectioning\">MDN: Elements - Content sectioning</a></li>\n</ul>","fields":{"slug":"/2023/three-things-you-can-do-for-keyboard-screanreader-navigation/"},"frontmatter":{"date":"January 20, 2023","title":"Top three things to do for better keyboard and screenreader navigation","featured_image":"/blog/christin-hume-unsplash.jpg","tags":["accessibility","UX","frontend"]}}},{"node":{"excerpt":"Part of my new year resolution for 2023 is to learn at least 3 new front-end frameworks. One of these frameworks I intend to dive deeper into is Vue.js.  Every time I want to learn something new I try to plan first. A very quick to-do list related to the subject. I know there’s a lot of great guides out there about Vue.js.","html":"<p>Part of my <a href=\"/2022/programmers_resolution_2023/\">new year resolution for 2023</a> is to learn at least 3 new front-end frameworks. One of these frameworks I intend to dive deeper into is Vue.js. </p>\n<p>Every time I want to learn something new I try to plan first. A very quick to-do list related to the subject. I know there’s a lot of great guides out there about Vue.js. <!--more--> But I still like making my little todo list. It keeps me focused. </p>\n<p>To start, I went to <a href=\"https://vuejs.org/guide/introduction.html\">Vue.js’ documentation page</a>. I scanned all the topics provided. I looked for the least amount of concepts to get a sense of Vue.js - enough to start a simple application. Then, I grew my knowledge gradually. I’ve outlined these initial concepts in this post. </p>\n<p>If you’re like me, one that is practically new to Vue.js, or if you worked on Vue.js before but interested in a refresher, or are just interested in reading on the topic, continue to read on.</p>\n<h2>Vue.js learning plan</h2>\n<p>To be honest I got lost quite early because of topics I am not familiar with. Topics like the difference between Options API and Composition API. If you don’t know what that is either, then you were me at the beginning. <a href=\"https://vuejs.org/guide/introduction.html#api-styles\">Vue.js documentation on API Preference</a> should explain the difference between API styles. </p>\n<p>To simplify, I restricted my study to just using the <a href=\"https://vuejs.org/guide/introduction.html#options-api\">Options API</a>. Feel free to try whichever API style you prefer. I found I readily applied the same concepts using Composition API once I understood it. So don’t worry about having to learn both in the beginning. </p>\n<ol>\n<li><a href=\"/2023/newbies_guide_to_learning_vuejs/#create\">How to create a Vue application</a></li>\n<li><a href=\"/2023/newbies_guide_to_learning_vuejs/#templates\">Working with Templates</a> </li>\n<li><a href=\"/2023/newbies_guide_to_learning_vuejs/#directives\">Vue.js Directives</a> </li>\n<li><a href=\"/2023/newbies_guide_to_learning_vuejs/#data\">Data handling and methods</a></li>\n<li><a href=\"/2023/newbies_guide_to_learning_vuejs/#computed\">Computed properties</a></li>\n<li><a href=\"/2023/newbies_guide_to_learning_vuejs/#event-handling\">Handling events</a></li>\n</ol>\n<!--ad-->\n<h3 id=\"create\">1. How to create a Vue Application</h3>\n<p>To start off, the first thing any developer wants to learn is how to make a simple application. Like most front-end frameworks nowadays, there are two ways to start creating an application. The first option is hosting an HTML page with the library CDN loaded and one is to build an application using build setup. Choose whichever way you want to start with. What’s important is you get started early to practice.</p>\n<p><strong>HTML page loading Vue CDN</strong></p>\n<ul>\n<li><a href=\"https://vuejs.org/guide/quick-start.html#using-vue-from-cdn\">Vuejs.org: Using a CDN</a></li>\n<li><a href=\"https://vueschool.io/lessons/getting-started-with-vuejs\">Vue School: Getting started with VueJS</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/vue@3/dist/vue.global.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>Build setup with NodeJS</strong></p>\n<ul>\n<li><a href=\"https://vuejs.org/guide/quick-start.html#creating-a-vue-application\">Vuejs.org: Using NodeJS Setup</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started#installation\">MDN: Vue.js - Installation</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token function\">npm</span> init vue@latest</code></pre></div>\n<h3 id=\"templates\">2. Working with Templates</h3>\n<p>Vue.js has templates to define the structure of a simple application. Templates are written in HTML(or HTML-like syntax) and can include special library-specific directives and expressions to render data. </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Message: {{ msg }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>{{ rawHtml }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li><a href=\"https://vuejs.org/guide/essentials/template-syntax.html\">Vuejs.org: Template Syntax</a></li>\n<li><a href=\"https://vueschool.io/lessons/vuejs-template-syntax-and-expressions\">Vue School: Vue.js Template Syntax and Expressions</a></li>\n</ul>\n<h3 id=\"directives\">3. Vue.js Directives</h3>\n<p>While working with templates, you will come across directives. Directives appear as element attributes specific to Vue.js. They are prefixed with <code class=\"language-text\">v-</code> syntax like the example below. Directives extend templates with logic and additional functionality. The example below the directive <code class=\"language-text\">v-for</code> loops thru the items and render the text for each item inside the div.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item in items<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  {{ item.text }}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li><a href=\"https://vuejs.org/api/built-in-directives.html\">VueJS.org: Directives</a></li>\n<li><a href=\"https://www.codecademy.com/courses/learn-vue-js/lessons/vue-introduction/exercises/directives\">CodeAcademy: Directives 💵</a></li>\n<li><a href=\"https://vuejsdevelopers.com/lessons/understanding-directives-1/1/\">Vuejsdevelopers.com: Understanding Directives</a></li>\n</ul>\n<h3 id=\"data\">4. Data handling and methods</h3>\n<p>Vue.js components have a data object that holds the component’s state, and methods that can be used to manipulate the state. In my opinion, the ability to manage and manipulate data is what makes front-end frameworks interesting. It’s the difference between a simple HTML page and a dynamic site. </p>\n<ul>\n<li><a href=\"https://vuejs.org/api/options-state.html#data\">VueJS.org: Data</a></li>\n<li><a href=\"https://vueschool.io/lessons/vue-methods\">Vue School: Fundamentals - Vue methods</a></li>\n</ul>\n<h3>State management</h3>\n<p>State management is an advance topic related to data and how it drives your application. You can use the data object and other techniques to manage the state of the application. For simple cases that is enough. For more complex applications we should be using state management libraries. These libraries are Vue.js’ answer to the flux pattern libraries ubiquitous to React.js projects.</p>\n<ul>\n<li><a href=\"https://pinia.vuejs.org/introduction.html\">Pinia</a></li>\n<li><a href=\"https://vuex.vuejs.org/\">Vuex</a></li>\n</ul>\n<p>Some articles I’ve read - recommends using <strong>Pinia</strong> over <strong>Vuex</strong>. </p>\n<h3 id=\"computed\">5. Computed Properties</h3>\n<p>Computed properties are calculated based on other data or properties on a page. The contrived example below illustrates what computed properties are used for. The values are automatically “calculated” from the source property, <code class=\"language-text\">store.fruits</code>. When the source property changes the computed value also changes without additional code. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">store</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">fruits</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">'mango'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">//...</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">hasMangoToSell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span>fruits<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mango'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">'Yes'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'No'</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">></span></span>Has mango to sell?<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span>{{ hasMangoToSell }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span>\n  ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The <code class=\"language-text\">hasMangoToSell</code> computed property above is “computed” from the data object property <code class=\"language-text\">store</code>. </p>\n<!--ad-->\n<ul>\n<li><a href=\"https://vuejs.org/guide/essentials/computed.html\">VueJs.org: Computed properties</a></li>\n<li><a href=\"https://vueschool.io/lessons/vuejs-computed-properties\">Vue School: Computed properties</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_computed_properties\">MDN: Using Vue computed properties</a></li>\n</ul>\n<h3 id=\"event-handling\">6. Handling events</h3>\n<p>Event handling is the essence of front-end interactivity. Vue.js allows you to handle events, such as button clicks, form inputs, and more. These events could either be inline or method handlers. </p>\n<p>Inline handlers executed code is defined inside a <code class=\"language-text\">@&lt;event name here>=\"\"</code> attribute. Like so: </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>counter++<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Increment<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>There are {{ counter }} sheep jumping over the fence<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Method handlers on the other hand are defined from the application object itself under the <code class=\"language-text\">methods</code> prop. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>increment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Increment<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>There are {{ counter }} sheep jumping over the fence<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li><a href=\"https://vuejs.org/guide/essentials/event-handling.html\">VueJS.org: Event Handling</a></li>\n<li><a href=\"https://vuejs.org/guide/essentials/forms.html\">VueJS.org: Form Input Bindings</a></li>\n<li><a href=\"https://vueschool.io/lessons/vuejs-user-events\">Vue School: User events</a></li>\n</ul>\n<h2>Wrapping up</h2>\n<p>There are other concepts a Vue.js developer needs to learn of course. I think you will encounter those topics while running through the topics in this list. Advanced topics like components, watchers, and hooks. Feel free to add that to your own learning plan. I am thinking to cover those topics when I start building more complex applications.</p>\n<p>After the list above I plan to explore more advanced topics and start building a project. It is important to practice by building small projects, experimenting with different features, and following tutorials. I think that is still the best way to learn. </p>\n<h2>Bonus</h2>\n<p>Aside from the excellent documentation on Vue.js’ website. I found their <a href=\"https://vuejs.org/tutorial/#step-1\">tutorial</a> page really helpful too. If you like learning ala-FreecodeCamp-style, you can appreciate a similar experience. Same with FreecodeCamp, you are presented with topics on the language accompanied with code problems to solve. I recommend checking it out.</p>\n<h2>My progress so far</h2>\n<p>Below is my where I am in terms of my efforts learning Vue.js.  </p>\n<ol>\n<li><span>Learn Vue.js essential concepts</span> (partial)</li>\n<li>Debugging a VueJS application</li>\n<li>Create a blog application using Vue.js</li>\n<li>Learn Vue-Router</li>\n<li>Build for Production</li>\n</ol>","fields":{"slug":"/2023/newbies_guide_to_learning_vuejs/"},"frontmatter":{"date":"January 14, 2023","title":"Learning Vue: First steps","featured_image":"/blog/viewfinder-unsplash.jpg","tags":["vue","frontend","web-development"]}}},{"node":{"excerpt":"A few issues I found recently for clients were related to accessibility. A few perfectly working user interfaces were not keyboard accessible. Not because they are custom controls nor because the controls were not tabable.","html":"<p>A few issues I found recently for clients were related to accessibility. A few perfectly working user interfaces were not keyboard accessible. Not because they are custom controls nor because the controls were not tabable. <!--more--> But, because the keyboard experience did not match the mouse-only interactions. These user interfaces are confusing, to say the least. </p>\n<p>I solved these issues by using the <code class=\"language-text\">:focus-within</code> psuedo-selector.</p>\n<p>I listed a few of them and the solutions.</p>\n<h2>Table row with hidden buttons</h2>\n<p>Here the developer added an effect that shows the buttons when hovered. The markup is accessible to screen readers but does not look correct for sighted persons that use the keyboard. Accessibility is not just for screenreaders. <a href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-focus-order.html\">Sighted people need to make sense</a> of the page too. </p>\n<style>\n.demo table {\n  min-width: 500px;\n  border-collapse: collapse;\n}\n\n.demo td,\n.demo th {\n  border: none;\n}\n\n.demo td,\n.demo th:not(:first-child) {\n  padding: 1rem 0.8rem;\n  margin: 0;\n  text-align: left;\n}\n\nthead tr {\n  border-bottom: 3px solid #ddd;\n}\n\ntbody {\n  /**\n  * Show buttons on hover and when an element is focused inside the row\n  */\n    border-bottom: 2px solid #ddd;\n}\ntbody tr button {\n  opacity: 0;\n}\ntbody tr:hover {\n  background-color: #ffd57e;\n}\ntbody tr:hover button {\n  opacity: 100%;\n}\n\nbutton {\n  border: none;\n  padding: 0;\n  margin: 0;\n  background: transparent;\n  -webkit-appearance: none;\n  box-shadow: none;\n}\n\n</style>\n<div class=\"demo\">\n<table tabindex=\"0\">\n  <thead>\n    <tr>\n      <th>\n        <div class=\"sr-only\">Checkbox</div>\n      </th>\n      <th>Name</th>\n      <th>Job description</th>\n      <th>\n        <div class=\"sr-only\">Controls</div>\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><input type=\"checkbox\" value=\"1\" name=\"user\"></td>\n      <td>John Doe</td>\n      <td>rocket scientist</td>\n      <td>\n        <button class=\"delete\" aria-label=\"delete\">❌</button>\n        <button class=\"save\"  aria-label=\"save\">💾</button>\n      </td>\n    </tr>\n    <tr>\n      <td><input type=\"checkbox\" value=\"1\" name=\"user\"></td>\n      <td>Adam smith</td>\n      <td>economist</td>\n      <td>\n        <button class=\"delete\" aria-label=\"delete\">❌</button>\n        <button class=\"save\" aria-label=\"save\">💾</button>\n      </td>\n    </tr>\n    <tr>\n      <td><input type=\"checkbox\" value=\"1\" name=\"user\"></td>\n      <td>Jose <rizal></rizal>\n      </td>\n      <td>novelist</td>\n      <td>\n        <button class=\"delete\" aria-label=\"delete\">❌</button>\n        <button class=\"save\" aria-label=\"save\">💾</button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">tabindex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>thead</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Checkbox<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Job description<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Controls<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>thead</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tbody</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>John Doe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>rocket scientist<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>delete<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>delete<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>❌<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>save<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>save<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>💾<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n      ...\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tbody</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Using the mouse, the table above works perfectly well. There is color highlighting and the buttons become visible when the mouse is over a table row. </p>\n<p>If you navigate the table using the keyboard, the experience is not what you will expect. Firstly, you don’t see the highlight color when focused on a row. The worst of it is you will be able to go through all the focusable elements using the keyboard - including the invisible buttons. This is confusing for sighted people using the keyboard. </p>\n<!--ad-->\n<p>Let’s check the style code below. The buttons are invisible by default(<code class=\"language-text\">opacity: 0</code>). When the mouse is over the row (<code class=\"language-text\">:hover</code>), it gets a background color and buttons become visible(<code class=\"language-text\">opacity: 100%</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// SCSS</span>\n\n<span class=\"token selector\">tbody tr </span><span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n  * Show buttons on hover\n  */</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #ffd57e<span class=\"token punctuation\">;</span>\n    <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Solution</h3>\n<p>We can use javascript and add an event handler on the focusable elements that gets triggered whenever any element on the row is focused. With that we can set a class (<code class=\"language-text\">.has-focused-element</code>) that applies the same style above.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> els <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tr input[type=checkbox], tr button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nels<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focus'</span><span class=\"token punctuation\">,</span> onFocus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// etc...</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// SCSS</span>\n\n<span class=\"token selector\">tbody tr </span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token comment\">/**\n  * Show buttons on hover\n  */</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover,\n  <span class=\"token parent important\">&amp;</span>.has-focused-element </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #ffd57e<span class=\"token punctuation\">;</span>\n    <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The changes above will work but uneccessary. We should try to solve any style problems inside the CSS first before reaching for Javascript.</p>\n<p>Another solution is to use <code class=\"language-text\">:focus-within</code> where the <code class=\"language-text\">:hover</code> psuedo-selector is defined. </p>\n<blockquote>\n<p>The :focus-within CSS pseudo-class matches an element if the element or any of its descendants are focused. In other words, it represents an element that is itself matched by the :focus pseudo-class or has a descendant that is matched by :focus. (This includes descendants in shadow trees.) - <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-within\">MDN</a></p>\n</blockquote>\n<p>“Focus-within” psuedo selector can match elements that has elements that gets focused. In this case, we have the <code class=\"language-text\">checkbox</code> and <code class=\"language-text\">button</code> elements. When these elements gets focus, we can apply the same style as if we hovered the pointer on the table row. This will work without adding a line of javascript. </p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// SCSS</span>\n\n<span class=\"token selector\">tbody tr </span><span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n  * Show buttons on hover and when an element is focused inside the row\n  */</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover,\n  <span class=\"token parent important\">&amp;</span>:focus-within </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #ffd57e<span class=\"token punctuation\">;</span>\n    <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Solution in action</h3>\n<p>Here’s the same table using <code class=\"language-text\">:focus-within</code>,</p>\n<style>\n\n.fix tbody tr:hover, .fix tbody tr:focus-within {\n  background-color: #ffd57e;\n}\n.fix tbody tr:hover button, .fix tbody tr:focus-within button {\n  opacity: 100%;\n}\n\n</style>\n<div class=\"demo fix\">\n<table tabindex=\"0\">\n        <thead>\n          <tr>\n            <th>\n              <div class=\"sr-only\">Checkbox</div>\n            </th>\n            <th>Name</th>\n            <th>Job description</th>\n            <th>\n              <div class=\"sr-only\">Controls</div>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td><input type=\"checkbox\" value=\"1\" name=\"user\"></td>\n            <td>John Doe</td>\n            <td>rocket scientist</td>\n            <td>\n              <button class=\"delete\">❌</button>\n              <button class=\"save\">💾</button>\n            </td>\n          </tr>\n          <tr>\n            <td><input type=\"checkbox\" value=\"1\" name=\"user\"></td>\n            <td>Adam smith</td>\n            <td>economist</td>\n            <td>\n              <button class=\"delete\">❌</button>\n              <button class=\"save\">💾</button>\n            </td>\n          </tr>\n          <tr>\n            <td><input type=\"checkbox\" value=\"1\" name=\"user\"></td>\n            <td>Jose <rizal></rizal>\n            </td>\n            <td>novelist</td>\n            <td>\n              <button class=\"delete\">❌</button>\n              <button class=\"save\">💾</button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n</div>\n<p>A user can navigate through the focusable elements in the row and see the “hover” effect. </p>\n<!--ad-->\n<h2>Card with like(♥) button</h2>\n<p>Here’s another user interface with a hover effect but no keyboard focus effect. Hovering over any part of the card applies a heart icon on top of the image indicating to the user that they can make the image their favorite. This card UI is part of an image gallery.</p>\n<style>\n\n.card {\n  min-width: 250px;\n  max-width: 250px;\n  overflow: hidden;\n  position: relative;\n  box-shadow: 1px 1px 4px 0 rgba(0 0 0 / 0.2), 2px 2px 8px 1px rgba(0 0 0 / 0.2);\n  padding: 15px 15px 10px 15px;\n  border-radius: 6px;\n}\n.card img {\n  width: 100%;\n  transition: opacity 0.35s ease-in-out;\n  margin: 0;\n}\n.card span {\n  font-size: 9rem;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  color: #ddd;\n  transform: translate(-50%, -50%);\n  text-decoration: none;\n  opacity: 0;\n}\n.card:hover img, .fix .card:focus-within img {\n  opacity: 70%;\n  background-color: #000;\n}\n.card:hover span, .fix .card:focus-within span {\n  opacity: 100%;\n}\n.card:hover button, .fix .card:focus-within button {\n  opacity: 0;\n}\n.fix .card:focus-within {\n  outline: 4px dashed #555;\n  outline-offset: -5px;\n}\n.card button {\n  position: absolute;\n  bottom: 20px;\n  right: 20px;\n  color: #ddd;\n  font-size: 1.5rem;\n  padding: 2px 4px;\n}\n\n</style>\n<div class='demo' tabindex=\"0\">\n<div class=\"card\">\n    <img src=\"https://images.unsplash.com/photo-1671026423293-7adf6a6abd13?crop=entropy&amp;cs=tinysrgb&amp;fm=jpg&amp;ixid=MnwzMjM4NDZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NzMwNTEwNzE&amp;ixlib=rb-4.0.3&amp;q=80\" alt=\"\">\n    <span>♥</span>\n    <button class=\"like\">♥</button>\n  </div>\n</div>\n<p>Works when using the mouse but when navigating using the keyboard - again the user experience fails. It lacks a good keyboard experience. When you tab through the card, the button gets focused - which is fine - but it’s not the effect we wanted.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>card<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://images.unsplash.com/photo-1671026423293-7adf6a6abd13?crop=entropy&amp;cs=tinysrgb&amp;fm=jpg&amp;ixid=MnwzMjM4NDZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NzMwNTEwNzE&amp;ixlib=rb-4.0.3&amp;q=80<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>♥<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button-group<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>like<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>♥<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// scss</span>\n\n<span class=\"token selector\">.card </span><span class=\"token punctuation\">{</span>\n  \n  <span class=\"token comment\">// ...</span>\n  \n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover </span><span class=\"token punctuation\">{</span>\n    <span class=\"token selector\">img </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 70%<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\">span </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I know some will ask why can we not just add <code class=\"language-text\">tabindex=0</code> on the card and add a <code class=\"language-text\">:focus</code> style. Yeah that could work. But, we would end up with two focus steps(one for the card and the heart (♥) button) instead of just the button. We don’t want that.</p>\n<h3>Solution</h3>\n<p>Again <code class=\"language-text\">:focus-within</code> to the rescue. We go back to the style code and look for <code class=\"language-text\">:hover</code> styling. </p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// scss</span>\n<span class=\"token comment\">/**\n  * Make heart cover image visible when button is focused\n  */</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover,\n  <span class=\"token parent important\">&amp;</span>:focus-within </span><span class=\"token punctuation\">{</span>\n    <span class=\"token selector\">img </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 70%<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\">span </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\">button </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The changes above should apply the same experience for both mouse and keyboard users. </p>\n<p>As a rule, we also want to add an outline when the card is focused using the keyboard. Similar to what we get when we focus any interactive control with the keyboard.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// scss</span>\n<span class=\"token selector\">.card </span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  \n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:focus-within </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> 4px dashed #333<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">outline-offset</span><span class=\"token punctuation\">:</span> 2px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Solution in action</h3>\n<p>Use the <kbd>Tab</kbd> key to navigate through the card. When the button gets focused the card activates the hover effect we defined earlier. Now both hover and focus events show the same effect.</p>\n<div class='demo fix' tabindex=\"0\">\n<div class=\"card\">\n    <img src=\"https://images.unsplash.com/photo-1671026423293-7adf6a6abd13?crop=entropy&amp;cs=tinysrgb&amp;fm=jpg&amp;ixid=MnwzMjM4NDZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NzMwNTEwNzE&amp;ixlib=rb-4.0.3&amp;q=80\" alt=\"\">\n    <span>♥</span>\n    <button class=\"like\">♥</button>\n  </div>\n</div>\n<!--ad-->\n<h2>Apply effects when buttons are hovered</h2>\n<p>In this example we have an image with a color swatch control. When you hover over any of the colors, the corresponding color value is blended with the image. This works correctly with the mouse but with the keyboard. We want to be able to get the same effect on the image when any of the buttons gets focused using the keyboard.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>picker<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>picker-group<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>picker-item<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">--selected-color</span><span class=\"token punctuation\">:</span> #912424</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>red<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>picker-item<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">--selected-color</span><span class=\"token punctuation\">:</span> #3566b2</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>blue<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>picker-item<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">--selected-color</span><span class=\"token punctuation\">:</span> #226642</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>green<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// scss</span>\n<span class=\"token selector\">.picker </span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// ...</span>\n  \n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url</span><span class=\"token punctuation\">(</span><span class=\"token property\">https</span><span class=\"token punctuation\">:</span><span class=\"token comment\">//images.unsplash.com/photo-1552944150-6dd1180e5999?crop=entropy&amp;cs=tinysrgb&amp;fm=jpg&amp;ixid=MnwzMjM4NDZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NzMwNTkzNzg&amp;ixlib=rb-4.0.3&amp;q=80);</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--selected-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover </span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// blend image with color when button is hovered or focused</span>\n    <span class=\"token property\">background-blend-mode</span><span class=\"token punctuation\">:</span> hard-light<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For this one we have some scripting to setup the hover(mouseover) effect. We try set the CSS variable <code class=\"language-text\">--selected-color</code> as the picker background color. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> picker <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".picker\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> buttons <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".picker-item\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">onHighlight</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">;</span>\n  picker<span class=\"token punctuation\">.</span>style <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>cssText<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">onRemoveColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  picker<span class=\"token punctuation\">.</span>style <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbuttons<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">button</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseover\"</span><span class=\"token punctuation\">,</span> onHighlight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npicker<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseout\"</span><span class=\"token punctuation\">,</span> onRemoveColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<style>\n.picker {\n  position: relative;\n  display: flex;\n  width: 300px;\n  height: 300px;\n  overflow: hidden;\n  background-image: url(https://images.unsplash.com/photo-1552944150-6dd1180e5999?crop=entropy&cs=tinysrgb&fm=jpg&ixid=MnwzMjM4NDZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NzMwNTkzNzg&ixlib=rb-4.0.3&q=80);\n  background-size: cover;\n  background-position: 20%;\n  border-radius: 4px;\n  background-color: var(--selected-color);\n  transition: background-color 0.35s ease-in-out;\n  flex: 1;\n}\n.picker:hover, .picker:focus-within {\n  background-blend-mode: hard-light;\n}\n.picker-item {\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  border: 2px solid #ededed;\n  background-color: var(--selected-color);\n  cursor: pointer;\n}\n.picker-group {\n  position: absolute;\n  bottom: 8px;\n  left: 8px;\n}\n</style>\n<p>This is how it looks. My blog software does not run javascript so the UI below only shows a snapshot of one of the button focused. I will include a Codepen demo later in this page so you can interact with it. </p>\n<div class='demo'>\n  <div class=\"picker\" style=\"--selected-color: #912424; background-blend-mode: hard-light;\">\n    <div class=\"picker-group\" >\n      <button class=\"picker-item\" style=\"--selected-color: #912424; outline: 2px dashed #fff;\"><span class=\"sr-only\">red</span></button>\n      <button class=\"picker-item\" style=\"--selected-color: #3566b2\"><span class=\"sr-only\">blue</span></button>\n      <button class=\"picker-item\" style=\"--selected-color: #226642\"><span class=\"sr-only\">green</span></button>\n    </div>\n  </div>\n</div>\n<p>Again the issue here is that the interface does not work well with the keyboard for sighted people. It’s screen reader friendly but the experience is lacking when not using the mouse. </p>\n<p>This is a bit more complicated so we leverage <code class=\"language-text\">:focus-within</code> in conjunction with a <code class=\"language-text\">focus</code> event handler to set the color and blend style when using the keyboard. </p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// SCSS</span>\n\n<span class=\"token selector\">.picker </span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover,\n  <span class=\"token parent important\">&amp;</span>:focus-within </span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// blend image with color when button is hovered or focused</span>\n    <span class=\"token property\">background-blend-mode</span><span class=\"token punctuation\">:</span> hard-light<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ...</span>\n\nbuttons<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">button</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseover\"</span><span class=\"token punctuation\">,</span> onHighlight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"focus\"</span><span class=\"token punctuation\">,</span> onHighlight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// trigger highlight script when buttons are focused</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//...</span></code></pre></div>\n<p>Using the solution above, we get a better experience without a lot of extra code. See the solution in action in the Codepen below. </p>\n<h2>Full solution</h2>\n<p>Here are all three solutions in action. Check out the final code to understand the solutions in their entirety. </p>\n<p><a href=\"https://codepen.io/chrisbautista/pen/bGjBZzM\"><div><iframe \n        height='400'\n        title='chrisbautista embedded pen' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/bGjBZzM/?height=400&theme-id=dark&default-tab=result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<h2>Wrapping up</h2>\n<p>Sometimes as web developers, it is great to work on problems that improve the user experience for a variety of people. For all the tools in our disposal its really great to know that adding a single psuedo-selector like <code class=\"language-text\">:focus-within</code> could be so useful. Without it, we might have ended up with some complicated solutions or worst case have to start from scratch. </p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-within\">MDN: focus-within</a></li>\n<li><a href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-focus-order.html\">WCAG: Focus order</a></li>\n<li><a href=\"https://www.w3.org/TR/2012/NOTE-UNDERSTANDING-WCAG20-20120103/navigation-mechanisms-focus-visible.html\">WCAG: Focus visible</a></li>\n</ul>","fields":{"slug":"/2023/fix_accessibility_with_focus_within/"},"frontmatter":{"date":"January 08, 2023","title":"Fix accessibility using focus-within","featured_image":"/blog/devin-avery-focus-unsplash.jpg","tags":["accessibility","css","frontend"]}}},{"node":{"excerpt":"I am the most undisciplined person I know. I make resolutions every year - and every year - I fall short. But I am stubborn too. So this year, I have decided to be a better programmer and work on my journey in this blog. I am starting with my new year’s resolution as a front-end developer.","html":"<!--\n[Inspired by math](https://matt.might.net/articles/programmers-resolutions/)\n\nResolution\n\n1. Learn 5 new frontend technologies\n2. Focus on web accessibility \n3. Streamline workflow \n4. Create 1 blog post per week\n5. Stay healthy \n-->\n<p>I am the most undisciplined person I know. I make resolutions every year - and every year - I fall short. But I am stubborn too. So this year, I have decided to be a better programmer and work on my journey in this blog. I am starting with my new year’s resolution as a front-end developer. <!--more--></p>\n<p>To keep me honest I have contracted my wife to check on my progress every month for each resolution. I made it a mission where I get a reward for accomplising my goal and punishment if I fail.  I got the idea from this list of <a href=\"https://www.makeuseof.com/strict-commitment-apps-that-force-you-working/\">commitment apps</a>. My wife promised to make it really hurt financially if I fail. That should keep me on my toes.😁</p>\n<p>Inspired by <a href=\"https://matt.might.net/articles/programmers-resolutions/\">Matt’s programmers resolutions</a> here are my five new year resolutions. </p>\n<ol>\n<li><a href=\"#frameworks\">Learn three(3) new front-end frameworks</a></li>\n<li><a href=\"#accessibility\">Focus on web accessibility</a></li>\n<li><a href=\"#blog\">Create one (1) blog post per week</a></li>\n<li><a href=\"#stayhealthy\">Stay healthy</a> </li>\n<li><a href=\"#workflow\">Streamline workflow</a> </li>\n</ol>\n<h2 id=\"frameworks\">1. Learn three (3) new front-end frameworks </h2>\n<p>This year was a good year for frameworks. <a href=\"https://tsh.io/state-of-frontend/#frameworks\">More and more developers are using front-end frameworks</a>. I aim to learn at least three(3) new front-end frameworks. I have been working primarily with ReactJS. I can not say I am an expert. But I am proficient enough to earn a living. This year to start, I want the reach the same proficiency in Vue, Svelte, and NextJS. I have chosen these three because they are well documented and I found a great amount of community support. </p>\n<p>By the end of this year, I should have the following for each language;</p>\n<ul>\n<li>Personal project on github</li>\n<li>Blog post on how I made the project</li>\n<li>Cheatsheet I can share on this blog </li>\n</ul>\n<!--ad-->\n<h2 id=\"accessibility\">2. Focus on web accessibility </h2>\n<p>This year I have been interested with web accessibility. I thought I had been doing a great job of making my projects inclusive. I was dead wrong. This year I will work on projects that improve accessibility, champion accessibility in our company, and share my experiences with my peers.</p>\n<h2 id=\"blog\">3. Create one (1) blog post per week</h2>\n<p>I started blogging to force myself to share the things that interest me. Sharing is my incentive to explore new things. I have been really lax this past few years. I used personal stuff as an excuse when really its my lack of discipline is the issue. This past few months I have been blogging, I realized I learn more when creating an article than I do at studying intentionally. Blogging forces me to research and dig deep into the topic than when I am just solving a specific problem. This year I will try to publish at least one(1) post a week. </p>\n<h2 id=\"stayhealthy\">4. Stay healthy</h2>\n<p>From Matt’s list of programmer’s resolution, this one resonated with me a lot. For most who work as a developer keeping healthy is a hard battle. This year I want to do what I can to be healthy. Starting with the following habits;</p>\n<ul>\n<li>Less caffeine</li>\n<li>Go out for fresh air at least once a day</li>\n<li>Run twice a week</li>\n<li>Set aside some time to be offline once a day</li>\n</ul>\n<h2 id=\"workflow\">5. Streamline workflow</h2>\n<p>To accomplish the previous resolutions, I need to be more efficient. I have not explored automating some of my tasks and been working with the same toolset from three years ago. This year I will explore streamlining my workflow.  </p>\n<p>Tasks like; </p>\n<ul>\n<li>Choosing a new machine for development;</li>\n<li>Cleaning up my IDE plugins;</li>\n<li>Using design software</li>\n<li>Uncluttering my workstation</li>\n<li>Exploring new tools</li>\n</ul>\n<p>I will probably figure out more things to do later. I will keep you updated. </p>\n<p>So that’s it! I have listed my new year’s resolution as a programmer. What’s yours? </p>\n<p>Happy new year to all! 🎉🎉🎉🎉🎉</p>","fields":{"slug":"/2022/programmers_resolution_2023/"},"frontmatter":{"date":"December 31, 2022","title":"Programmer's New Year Resolution","featured_image":"/blog/boliviainteligente-unsplash.jpg","tags":["web-development","personal","frontend"]}}},{"node":{"excerpt":"React and accessibility I love ReactJs. I learned late in my career as there were not a lot of opportunities to do so. When I finally found a suitable situation to explore ReactJs for a previous employer. I jumped on it and picked it up quickly. It was weird in the beginning but it became quite natural in the end. Now I mainly work with ReactJS in most of my projects.","html":"<h2>React and accessibility</h2>\n<p>I love ReactJs. I learned late in my career as there were not a lot of opportunities to do so. When I finally found a suitable situation to explore ReactJs for a previous employer. I jumped on it and picked it up quickly. It was weird in the beginning but it became quite natural in the end. Now I mainly work with ReactJS in most of my projects. <!--more--></p>\n<p>One of the great things about working with ReactJs is working with JSX. ReactJS does not understand JSX - we achieve this with Babel. Babel transpile JSX to something ReactJS can understand. Anyhow, JSX is almost like HTML with some differences. And because it looks like HTML markup it becomes really easy to learn. But, and it’s a big but, making it easy to learn does not save developers from issues related to accessibility. Some patterns that are perfectly valid and working in a way in ReactJS does not necessarily accessible.</p>\n<p>For example, when using labels in forms </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">First Name </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>\n    isEditing  \n    <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    : data.FirstName\n  }\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">);</span></code></pre></div>\n<p>When not editing, the input element identified <code class=\"language-text\">id=firstName</code> is not available. So the browser will ignore the label and but still render it. This is confusing to screenreaders. The markup above looks contrived but you will be suprised how often I see this. We can easily fix this by keeping the input element available to the browser but hidden to the user when not editing. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">First Name </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>isEditing<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">);</span></code></pre></div>\n<p>The outcome is similar to the former but the current markup is more accessible. Screenreader-friendly, in short.</p>\n<p>I wanted to understand how best to tackle accessibility for custom components in React. With some rudimentary understanding of ReactJS. I proceeded with my education with a custom button. I know I’ve always said to always use semantic tags when possible. That is still true. But to understand what a button should have to make it accessible. Learning to make a custom button seems a good exercise to learn. Not just what ARIA attributes to put in but what I should be looking for when working react and keeping it accessible. Things like styling and visual feedback when buttons are activated etc.</p>\n<h2>Custom Button</h2>\n<p>I started with a simple ReactJS component. A <code class=\"language-text\">span</code> wrapper element with an onclick event.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token keyword\">function</span> <span class=\"token function\">CustomButton</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restProps <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>restProps<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// usage</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button clicked'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomButton</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Click me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CustomButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To simplify, we will assume that the button will always have text, passed as a <code class=\"language-text\">children</code> prop. </p>\n<p>The markup for the component above has issues. Firstly, since it’s a span it needs some styling to make it look like a button. It really depends on how you want to render a button but for our purpose, I will stick to a classic raised button style. </p>\n<h3>Button styling</h3>\n<p>We add some css to handle hover and clicked event styling.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">/* SCSS */</span>\n\n<span class=\"token selector\">.custom-button </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #f1f2f3<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 140px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> inset -3px -3px 6px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>#000<span class=\"token punctuation\">,</span> 0.15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    1px 1px 2px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>#000<span class=\"token punctuation\">,</span> 0.15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 2px 2px 4px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>#000<span class=\"token punctuation\">,</span> 0.15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0.35rem 0.5rem<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:active </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> inset 3px 3px 6px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>#000<span class=\"token punctuation\">,</span> 0.15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      -1px -1px 2px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>#000<span class=\"token punctuation\">,</span> 0.15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> -2px -2px 4px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>#000<span class=\"token punctuation\">,</span> 0.15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:focus-visible, <span class=\"token parent important\">&amp;</span>:hover </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> 4px dashed orange<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!--ad-->\n<h4>Selectors</h4>\n<p>The <code class=\"language-text\">:active</code> selector is applied when the button is clicked. <code class=\"language-text\">:hover</code> is applied when the mouse is over the button. Finally, <code class=\"language-text\">:focus-visible</code> will ensure that the button gets a visible outline when the button is navigated to using the keyboard. </p>\n<hr>\n<p>Our custom button looks like a proper button now with drop shadow and on press styling. When I click the button it writes “button clicked”. For a button to be accessible it should be keyboard accessible. Let’s try navigating to the button using <kbd>Tab</kbd> (and <kbd>Shift</kbd> + <kbd>Tab</kbd>) key in the Codepen demo below. </p>\n<p><a href=\"https://codepen.io/chrisbautista/pen/ExpaJMP\"><div><iframe \n        height='400'\n        title='chrisbautista embedded pen' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/ExpaJMP/?height=400&theme-id=dark&default-tab=result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<p>As you can see, we are unable to focus the button. Next problem in our custom button we need to tackle is making it operable using the keyboard.</p>\n<h3>Keyboard accessible</h3>\n<p>The <a href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/keyboard-operation-keyboard-operable.html\">WCAG guideline 2.1: Keyboard</a> criterion requires interactive content(such as a button) to be operable using the keyboard. This is for users that can not use a mouse like people who are blind or with issues that make them prefer the keyboard. Simply, anything you can operate with a mouse should be available for a keyboard user too.</p>\n<h4>Tabindex</h4>\n<p>We need to be able to navigate to the button. What we need is to add tabindex so that it becomes focusable. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">CustomButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restProps <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> \n      <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>custom-button<span class=\"token punctuation\">\"</span></span> \n      <span class=\"token attr-name\">tabIndex</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span></span> \n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span> \n      <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>restProps<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cool!😎. Now it iss focusable. Next, press <kbd>Enter</kbd> key to trigger the button. If you notice nothing happened, that is because we lack a keyboard event handler! </p>\n<h4>Keydown handler</h4>\n<p>We need a <code class=\"language-text\">KeyDown</code> handler that runs the same operation as if it was clicked like a native button. And like how a native button works we trigger the designated action with <kbd>Enter</kbd> and <kbd>Spacebar</kbd> keys.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">CustomButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restProps <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onKeyDown</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'Enter'</span> or e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> \n      <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>custom-button<span class=\"token punctuation\">\"</span></span> \n      <span class=\"token attr-name\">tabIndex</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span></span> \n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span> \n      <span class=\"token attr-name\">onKeyDown</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onKeyDown<span class=\"token punctuation\">}</span></span> \n      <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>restProps<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let’s see how it works so far, Use the <kbd>Tab</kbd> key to navigate and activate the button,</p>\n<p><a href=\"https://codepen.io/chrisbautista/pen/gOjbJLB\"><div><iframe \n        height='400'\n        title='chrisbautista embedded pen' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/gOjbJLB/?height=400&theme-id=dark&default-tab=result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<h5>Keydown styling</h5>\n<p>Nice, the action is activated with either the <kbd>Enter</kbd> or <kbd>Spacebar</kbd> key works. There is another issue. None of the previous styles we added earlier will apply when we activate the custom button using the keyboard. We don’t have a selector for that so we need to use class selectors.</p>\n<p>Since this is a state of the button, we need to provide code so that the component can track it internally.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">CustomButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restProps <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isPressed<span class=\"token punctuation\">,</span> setIsPressed<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onKeyDown</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\"Enter\"</span> <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setIsPressed</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// when pressed</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onKeyUp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\"Enter\"</span> <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setIsPressed</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// when keyboard released a key</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We need to tell the button when to apply the “button pressed” styling. We accomplish that by setting a className, <code class=\"language-text\">custom-button-pressed</code>. We can recyle the <code class=\"language-text\">:active</code> styling defined earlier. </p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">.custom-button </span><span class=\"token punctuation\">{</span>\n  \n  <span class=\"token comment\">//...*</span>\n\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:active,\n  <span class=\"token parent important\">&amp;</span>-pressed </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> inset 3px 3px 6px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>#000<span class=\"token punctuation\">,</span> 0.15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      -1px -1px 2px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>#000<span class=\"token punctuation\">,</span> 0.15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> -2px -2px 4px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>#000<span class=\"token punctuation\">,</span> 0.15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, we apply/remove the class name whenever the state changes.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">let</span> classNames <span class=\"token operator\">=</span> <span class=\"token string\">\"custom-button\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    classNames <span class=\"token operator\">+=</span> <span class=\"token string\">\" custom-button-pressed\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span>\n      <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>classNames<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">tabIndex</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onKeyDown</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onKeyDown<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onKeyUp</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onKeyUp<span class=\"token punctuation\">}</span></span>\n      <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>restProps<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Voila, the button style when activated with the keyboard works. </p>\n<p><a href=\"https://codepen.io/chrisbautista/pen/WNKQWxj\"><div><iframe \n        height='400'\n        title='chrisbautista embedded pen' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/WNKQWxj/?height=400&theme-id=dark&default-tab=result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<h3>Screen reader</h3>\n<p>Our custom button is looking great! To recap, we styled the button and made it operable with both the mouse and the keyboard. It looks shipable, right? </p>\n<p>Not yet.</p>\n<p>If you use a screen reader now, you will notice that the custom button is treated as a clickable div - NOT a button. Since we only made the span look and act like a button. The browser does not tell the screen reader that we’ve made a button. It still thinks this is a clickable div. We add markup to tell the browser what to expect.</p>\n<h4>Role=button</h4>\n<p>To tell the browser that we have a button we assign it a <code class=\"language-text\">role</code> of <code class=\"language-text\">button</code>; Simple enough, right?</p>\n<blockquote>\n<p>ARIA roles provide semantic meaning to content, allowing screen readers and other tools to present and support interaction with object in a way that is consistent with user expectations of that type of object. </p>\n</blockquote>\n<p>I mentioned before we should be using <a href=\"/2022/five_steps_to_improve_accessibility/\">semantic tags</a>. The browser readily understands the behavior and information about semantic elements telling assistive technologies(like a screenreader) what to expect. This is already baked into the semantic element. We can just use it straight away. On the other hand, our custom button needs our help providing that information to the browser. Setting the role turns our custom button into a semantic button element.</p>\n<p>Test the next demo with a screen reader.</p>\n<p><a href=\"https://codepen.io/chrisbautista/pen/BaPoEbw\"><div><iframe \n        height='400'\n        title='chrisbautista embedded pen' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/BaPoEbw/?height=400&theme-id=dark&default-tab=result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<blockquote>\n<p>Install a screenreader</p>\n<ul>\n<li><a href=\"https://www.nvaccess.org/\">NVDA</a> for windows </li>\n<li><a href=\"https://www.apple.com/voiceover/info/guide/_1121.html\">VoiceOver</a> for Macs</li>\n<li><a href=\"https://wiki.gnome.org/Projects/Orca\">ORCA</a></li>\n</ul>\n</blockquote>\n<h2>React hook: useButton</h2>\n<p>I like React hooks. It is great for reusing functionality. Our custom button is great but we are stuck with a span element. We can change this in several ways. My favorite is moving the component behavior and state in a React hook. Once we’ve moved the behavior out of the custom button. We don’t need the custom component anymore. We can directly apply the props to any element we want to make into a button.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token constant\">KEY</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">Enter</span><span class=\"token operator\">:</span> <span class=\"token string\">'Enter'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">Spacebar</span><span class=\"token operator\">:</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> className <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isPressed<span class=\"token punctuation\">,</span> setIsPressed<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onKeyDown</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token constant\">KEY</span><span class=\"token punctuation\">.</span>Enter <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token constant\">KEY</span><span class=\"token punctuation\">.</span>Spacebar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setIsPressed</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onKeyUp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token constant\">KEY</span><span class=\"token punctuation\">.</span>Enter <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token constant\">KEY</span><span class=\"token punctuation\">.</span>Spacebar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsPressed</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    isPressed<span class=\"token punctuation\">,</span> <span class=\"token comment\">// tells if the button is pressed</span>\n    <span class=\"token literal-property property\">a11yProps</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// props that tell the browser this is a button </span>\n      <span class=\"token literal-property property\">tabIndex</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">role</span><span class=\"token operator\">:</span> <span class=\"token string\">\"button\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">eventProps</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// event handlers </span>\n      onClick<span class=\"token punctuation\">,</span>\n      onKeyDown<span class=\"token punctuation\">,</span>\n      onKeyUp\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// usage</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isPressed<span class=\"token punctuation\">,</span> a11yProps<span class=\"token punctuation\">,</span> eventProps <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> onClick <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> className <span class=\"token operator\">=</span> <span class=\"token string\">\"custom-button\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    className <span class=\"token operator\">+=</span> <span class=\"token string\">\" custom-button-pressed\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//...</span>\n  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>a11yProps<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>eventProps<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    Click Me\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n\n\n  <span class=\"token comment\">//...</span></code></pre></div>\n<p><a href=\"https://codepen.io/chrisbautista/pen/poZjmNG\"><div><iframe \n        height='400'\n        title='chrisbautista embedded pen' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/poZjmNG/?height=400&theme-id=dark&default-tab=result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<p>For the <code class=\"language-text\">a11yProps</code>, we only needed <code class=\"language-text\">tabIndex</code> and <code class=\"language-text\">role=button</code>.</p>\n<h3>Extending the hook</h3>\n<p>We can extend useButton with other ARIA props for various use cases e.g. a toggle button. A toggle button keeps its <code class=\"language-text\">isPressed</code> state until triggered again. Using <code class=\"language-text\">aria-pressed</code>, we can keep the state set for the browser’s benefit. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// usage</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isPressed<span class=\"token punctuation\">,</span> a11yProps<span class=\"token punctuation\">,</span> eventProps <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> onClick <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> className <span class=\"token operator\">=</span> <span class=\"token string\">\"custom-button\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    className <span class=\"token operator\">+=</span> <span class=\"token string\">\" custom-button-pressed\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> newA11yProps <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>a11Props<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'aria-pressed'</span><span class=\"token operator\">:</span> isPressed<span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'aria-label'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Toggle'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//...</span>\n  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>newA11yProps<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>eventProps<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle-notch<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n\n\n  <span class=\"token comment\">//...</span></code></pre></div>\n<p>Also, thrown in <code class=\"language-text\">aria-label</code> to the previous code to fix the lack of visible text.</p>\n<h2>Wrapping up</h2>\n<p>To make an accessible custom button component we need a few things;</p>\n<ul>\n<li>CSS to simulate a button state from unpressed, focused, and when activated.</li>\n<li>Event handlers not just for the mouse but for the keyboard as well.</li>\n<li>ARIA to change the semantic meaning of an element to a button.</li>\n</ul>\n<p>With the <code class=\"language-text\">useButton</code> hook we can extract the learnings from this exercise into a reusable function and apply it anywhere we need a custom button element. </p>","fields":{"slug":"/2022/custom_button-a_study_on_react_accessibility/"},"frontmatter":{"date":"December 19, 2022","title":"React Custom button: a study on accessibility","featured_image":"/blog/daniel-ali-ju1yFZkrxVg-unsplash.jpg","tags":["web-development","reactjs","accessibility"]}}},{"node":{"excerpt":"Developing with accessibility in mind requires knowledge of WCAG rules and good techniques. These techniques boils down to remembering good accessbility patterns in code. Linters are good at discerning less ideal patterns and provide hints on how to fix them. Before I used to think linters are optional for developers. But now I don’t think I can work without them. Using a good IDE linter will help making sure your code follows accessibility best practices and in turn make you more productive.","html":"<!--\n    Angle:\n\n    Aid in making sure code is acessible\n    Find patterns that are against accessibility rules\n    Provide sufficient techniques in code\n    Avoid accessibility issues in code\n\n    - Webhint https://marketplace.visualstudio.com/items?itemName=webhint.vscode-webhint\n\n    - Axe-Linter https://marketplace.visualstudio.com/items?itemName=deque-systems.vscode-axe-linter\n\n    - Web Accessibility https://marketplace.visualstudio.com/items?itemName=MaxvanderSchee.web-accessibility\n\n    - Eslint with jsx-a11y https://www.npmjs.com/search?ranking=popularity&q=eslint%20a11y\n\n    - SonarLint https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarlint-vscode\n\n    - Bonus: ErrorLens https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens\n-->\n<p>Developing with accessibility in mind requires knowledge of WCAG rules and good techniques. These techniques boils down to remembering good accessbility patterns in code. Linters are good at discerning less ideal patterns and provide hints on how to fix them. Before I used to think linters are optional for developers. But now I don’t think I can work without them. Using a good IDE linter will help making sure your code follows accessibility best practices and in turn make you more productive.</p>\n<!--more-->\n<blockquote>\n<p>Web accessibility involves following certain design principles which ensure that people who experience difficulties or limitations have the same or a similar experience as those who do not. - <a href=\"https://blog.hubspot.com/website/web-accessibility\">Hubspot</a></p>\n</blockquote>\n<p>In the example below the linter should be able to recognize that the button tag is missing a visible label.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>save.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>responsive<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The code above is problematic for screenreaders because it does not have any text to describe what action the button is supposed to do.  I have seen a lot of HTML markup that forgets this simple rule. A linter would have caught this before even going into production.</p>\n<p>Here is the same code with a linter</p>\n<img src=\"/blog/code-with-linter.png\"  alt=\"Code with linter warning\" class=\"no-margin\">\n<p>Visual Studio Code have plugins that help coders make their code pass accessibility checks.</p>\n<p>Here are the top 5 plugins I use:</p>\n<h2>1. <a href=\"https://marketplace.visualstudio.com/items?itemName=deque-systems.vscode-axe-linter\">Axe accessibility linter</a></h2>\n<p><strong>Axe</strong> is a leader in accessibility testing and tooling. They built <a href=\"https://github.com/dequelabs/axe-core\">axe-core</a> which powers axe-linter. It is easy to install and no configuration needed. You can start enjoying the benefits of realtime code accessibility checks.</p>\n<p>Its pre-configured to check the following file extensions:</p>\n<ul>\n<li>React (.js, .ts, .jsx, .tsx)</li>\n<li>HTML (.htm, .html)</li>\n<li>Markdown (.md, .markdown)</li>\n</ul>\n<p>The great thing about axe-linter is you can click a link in the hint. The linked page will explain the issue, why its relevant and how to fix it.</p>\n<img src=\"/blog/vsce-example.png\" alt=\"Axe linter\">\n<!--ad-->\n<h2>2. <a href=\"https://webhint.io/docs/user-guide/extensions/vscode-webhint/\">Webhint</a></h2>\n<blockquote>\n<p>Webhint helps you improve your site’s accessibility, speed, cross-browser compatibility, and more by checking your code for best practices and common errors. - <a href=\"https://webhint.io/\">Webhint</a></p>\n</blockquote>\n<p><strong>Webhint.io</strong> is a tool that looks for a suite of website best practices. These best practices include accessibility, website performance, security, etc. The <a href=\"https://webhint.io/docs/user-guide/\">command line tool</a> will scan the site provided and return a report. The webhint visual studio extension, on the other hand, analyzes code while you develop.  (<a href=\"https://webhint.io/docs/user-guide/hints/hint-axe/\">See accessibility hints</a>).</p>\n<p>It also uses axe-core to analyze the code.</p>\n<img src=\"/blog/webhint-vscode.gif\" alt=\"Webhint.io\">\n<h2>3. <a href=\"https://marketplace.visualstudio.com/items?itemName=MaxvanderSchee.web-accessibility\">Web Accessibility</a></h2>\n<p><strong>Website accessiblity</strong> is another Vscode plugin geared at checking for accessibility issues in code. Not as extensive as the first two plugins but I think that is a good thing. Its focus is just accessibility issues nothing else. The hints are simple and does not offer any other options. Perfect for coders who love memory efficient IDEs.</p>\n<img src=\"/blog/web-accessibility.gif\" alt=\"Web accessibility\">\n<h2>4. <a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">Eslint</a> with <a href=\"https://www.npmjs.com/search?ranking=popularity&#x26;q=eslint%20a11y\">jsx-a11y</a></h2>\n<p>Eslint is a bit more complex to install than the previous plugins. If you’ve been developing with the Eslint and Eslint plugin then you will have an easier time.  </p>\n<h3>Installation</h3>\n<p>Run these commands in your project root</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev eslint eslint-plugin-jsx-a11y\n./node_modules/.bin/eslint <span class=\"token parameter variable\">--init</span></code></pre></div>\n<p>You can also do this globally;</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> eslint eslint-plugin-jsx-a11y \neslint <span class=\"token parameter variable\">--init</span></code></pre></div>\n<p>Finally, add jsx-a11y in plugins section of your <code class=\"language-text\">.eslintrc</code></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n\n <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"jsx-a11y\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You might get a popup saying there is an error starting eslint plugin, check the output logs in Vscode for any issues. In most cases, making sure you have the latest nodejs and npm fixes the issue.</p>\n<h2>5. <a href=\"https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarlint-vscode\">SonarLint</a></h2>\n<p>Last but not the least, Sonarlint is a code quality checking tool, like Webhint and Eslint. It checks for a suite of issues in your code not just accessibility. It requires Java runtime to work.</p>\n<p>The accessibility rules are limited to <a href=\"https://rules.sonarsource.com/html/tag/accessibility\">HTML</a> portion of your code.  </p>\n<p>If you are more interested in accessibility checks, I recommend using the other plugins on this list.</p>\n<!--ad-->\n<h2>Bonus: <a href=\"https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens\">Errorlens</a></h2>\n<p>Errorlens is not an accessibility plugin but a support plugin that places the warnings and errors from the linters front and center. Its nice to see the issues directly without having to hover over the squiggly lines or opening the “problems” tab.</p>\n<p>Once you have chosen your accessibility plugin I recommend installing Errorlens to improve visibility of errors and warning messages.</p>\n<p><strong>Without Errorlens</strong></p>\n<img src=\"/blog/without-errorlens.png\" alt=\"Vscode without Errorlens\" class=\"no-margin\">\n<p><strong>With Errorlens</strong></p>\n<img src=\"/blog/vscode-with-errorlens.png\" alt=\"Vscode with Errorlens\" class=\"no-margin\">\n<h2>Wrapping up</h2>\n<p>You still need to have unit and regression tests in place before pushing anything into production but at least the number accessibility issues that get through would be less than just leaving it to CI/CD testing suites. Using proper tools in development makes your work look more professional. It also helps your team. Use these accessibility plugins so you can bake in accessibility into your workflow will less effort.</p>","fields":{"slug":"/2022/five_accessibility_vscode_extensions/"},"frontmatter":{"date":"December 15, 2022","title":"Five Web Accessibility Extensions for Visual Studio Code","featured_image":"/blog/kevin-ku-w7ZyuGYNpRQ-unsplash.jpg","tags":["accessibility","tools","productivity","vscode"]}}},{"node":{"excerpt":"Accessibility is very important. It ensures that anything we make is available to a greater number of people. It is not just about people…","html":"<p>Accessibility is very important. It ensures that anything we make is available to a greater number of people. It is not just about people who use screen readers. </p>\n<p>Web Content Accessibility Guidelines (WCAG) set down a set of rules on how to make websites accessible to people with health conditions or impairments. </p>\n<p>It is hard to meet all the WCAG criterions. It requires understanding of each criterion and the sufficient techniques to meet those requirements. I have been working to improve accessibility in our product. Most of the time I’ve only needed to remember five things.   </p>\n<h2>1. Add labels to interactive elements(buttons, links, input etc.) and descriptive text to images</h2>\n<p>Interactive elements like buttons, links, and form elements should have labels. Images should have alternative text. This ensures assistive technologies are able to get context for these page elements. </p>\n<h3>Buttons</h3>\n<p>Buttons are used to trigger an action. Best practice is to name it to something that describes the action. </p>\n<ul>\n<li>Save</li>\n<li>Download</li>\n<li>Delete</li>\n<li>Add</li>\n<li>etc.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>Save<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>download.svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span> Download this wallpaper <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>There will be instances that you may want to hide the label e.g. icon buttons. You can still be accessible by adding an aria-label. </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">aria-label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Delete<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>delete.svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<!--ad-->\n<h3>Links</h3>\n<p>We use links to provide a way to navigate to other locations on the net. It can be another web page, email address, or a section on the current page. So link labels should convey the purpose or destination.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/home<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> Home <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4>Link to download an image</h4>\n<p>For links with images, you can add an adjacent text or provide the image with alternative text.  </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/wallpaper-wide.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>thumbnail.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Download wallpaper<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n </code></pre></div>\n<h4>Email</h4>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span> Email me to <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mailto:help@codespud.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>get help.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4>Link to new window or tab</h4>\n<p>Sometimes you want to provide a portion of the text to screen readers. Style the text so that they are hidden but visible to screen readers. </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://google.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> \n Go to Google \n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>screenreader-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>(Link opens in a new tab)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.screenreader-only</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span>absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>-10000px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span>auto<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>1px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>1px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span>hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Link text should be unique</h4>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- Do NOT do this! --></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>John Doe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> \n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/user/1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Read Profile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span> \n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Sam Flag<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> \n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/user/2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Read Profile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span> \n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Rick Star<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> \n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/user/4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Read Profile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span> \n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Screen reader users can scan links and may bypass context when they do. The markup above will make it hard for the user to locate the information they are looking for. </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- Better! --></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/user/1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>John Doe <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>screenreader-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>profile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span> \n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/user/2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Sam Flag <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>screenreader-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>profile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span> \n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/user/3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Rick Star <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>screenreader-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>profile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span> \n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Now the screen reader can jump to these links and immediately understand that these are links to user profiles. </p>\n<h3>Form elements</h3>\n<p>Form elements must have labels. This should be a name or short description of the data you are collecting. For radio or checkbox input types, describe the relationship of the invidual items. </p>\n<h4>Explicit labels</h4>\n<p>Using label tag</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstname<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>First name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstname<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstname<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>attending<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>attending<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>attending<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Attend event<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Using aria-label</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Search<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>Search<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span> </code></pre></div>\n<h4>Implicit labels</h4>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>\n Firstname: \n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstname<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4>Checkbox and radio input tags</h4>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>attending<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n Attend event\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fieldset</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>legend</span><span class=\"token punctuation\">></span></span>Choose a fruit to buy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>legend</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fruit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>apple<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span> Apple\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fruit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pineapple<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>Pineapple \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fruit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pear<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span> Pear \n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fieldset</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<!--ad-->\n<h3>Images</h3>\n<p>Alternative text should describe the image. It is useless for impaired users to hear the image filename. </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue-sky.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Beautiful clear summer sky <span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>couple.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Senior couple holding hands<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>Using figure tag</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>figure</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>couple.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>figcaption</span><span class=\"token punctuation\">></span></span>Senior couple holding hands<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>figcaption</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>figure</span><span class=\"token punctuation\">></span></span> </code></pre></div>\n<p>Embedded SVG uses title </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 20 10<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2000/svg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>polygon</span> <span class=\"token attr-name\">points</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>473.486,182.079 310.615,157.952 235.904,11.23 162.628,158.675 0,184.389 117.584,299.641 91.786,462.257 237.732,386.042 384.416,460.829 357.032,298.473 <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>A black star<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>polygon</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>2. Do a keyboard test. Ensure focus order makes sense.</h2>\n<p>Screen readers and assistive technologies work with/like a keyboard. Ensuring that your site is keyboard accessible will help in navigating through interactive elements like buttons and links. </p>\n<p>The rule is if an element is operable using the mouse then you should be able to do the same via the keyboard.</p>\n<p>At the very least, a user should be able to:</p>\n<ol>\n<li>Navigate through elements using the <kbd>Tab</kbd> (and <kbd>Shift + Tab</kbd>) key.</li>\n<li>Confirm action using the <kbd>Enter</kbd> key or <kbd>Spacebar</kbd>. </li>\n<li>Close a revealed widget using the <kbd>Escape</kbd> key e.g. popup menu. </li>\n</ol>\n<p>It is important to understand the UI/page/form functionality. Check that each functional element is navigate-able and operable using the keyboard. </p>\n<p>The focus order should follow the visual order on the page. If you find something out of place or an element is not focusable. Refactor your code or add tabindex to manage the focus order. </p>\n<p>Make focusable </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">tabindex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-response<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Submission is successful<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Prevent element from getting focus</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>drawer is-closed<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">tabindex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>3. Use semantic markup</h2>\n<p>Semantic elements</p>\n<ul>\n<li>Region (main, nav, footer, header etc.)</li>\n<li>Lists (ol, ul, li, dl, dt, dd)</li>\n<li>Headings (h1, h2, h3 etc.)</li>\n<li>Content (article, section)</li>\n<li>For emphasis (strong, em, b, i, u etc.)*</li>\n</ul>\n<blockquote>\n<p>* <em>In the past, its not recommended to use <code class=\"language-text\">b</code>, <code class=\"language-text\">i</code> and <code class=\"language-text\">u</code> tag when you intend to style a phrase or word to provide emphasis. Latest Screen readers now can understand <code class=\"language-text\">strong</code> and <code class=\"language-text\">b</code>(old) tag serve the same purpose. It is true for <code class=\"language-text\">em</code> and <code class=\"language-text\">i</code> too.</em></p>\n</blockquote>\n<p>Landmark tags provide shortcuts for assistive technologies to bypass blocks on a page. For example, a user can go straight to the main content (marked by the <code class=\"language-text\">main</code> tag) or jump to the navigation block to move to a new page (wrapped by <code class=\"language-text\">nav</code> tag). </p>\n<!--ad-->\n<p>Headings aid assistive technologies to skip through topics on a page. For example, if I only want to know about the legal ramifications of whaling, I can locate the third heading and read on the topic. </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Moby Dick and whales in literature<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span> \n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Captain Ahab's nemesis ... <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>How to catch a whale<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>First, you need a boat. ... <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Whaling is illegal in most countries<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>IWC banned the practice in 1986 ... <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Use list tags to describe a collection. Screen readers will anounce a list and help it navigate each item and were you are in the list. </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- screen reader will treat this as a block of text\nDo NOT do this if you intend to present a list --></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span> Fruits on sale<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Pineapple<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Apple<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Mango<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Pear<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>    \n\n<span class=\"token comment\">&lt;!-- proper list uses list elements --></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span> Fruits on sale <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>Pineapple<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>Apple<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>Mango<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>Pear<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>    </code></pre></div>\n<h2>4. Make sure to have color and non-color indicators to convey the same information.</h2>\n<p>Using a red asterisk to tag required fields is a classic example of this. Using a symbol and a color ensures that color-impaired users can distinguish required fields. </p>\n<p>Another example is adding patterns to a chart. Using patterns in conjunction with color make charts more inclusive. Imagine looking at a bar chart using only a color key. If a user suffering color blindness look at the same chart, he/she will find it hard to understand. </p>\n<h2>5. Use relative sizing for fonts</h2>\n<p>For font-size, use relative units(em, rem) instead of absolute units (px, pt). I recommend using <code class=\"language-text\">rem</code> with a body font size of 16px. Using relative units will ensure that users that need to zoom in on text are able to. This is especially important in mobile devices with smaller screens. </p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">h1</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 4 rem <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">h2</span> <span class=\"token punctuation\">{</span><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 2.5 rem <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">blockquote</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1.25rem <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Wrapping up</h2>\n<p>There are more things to do to make a truly accessible website like color contrast and using ARIA attributes. For now, follow these few simple steps and you will have a more inclusive site that caters to a wider audience than just leaving it as is. </p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://www.w3.org/WAI/WCAG21/quickref/\">How to meet WCAG (quick reference)</a></li>\n<li><a href=\"https://webaim.org/techniques/keyboard/\">WebAIM: Keyboard Accessibility</a></li>\n<li><a href=\"https://accessibility.huit.harvard.edu/provide-accessible-labels-and-instructions\">Harvard.edu: Digital Accessibility</a></li>\n</ul>","fields":{"slug":"/2022/five_steps_to_improve_accessibility/"},"frontmatter":{"date":"December 10, 2022","title":"Five simple steps to improve website accessibility","featured_image":"/blog/daniel-ali-ju1yFZkrxVg-unsplash.jpg","tags":["web-development","html","best-practice","accessibility"]}}},{"node":{"excerpt":"I remember using JqueryUI’s datepicker. It was my go-to calendar widget in the past. It was great.  I just drop an input box give it an “id” and then run a function.  You get a great-looking calendar picker for your forms. It was a great bit of software engineering. I’ve used it in a lot of my old projects and clients were impressed.","html":"<p>I remember using JqueryUI’s datepicker. It was my go-to calendar widget in the past. It was great.  I just drop an input box give it an “id” and then run a function. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#datepicker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">datepicker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You get a great-looking calendar picker for your forms. It was a great bit of software engineering. I’ve used it in a lot of my old projects and clients were impressed.  <!--more--></p>\n<p>Some experts strongly advise against adding too many third-party libraries to websites. The extra library requests increase the time your site loads. Now that <a href=\"https://www.browserstack.com/guide/why-website-speed-is-important\">site speed has grown increasingly important to users</a>, developers must be smart when deciding on the modules they add to their projects. Resources like javascript files block the browser from rendering until it’s fully loaded. </p>\n<p>One less library to load is a few seconds slashed from your site’s loading time. Read <a href=\"https://web.dev/optimizing-content-efficiency-loading-third-party-javascript/\">Web.dev</a> for more information regarding optimizing content loading with regards to third-party javascript.</p>\n<h2>Use native elements</h2>\n<p>One strategy to optimize a website is to use native elements like the date and time inputs instead of third-party widgets. </p>\n<p>Aside from reducing the fat from your site, using native elements improves accessibility. You don’t need the extra coding necessary to make these elements work with assistive technologies.</p>\n<h2>Date input</h2>\n<p>The date input looks pretty much like any regular input element. Some browsers(e.g. Chrome) will have a placeholder corresponding to the date value and a calendar icon button.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>birthdate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Birth date:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>date<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>birthdate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>birthdate<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<div class=\"demo\">\n<label for=\"birthdate\">Birth date:</label>\n<input type=\"date\" id=\"birthdate\" name=\"birthdate\" />\n</div>\n<h2>Month input</h2>\n<p>The month input lets a user enter a month and year. The input value returned is of format <code class=\"language-text\">YYYY-MMM</code> where <code class=\"language-text\">YYYY</code> is the four-digit year and <code class=\"language-text\">MM</code> is the month number e.g. January is <code class=\"language-text\">01</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Month<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>month<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"demo\">\n    <label>\n        <span>Month</span>\n        <input type=\"month\" >\n    </label>\n</div>\n<h2>Week input</h2>\n<p>Use the <code class=\"language-text\">week</code> input type when you want to accept the week number of a year in your forms. It lets a user set up a picker for the 52/53 weeks out of a year.  </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Week<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>week<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>week<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"demo\">\n<label>\n    <span>Week</span>\n    <input type=\"week\" name=\"week\" >\n</label>\n</div>\n<h2>Time input</h2>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Time: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>time<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"demo\">\n<label>\n        <span>Time: </span>\n        <input type=\"time\">\n</label>\n</div>\n<h2>Date-time local input</h2>\n<p>The <code class=\"language-text\">datetime-local</code> input type provides a way to input both date and time.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Date and time - local: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>datetime-local<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"demo\">\n<label>\n    <span>Date and time - local: </span>\n    <input type=\"datetime-local\">\n</label>\n</div>\n<!--ad-->\n<h2>Specifying a range</h2>\n<p>There will be instances where you want to limit the possible values. For example, your form is about a month-long event. You can prevent your clients from setting up a date that is outside your set event by specifying a range. This is done with the minimum(min) and maximum(max) values.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>event<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Event date:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>date<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>eventdate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>eventdate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">min</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2023-04-01<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">max</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2023-04-30<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre></div>\n<div class=\"demo\">\n<label for=\"eventdate\">Event date:</label>\n<input type=\"date\" id=\"eventdate\" name=\"eventdate\" min=\"2023-04-01\" max=\"2023-04-30\"/>\n</div>\n<p>Another use case is preventing inputting past dates, for example when scheduling airplane flights. Specifying the minimum value to date before today is what you want to do. </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>Today is: 2022-12-01<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>flightstartdate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Event date:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>date<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>flightstartdate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>flightstartdate<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<div class=\"demo\">\n<p><label for=\"flightstartdate\">Event date:</label>\n<input type=\"date\" id=\"flightstartdate\" name=\"flightstartdate\" min=\"2023-12-01\" /></p>\n</div>\n<p>Limit the <code class=\"language-text\">week</code> input to a certain year, e.g. selling monthly tickets for a sports season. </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Event Month<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>month<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">min</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2022-01<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2022-12<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"demo\">\n    <label>\n        <span>Event Month</span>\n        <input type=\"month\" min=\"2022-01\" value=\"2022-12\" >\n    </label>\n</div>\n<p>The format for the <code class=\"language-text\">min</code> and <code class=\"language-text\">max</code> setup for the <code class=\"language-text\">week</code> input type is “year-week number” e.g. <code class=\"language-text\">2023-W01</code> for the first week of 2023.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Week<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>week<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>week<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">min</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2023-W01<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">max</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2023-W52<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"demo\">\n<label>\n    <span>Week</span>\n    <input type=\"week\" name=\"week\" min=\"2023-W01\" max=\"2023-W52\">\n</label>\n</div>\n<h2>Adding Suggestions</h2>\n<p>Using <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist\">datalist</a> element we can add hardcoded values as options to a date input. A great use case for this is suggested dates for restaurant reservations in the current week.</p>\n<h3>Date input with datalist</h3>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Recommended dates: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>date<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">list</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>recent-dates<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>datalist</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>recent-dates<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2022-01-01<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2022-02-14<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2022-05-01<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>datalist</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"demo\">\n<div>\n    <label>\n    <span>Recommended dates: </span>\n    <input type=\"date\" list=\"recent-dates\">\n    <datalist id=\"recent-dates\">\n        <option value=\"2022-01-01\">\n        <option value=\"2022-02-14\">\n        <option value=\"2022-05-01\">\n    </datalist>\n    </label>\n</div>\n</div>\n<h3>Time input with datalist</h3>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Popular hours: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>time<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">list</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>popularHours<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>datalist</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>popularHours<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>12:00<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>13:00<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>14:00<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>datalist</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"demo\">\n<label>\n    <span>Popular hours: </span>\n    <input type=\"time\" list=\"popularHours\">\n    <datalist id=\"popularHours\">\n    <option value=\"12:00\">\n    <option value=\"13:00\">\n    <option value=\"14:00\">\n    </datalist>\n</label>\n</div>\n<h2>Wrapping up</h2>\n<p>Support is <a href=\"https://caniuse.com/input-datetime\">limited but getting better</a>. Most modern browsers support these input types. Do be wary and check your audience. I still had clients who stuck with IE until IE11 was decommissioned. For old browsers, the input type will default to a regular input text box. Make sure to provide a fallback in those cases. </p>\n<p>I am glad we have native options for something ubiquitous as requiring a date/time input. Try using these new input types in your next project. </p>","fields":{"slug":"/2022/working_with_date_tag/"},"frontmatter":{"date":"December 09, 2022","title":"Working with Date and Time Input","featured_image":"/blog/nick-hillier-yD5rv8_WzxA-unsplash.jpg","tags":["web-development","html","best-practice","forms"]}}},{"node":{"excerpt":"I am a big Big Bang Theory fan. So is my wife. Her absolute favorite character is Sheldon Cooper. In one of the episodes Sheldon proposed an improved version of the rock-paper-scissors game.  This version extends the possible moves to five(5). The additional two options would increase the possibility of win chances as it minimizes the chance of both players picking the same move.","html":"<p>I am a big Big Bang Theory fan. So is my wife. Her absolute favorite character is Sheldon Cooper. In one of the episodes Sheldon proposed an improved version of the rock-paper-scissors game.  This version extends the possible moves to five(5). The additional two options would increase the possibility of win chances as it minimizes the chance of both players picking the same move. <!--more--></p>\n<p>I made a javascript version. Using a few emojis for the hand graphics. I made a very simple interface</p>\n<h2>Game logic</h2>\n<p>The game logic is pretty simple. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">build gameboard\n\n:play\n  get user move\n  get computer move\n  get win_or_lose\n  increment round\n  if (round equals max_round) goto display_winner\n  goto play \n\n:display_winner\n...\nend game</code></pre></div>\n<p>To check who wins per round we need to know the rules of the game (taken from Big Bang Theory wiki).</p>\n<ul>\n<li>Scissors cuts Paper</li>\n<li>Paper covers Rock</li>\n<li>Rock crushes Lizard</li>\n<li>Lizard poisons Spock</li>\n<li>Spock smashes Scissors</li>\n<li>Scissors decapitates Lizard</li>\n<li>Lizard eats Paper</li>\n<li>Paper disproves Spock</li>\n<li>Spock vaporizes Rock</li>\n<li>(and as it always has) Rock crushes Scissors</li>\n</ul>\n<!--ad-->\n<p>Here are the rules again coded in javascript.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">winOrLose</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">playerChoice<span class=\"token punctuation\">,</span> computerChoice</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Scissor <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Paper<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Paper <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Rock<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Rock <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Lizard<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Lizard <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Spock<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Scissors <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Lizard<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Rock <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Scissor<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Spock <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Scissors<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Lizard <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Paper<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Paper <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Spock<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Spock <span class=\"token operator\">&amp;&amp;</span> computerChoice <span class=\"token operator\">===</span> Hands<span class=\"token punctuation\">.</span>Rock<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// player wins </span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I love hash tables! They minimize code complexity. This is a great alternative to the code above.  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">WIN_OR_LOSE</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Hands<span class=\"token punctuation\">.</span>Paper<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Hands<span class=\"token punctuation\">.</span>Rock<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Hands<span class=\"token punctuation\">.</span>Rock<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Hands<span class=\"token punctuation\">.</span>Scissor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Hands<span class=\"token punctuation\">.</span>Scissor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Hands<span class=\"token punctuation\">.</span>Paper<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token constant\">WIN_OR_LOSE</span><span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>playerChoice<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>computerChoice<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// player wins</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The previous bit of code only handle win conditions, what if both players choose the same move? We test this even before testing win conditions,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">winOrLose</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">playerChoice<span class=\"token punctuation\">,</span> computerChoice</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>playerChoice <span class=\"token operator\">===</span> computerChoice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// show tie result  </span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, we test if the game has ended. Whenever a round ends, we check if the game should end(finished 10 rounds). If yes, we calculate the game result and notify the user.   </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">gameOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>yourScore<span class=\"token punctuation\">,</span> pcScore<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>games <span class=\"token operator\">>=</span> maxGames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>yourScore <span class=\"token operator\">===</span> pcScore<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">gameResult</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"It's a draw!\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>yourScore <span class=\"token operator\">></span> pcScore<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">gameResult</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You win!\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"win\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">gameResult</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You lost!\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lose\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>User interface</h2>\n<p>For the input, I made five(5) buttons with images corresponding each game move. When the game starts you are prompted to choose a move. When the player chooses a game move, it’s checked agains winning conditions and depending on the outcome computes the score. </p>\n<figure>\n<img src=\"/blog/Rock-Paper-Scissors-Lizard-Spock-Game-Images.png\" alt=\"rock-paper-scissors game buttons\">\n<figcaption>\n<span>Rock-paper-scissors-lizard-spock game buttons</span>\n</figcaption>\n</figure>\n<p><a href=\"https://codepen.io/chrisbautista/pen/dyJyebW\"><div><iframe \n        height='400'\n        title='chrisbautista embedded pen' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/dyJyebW/?height=400&theme-id=dark&default-tab=result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<p>Play the <a href=\"https://codepen.io/chrisbautista/full/dyJyebW\">game</a>. Enjoy!</p>","fields":{"slug":"/2022/rock-paper-scissors-lizard-spock/"},"frontmatter":{"date":"November 20, 2022","title":"Rock-Paper-Scissors-Lizard-Spock Game","featured_image":"/blog/marcus-wallis-R1qHDAEnCmc-unsplash.jpg","tags":["javascript","ui","animation","game"]}}},{"node":{"excerpt":"I wanted to see how much we can do with CSS transitions. No keyframe animations at all. Although you would have more control over the…","html":"<p>I wanted to see how much we can do with CSS transitions. No keyframe animations at all. Although you would have more control over the animation with keyframes. For our demo, we need a simple change from one state to another. CSS transitions are all we need.</p>\n<p>In one of the animations, I used a technique I call the Sibling-Follow technique. Before you ask, I did not invent this technique - just the name. It’s nice to name something when it’s this good. I got it from one of the front-end sites - I forgot which.</p>\n<p>When I understood the technique, my brain ran on overdrive. I was sketching different designs I can abuse this technique. I used this to animate the highlight element in the codepen below.</p>\n<h2>Sibling-Follow Technique</h2>\n<p>To illustrate, let me walk you through a simple tab bar animation. If you are familiar with Material UI tabs, it behaves very similarly. </p>\n<p><a href=\"https://mui.com/material-ui/react-tabs/\">Material UI tabs</a></p>\n<p>Make a list of buttons. Then, add another element and set the class as follow. We will use this to target and style the element later.</p>\n<p><strong>HTML</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 1 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 2 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 3 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 4 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 5 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>follow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>CSS</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">ul,\nli</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">list-style-type</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">ul</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">li</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.follow</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> left 0.4s ease-in-out<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 2px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I made a Javascript event handler to add the <code class=\"language-text\">active</code> class to the list item containing the button I clicked.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 1 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>active<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 2 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 3 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 4 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span> button 5 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>follow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Using the sibling selector(~), we apply the desired styling for .follow element. In this case, I want to position the mentioned element above the second list button.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">li:nth-child(2):active ~ .follow</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 60px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I added the other left positions to the rest of the <code class=\"language-text\">li</code> items with some trial and error. </p>\n<p>Voila! We get a simple highlight animation, ala Material UI tabs, with a few markup and the magic of CSS transitions.</p>\n<p>For my demo, I hardcoded the <code class=\"language-text\">left</code> property to the CSS for each transition state. Add a Javascript function to calculate these coordinates for you. Then you do not need to hardcode these values, especially if you are going to incorporate this into your professional work. </p>\n<!--ad-->\n<p>You can make it fancier by animating the width of the follow tab at different speeds. Apply different easing functions. Make many follow elements running at various vectors. I will let you play with that on your own. Let your imagination run free.</p>\n<p>I made five tab bar styles. Feel free to use these in your projects.</p>\n<h2>Wrapping up</h2>\n<ul>\n<li>You can make pretty amazing things with CSS, HTML, and a bit of Javascript.</li>\n<li>Sibling-Follow technique is a simple method you can use to create tab animations.</li>\n<li>CSS transition is your friend if you want to animate a simple change from one state to another.  </li>\n</ul>\n<p>All in all, I was happy with the outcome of this exercise. I had so much fun and learned a lot. We could use some accessibility work though. 😜 That is something we can work on for another day.</p>\n<p>I will explain the other animation styles I made with this pen later.</p>\n<p><strong>Update</strong>: This pen got showcased in a Codepen Spark newsletter last April 14th (link below). Thanks Codepen!😀🎉</p>\n<p><a href=\"https://codepen.io/spark/280\">Tab Bar Styles, AI Games, and Some Good Forking News (April 14)</a>.</p>\n<p><a href=\"https://codepen.io/chrisbautista/pen/NWXjqLN\"><div><iframe \n        height='400'\n        title='chrisbautista embedded pen' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/NWXjqLN/?height=400&theme-id=dark&default-tab=result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>","fields":{"slug":"/2022/animated-bottom-bar/"},"frontmatter":{"date":"November 19, 2022","title":"Animated Bottom Bar","featured_image":"/blog/sigmund-_dJCBtdUu74-unsplash.jpg","tags":["javascript","css","ui","animation"]}}},{"node":{"excerpt":"As part of the work I do for my employer, I analyze UI elements on our product to check if we need to re-engineer the component to improve…","html":"<p>As part of the work I do for my employer, I analyze UI elements on our product to check if we need to re-engineer the component to improve accessibility. One of the accessibility challenges I have reworked for our company site is the tabbed container.</p>\n<p>Imagine a folder with pages you can flip through using tabs at the edges. That is the closest I can imagine when I think of tabbed containers. This concept is very straightforward, tabs on top of the container  serves as buttons to access the corresponding grouped content. Only one grouped content is shown at any time. I love tabbed containers because they are very good at cleaning up the interface when you have so much content but have the same level of importance.</p>\n<p>For the new component, I based it on the <a href=\"https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/\">tab panel pattern</a> suggested in the WAI(<em>Web Accessibility Initiative</em>) site.</p>\n<h2>Focus Order</h2>\n<p>Using the keyboard with the old tabbed container, the focus goes from the first tab, 2nd tab, 3rd tab, and so on. Then the tab content 1, etc. One would need to finish traversing the tabs before you can access the first tab’s content. Its confusing to screenreader users as you would assume when you focus on the tab you can read the content.</p>\n<figure>\n  <img src=\"/blog/build_an_accessible_tab_container___focus_order.png\" alt=\"incorrect focus order\">\n  <figcaption>\n    <p>The navigation sequence does not follow the natural way of content consumption.</p>\n  </figcaption>\n</figure>\n<p>To improve the focus/read order, we should make the first tab active and prevent the inactive tabs from getting the focus sequence. Navigation will go directly to the content when tabbing from the tab button. Another rule some UI developers forget is to make sure hidden elements do not get focus. So for the previous example, the “Services” and “Products” content panels and its content must not receive focus.</p>\n<figure>\n  <img src=\"/blog/build_an_accessible_tab_container___correct_focus_order.png\" alt=\"corrected focus order\">\n  <figcaption>\n    <p> Now the user is only able to access the currently active tab and tab content</p>.\n  </figcaption>\n</figure>\n<!--ad-->\n<h2>Keyboard controls</h2>\n<p>The old tab container component only supported the <kbd>Tab</kbd> key to navigate which only follows the DOM sequence. A few tabs are tolerable but once you get more than five(5) tabs it can be annoying for the user to use.</p>\n<p>To make the component keyboard accessible, we add behavior that follows the WAI tab panel pattern. The tab navigation activates once the focus goes to the active tab (button). Using the <kbd>Arrow Left</kbd> and <kbd>Arrow Right</kbd>, the user can navigate to the previous and next tabs correspondingly.</p>\n<p>Additionally, you have two types of tab container behavior. <em>Automatic</em> tab containers will switch to a new tab when focus changes. While, <em>Manual</em> tabbed containers use <kbd>Enter</kbd> or <kbd>Spacebar</kbd> key to confirm the switch. I will use the “automatic” behavior for our demo.</p>\n<figure>\n  <img src=\"/blog/build_an_accessible_tab_container___active_tab_focused.png\" alt=\"active tab is focused\">\n  <figcaption>\n    <p>The active tab shows focused styling when navigating with the keyboard. Using the arrow keys we can navigate to other tabs.</p>  \n  </figcaption>\n</figure>\n<h2>ARIA attributes</h2>\n<figure>\n  <blockquote> Accessible Rich Internet Applications (ARIA) is a set of roles and attributes that define ways to make web content and web applications (especially those developed with JavaScript) more accessible to people with disabilities.\n  </blockquote>\n  <figcaption>\n    <cite>- MDN</cite>  \n  </figcaption>\n</figure>\n<p>It would have been nice if there was a tab panel semantic tag. There is none so we use ARIA attributes. On their own ARIA attributes do not do much. It does not add styling or extra behavior. But for screen readers or tools that aid people with impairments, ARIA attributes paint a picture that a browser can interpret.</p>\n<p>For the tabbed container, we set the following ARIA attributes. </p>\n<table>\n  <thead>\n  <tr>\n    <th style=\"min-width: 200px;\">ARIA attribute/role</th>\n    <th>Description</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr>\n    <td>role=tablist</td>\n    <td>Container for tab buttons</td>\n  </tr>\n  <tr>\n    <td>role=tab</td>\n    <td>Tab button element. Contains the label for the currently active content.</td>\n  </tr>\n  <tr>\n    <td>role=tabpanel</td>\n    <td>Container for the currently active tab content</td>\n  </tr>\n  <tr>\n    <td>aria-selected=true</td>\n    <td>Tab button is selected and content is visible</td>\n  </tr>\n  <tr>\n    <td>aria-selected=false</td>\n    <td>Tab button is inactive and content is hidden</td>\n  </tr>\n  <tr>\n    <td>tabindex=-1</td>\n    <td>Removes the element from tab order sequence. We use this for the inactive tabs and hidden tab content. Aids in focus management.</td>\n  </tr>\n  <tr>\n    <td>aria-controls=ID</td>\n    <td>Set on the tab button. ID refers to the associated tab content</td>\n  </tr>\n  <tr>\n    <td>aria-labelledby=ID</td>\n    <td>Set on the tab content container. Refers to the tab button serving as a label for the content.</td>\n  </tr>\n  <tr>\n    <td>tabindex=0</td>\n    <td>Set on the tab content container. Puts the container back to tab sequence</td>\n  </tr>\n  </tbody>\n</table>\n<h2>Our tabbed container in action</h2>\n<p><a href=\"https://codepen.io/chrisbautista/pen/XWZgrVx\"><div><iframe \n        height='400'\n        title='chrisbautista embedded pen' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/XWZgrVx/?height=400&theme-id=dark&default-tab=result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>","fields":{"slug":"/2022/accessible-tab-container/"},"frontmatter":{"date":"October 10, 2022","title":"Build an Accessible Tab Container","featured_image":"/blog/chiara-f-MI8He1NWPWg-unsplash.jpg","tags":["web-development","accessibility","best-practice"]}}},{"node":{"excerpt":"Tell me if this sounds familiar. You have a workstation that can not support the technology stack your project requires. Having VMs or Docker installed on your machine is out of the question since it can barely support office software.  You end up building a development machine(perhaps an Linux box) as a  desktop server. This works well for a while until you need to access your development setup remotely. Luckily there’s a number of ways you can achieve this.","html":"<p>Tell me if this sounds familiar. You have a workstation that can not support the technology stack your project requires. Having VMs or Docker installed on your machine is out of the question since it can barely support office software.  You end up building a development machine(perhaps an Linux box) as a  desktop server. This works well for a while until you need to access your development setup remotely. Luckily there’s a number of ways you can achieve this. <!--more--> </p>\n<h2>The Options</h2>\n<ul>\n<li><strong>Local editor/IDE via SFTP</strong>. - This entails connecting via SFTP and uploading the code changes manually. Problem with this setup, you need to run a lot of steps to test your code. Upload (manually) then run tests, rinse and repeat. Don’t expect to use any IDE functionality here. Not very useful but it works when the need arises. I recommend using <a href=\"https://winscp.net/eng/download.php\">WinSCP</a> on windows for this.  </li>\n<li>\n<p><strong>Local editor/IDE with automatic syncing via an SFTP client.</strong> - Very similar to the first option minus the manual uploads. Some SFTP clients would have a “sync on changes” option. WinSCP has the  <a href=\"https://winscp.net/eng/docs/task_keep_up_to_date\">“keep up to date”</a> feature which serves this purpose well. </p>\n<p>For Apple machines, <a href=\"https://panic.com/\">Panic’s</a> Coda/Transmit setup is a great example.  </p>\n<p>Additionally, using a plugin, some editors/IDE’s (e.g. SublimeText, VSCode, etc.) would be able to carry out the same use case. In my experience though, managing files via plugin is not very consistent. When it fails, it fails spectacularly with me ending up trying to resolve corrupted files. </p>\n</li>\n</ul>\n<!--ad-->\n<ul>\n<li>\n<p><strong>Local IDE using rsync</strong> - This setup leverages <a href=\"https://rsync.samba.org/features.html\">rsync</a> to synchronize your changes automatically. Using rsync is similar to using SFTP with automatic syncing. The difference is that rsync by default only upload/download files that changed. The most popular setup is to watch for file changes and then trigger a rsync command to upload only the delta. No manual uploading but not very different from the first one on this list. You can use inotifywait or gulps watch functionality to monitor file changes then manually trigger a function or command based on rsync.</p>\n<p><strong>Using inotifywait</strong>,</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#watch_and_sync.sh</span>\n\n<span class=\"token comment\">#!/bin.ssh</span>\n<span class=\"token keyword\">while</span> inotifywait <span class=\"token parameter variable\">-r</span> <span class=\"token parameter variable\">-e</span> modify,create,delete /directory<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    <span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-avz</span> /directory /target\n<span class=\"token keyword\">done</span></code></pre></div>\n<p>Using gulp and <a href=\"https://www.npmjs.com/package/gulp-rsync\">gulp-rsync</a>,</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> gulp-rsync --save-dev</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//gulpfile.js</span>\n<span class=\"token keyword\">var</span> gulp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'gulp'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> rsync <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'gulp-rsync'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'watch'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> watchFiles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'./src/**'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'./templates/**'</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> watcher <span class=\"token operator\">=</span> gulp<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span> watchedFiles<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'sync'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'sync'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'js/**'</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span> <span class=\"token function\">rsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">hostname</span><span class=\"token operator\">:</span> <span class=\"token string\">'remote.server.com'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">destination</span><span class=\"token operator\">:</span> <span class=\"token string\">'~/project/'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li><strong>Local IDE using SSHFS</strong> - SSHFS(Secured SHell File Systems) can mount directories and files from remote machines as if they were local folders. Using this logic you can set up your remotely available codebase into your local IDE. This is very easy to put up since most Linux machines support SSH and it does not need any other libraries to install and configure. Although useful it’s not very consistently executed in most clients.\nFor windows, check out <a href=\"https://www.nsoftware.com/sftp/netdrive/\">NetDrive</a> and <a href=\"http://www.secfs.net/winfsp/\">WinSFP</a> </li>\n<li><strong>Remote editing using vi/vim</strong> - Developing using vim on the development machine is a very powerful setup. This requires opening a terminal and connecting to the remote machine via SSH. Then navigating to your code base and running vim. You use vi’s powerful text editing features to edit files. A bit of tweaking and installing some vi/vim plugins would make vim work more like an IDE. The problem most have is the learning curve but once you get around the idea of coding on the terminal, you might end up loving it or not. :) Another minor issue is when you need to upload new files like images and PDFs. If you’re used to dragging and dropping your files into your IDE this might be off-putting. You will need a separate SFTP client to do upload these files. </li>\n</ul>\n<!--ad-->\n<p>  Here’s a link to my <a href=\"https://github.com/chrisbautista/vim-workflow/blob/master/.vimrc\">vimrc</a>. Search through Github there’s no shortage of excellent vim configurations that might fit your liking. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    <span class=\"token string\">\"====================\n    \"</span> <span class=\"token function\">vim</span> workflow\n    <span class=\"token string\">\" @chrisbautista \"</span>codespud<span class=\"token string\">\"\n    \"</span> features:\n    <span class=\"token string\">\" - asynchronous linting\n    \"</span> - prettier\n    <span class=\"token string\">\" - dark theme\n    \"</span> - tree <span class=\"token function\">file</span> view via NerdTree\n    <span class=\"token string\">\" - fuzzy file search\n    \"</span> - <span class=\"token function\">more</span> info on status and tab lines\n    <span class=\"token string\">\" - keyboard mappings\n    \"</span> - php debugging\n    <span class=\"token string\">\" - use , as &lt;leader>\n    \"</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n    \n    //<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>  My recommendation to you is to use vim without modifications. Once you get the hang of it, you might NOT even need plugins. </p>\n<ul>\n<li>\n<p><strong>Remote editing using a cloud editor</strong> - This has been quite popular lately. My favorite is <a href=\"https://en.wikipedia.org/wiki/Cloud9_IDE\">Cloud9 IDE</a>. Even <a href=\"https://aws.amazon.com/cloud9/\">Amazon Web Services(AWS) uses it</a> for its cloud services. </p>\n<p>Using the <a href=\"https://github.com/c9/core\">Cloud9 IDE</a> project you can set up any code base and make it available via the browser. It is not as powerful as Eclipse ( or clones e.g. PHPStorm, Netbeans) but it keeps your code and tasks in the same machine — not yet at least. But it is significantly better than most options in this list as its very similar to how you would develop in a regular IDE. Most would have terminal emulation as well and support for plugins. The problem is you can’t really do this for all your projects. Since you will be exposing the editor via the browser you still run the risk having your code hacked easier than without it. Like any internal application, there are ways to secure it.  </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Install</span>\n<span class=\"token function\">git</span> clone https://github.com/c9/core.git c9sdk\n<span class=\"token builtin class-name\">cd</span> c9sdk\nscripts/install-sdk.sh\n\n<span class=\"token comment\"># Start Cloud9 and expose /var/www/html</span>\n<span class=\"token function\">node</span> server.js <span class=\"token parameter variable\">-w</span> /var/www/html</code></pre></div>\n</li>\n<li>\n<p><strong>VSCode with remote development pack</strong> - To be precise, the <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack\">Remote development pack</a> is only available through <a href=\"https://code.visualstudio.com/insiders/\">VS Code Insiders edition</a> as of yet. No local code needed locally when using the remote development pack. The best benefit is all your beloved VSCode plugins can run on the code as if it’s local.\nAside from SSH, the pack also include support for container setups(Docker) and Windows Subsystem for Linux (WSL). </p>\n<p>To install <a href=\"https://code.visualstudio.com/docs/remote/ssh\">Remote development pack: SSH</a></p>\n<ul>\n<li>\n<p>Install an <a href=\"https://code.visualstudio.com/docs/remote/troubleshooting#_installing-a-supported-ssh-client\">OpenSSH compatible SSH client</a> if one is not already present.\nI recommend installing <a href=\"https://git-scm.com/downloads\">Git Bash</a> for windows. </p>\n<p>Note: PuTTY is not supported on Windows since the ssh command must be in the path.</p>\n</li>\n<li>Install <a href=\"https://code.visualstudio.com/insiders/\">Visual Studio Code Insiders</a>. </li>\n<li>Open <strong>Visual Studio Code Insiders</strong> then open modules</li>\n<li>Search for <a href=\"https://code.visualstudio.com/insiders/\">Remote Development</a> extension pack, then hit Install.</li>\n</ul>\n<p>From VS Code documentation</p>\n<blockquote>\n<p>  [Optional] If your server requires multi-factor authentication, set “remote.SSH.showLoginTerminal”:“true” in settings.json\nand enable the <a href=\"http://man.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man5/ssh_config.5?query=ssh%255fconfig%26arch=i386#ControlMaster\">ControlMaster</a> SSH feature. See here for details.</p>\n</blockquote>\n</li>\n</ul>\n<h2>Security</h2>\n<p>Since your code base needs to be accessed in the cloud, security is very important. Most of these setups use Secured SHell since its more secure than FTP and not to mention a lot of firewalls would have SSH open. There are also some features you might want to keep to secure SSH further. </p>\n<ul>\n<li>Never let login with root <code class=\"language-text\">(PermitRootLogin=no)</code> and create sudo-users</li>\n<li>Enable key authentication <code class=\"language-text\">(PubKeyAuthentication=yes)</code></li>\n<li>Limiting the service to a specific host and address instead of listening to all interfaces.\n<code class=\"language-text\">(ListenAddress=hostname:port)</code></li>\n<li>Create Private keys with passphrases</li>\n</ul>\n<p>There are other SSHD configuration options that can further secure your connection. Check some recommendations from <a href=\"https://www.ssh.com/ssh/\">ssh.com</a></p>\n<p>For Cloud editors like Cloud9 IDE; Enabling SSL(HTTPS), gating(strong password) and limiting access to known networks will keep your risk to a minimum. </p>\n<h2>Recommendation</h2>\n<p>I still prefer using vim for remote development but having an IDE setup like <strong>VSCode with Remote Development pack</strong> comes with great benefits which a developer like me finds quite appealing. Having to use a graphical UI for engaging my code base not to mention having some great plugins for language support is a major plus. But I digress, this is not an article to compare the benefits of IDEs in development. :) I’ll let you decide on that on your own. </p>\n<p>It really depends on what’s available for you and how comfortable you are in different environments. </p>\n<p>*Image attributed to <strong>Microsoft VS Code Documentation</strong>.*</p>","fields":{"slug":"/2019/remote-development-setups/"},"frontmatter":{"date":"May 19, 2019","title":"Remote Development Setup","featured_image":"/architecture-ssh.png","tags":["tutorial","IDE"]}}},{"node":{"excerpt":"Hosting a project wiki or a personal blog on Github is very easy with github-pages and static site generators like Jekyll.  You will end up with a site hosted on , if you’re happy with that then skip the rest of this article. If you want more or just curious about the steps then keep reading.","html":"<p>Hosting a project wiki or a personal blog on Github is very easy with github-pages and static site generators like Jekyll.  You will end up with a site hosted on <code class=\"language-text\">&lt;Project/Repository Name>.github.io</code>, if you’re happy with that then skip the rest of this article. If you want more or just curious about the steps then keep reading. <!--more--></p>\n<h2>What you’ll need</h2>\n<ul>\n<li>Domain hosting </li>\n<li>Github hosted static site (gh-pages branch)</li>\n</ul>\n<h2>Steps</h2>\n<ol>\n<li>\n<p>Setup your domain hosting</p>\n<p>As an example, I am using Godaddy’s admin panel. Your mileage might be different but most domain providers will have similar tools for you to use. </p>\n<p><img src=\"/godaddy-domain-admin_1.png\" alt=\"alt text\" title=\"Godaddy domain admin panel\"></p>\n<ol>\n<li>\n<p>Add a <strong>A</strong> entry to <strong>185.199.108.153</strong> with the following details. </p>\n<ul>\n<li>Host: @</li>\n<li>Points to: 185.199.109.153</li>\n<li>TTL: 600 seconds</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/godaddy-domain-manager.png\" alt=\"alt text\" title=\"Godaddy domain manager\"></p>\n<ol start=\"2\">\n<li>Do the same for <strong>185.199.109.153</strong>, <strong>185.199.110.153</strong> and <strong>185.199.111.153</strong>.</li>\n<li>\n<p>Add a CNAME with the following details:</p>\n<ul>\n<li>Host: www</li>\n<li>Points to: -----.github.io</li>\n<li>TTL: 1 hour</li>\n</ul>\n</li>\n<li>Save your settings.</li>\n</ol>\n<blockquote>\n<p>Update: It seems Godaddy has upgraded their interface you need to add those entries and the settings are automatically saved for you. </p>\n</blockquote>\n</li>\n<li>\n<p><a name=\"setup-gh\">Setup Github Pages</a></p>\n<ol>\n<li>Switch to your gh-pages branch and create a text file with your domain (e.g.  www.codespud.com)Save it in the root of your static site.  </li>\n</ol>\n<p><img src=\"/godaddy-cname-file.png\" alt=\"alt text\" title=\"Github pages CNAME file\"></p>\n<ol>\n<li>Navigate to <strong>Settings > Options > GitHub Pages</strong></li>\n</ol>\n<p><img src=\"/godaddy-github-pages.png\" alt=\"alt text\" title=\"Github pages settings\"></p>\n<ol>\n<li>Point branch to <strong>gh-pages branch</strong></li>\n<li>Fill in your domain. In my case, it’s <em>www.codespud.com</em>.</li>\n<li>Enable <strong>‘Enforce HTTPS’</strong>, if the option is enabled. Sometimes it will indicate you need to wait for 24 hours. Just check again later and enable it if you’re allowed to. If you have a different issue checkout <a href=\"https://help.github.com/en/articles/troubleshooting-custom-domains\">Github article</a> on troubleshooting custom domains. </li>\n</ol>\n</li>\n</ol>\n<hr>\n<!--ad-->\n<h3>NPM package</h3>\n<p>If you’re familiar with npm, you can use <a href=\"https://www.npmjs.com/package/gh-pages-cli\">gh-pages cli</a> to setup this for you. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-g</span> gh-pages</code></pre></div>\n<p>Before you can deploy to gh-pages. Remember to create the CNAME text file I mentioned earlier in step 1 of <a href=\"#setup-gh\">Setup Github Pages</a>.</p>\n<p>Point it to your static site code, e.g. (<em>dist</em> folder)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gh-pages <span class=\"token parameter variable\">-d</span> dist </code></pre></div>\n<p>This will set up your Github pages with the content of your <em>dist</em> folder and point it to whatever domain you specified in CNAME. </p>\n<h2>Conclusion</h2>\n<p>If everything went well. You should have your Github hosted site using your shiny new custom domain. :)</p>","fields":{"slug":"/2019/how-to-use-custom-domains-to-github-pages/"},"frontmatter":{"date":"April 22, 2019","title":"How to Use Custom Domains with Github Pages","featured_image":"/godaddy-domain-admin_1.png","tags":["website","blogging"]}}},{"node":{"excerpt":"If you work with Linux or Unix-like operating systems like Ubuntu or the MacOS, you might be familiar with Bourne-Again Shell or BASH for short. This article will show you that with a little elbow grease, you can have your BASH prompt work for you and heck maybe have a little fun with it.","html":"<p>If you work with Linux or Unix-like operating systems like Ubuntu or the MacOS, you might be familiar with Bourne-Again Shell or <a href=\"https://www.gnu.org/software/bash/bash.html\">BASH</a> for short. This article will show you that with a little elbow grease, you can have your BASH prompt work for you and heck maybe have a little fun with it.</p>\n<!--more-->\n<p>People tell me the invention of the GUI (graphical user interface) is the best thing that ever happened to modern computing. I beg to differ. Not all work is accomplished through the GUI nor is it efficient.</p>\n<p>I find myself working on the command line for work more and more — managing my servers even my Apple computer. So I get to spend much of my time on the command line. Launching commands like a stenographer recording the latest court drama. I realized very early how powerful the command line could be.</p>\n<p>But not having a GUI does not mean you should be happy with the default command prompt. Is this familiar?<figure></p>\n<p><img src=\"/assets/2016/11/boring.png\" alt=\"boring\" width=\"512\" height=\"224\" class=\"alignnone size-full wp-image-544\" srcset=\"/assets/2016/11/boring.png 512w, /assets/2016/11/boring-300x131.png 300w\" sizes=\"(max-width: 512px) 100vw, 512px\" /> <figcaption>Boring command prompt!</figcaption></figure></p>\n<p>Using the table below we can build a BASH prompt that is not only pretty but saves us a few keystrokes as well.</p>\n<h2>BASH Special Characters Reference</h2>\n<table >\n  <tr>\n    <th>\n      Special character\n    </th>\n    \n    <th align=\"left\">\n      Description\n    </th>\n    \n    <th>\n      Special character\n    </th>\n    \n    <th align=\"left\">\n      Description\n    </th>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\a\n    </td>\n    \n    <td>\n      an ASCII bell character (07)\n    </td>\n    \n    <td align=\"center\">\n      \\d\n    </td>\n    \n    <td>\n      the date in &#8220;Weekday Month Date&#8221; format (e.g., &#8220;Tue May 26&#8221;)\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\]\n    </td>\n    \n    <td>\n      end a sequence of non-printing characters\n    </td>\n    \n    <td align=\"center\">\n      \\e\n    </td>\n    \n    <td>\n      an ASCII escape character (033)\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\h\n    </td>\n    \n    <td>\n      the hostname up to the first `.&#8217;\n    </td>\n    \n    <td align=\"center\">\n      \\H\n    </td>\n    \n    <td>\n      the hostname\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\j\n    </td>\n    \n    <td>\n      the number of jobs currently managed by the shell\n    </td>\n    \n    <td align=\"center\">\n      \\l\n    </td>\n    \n    <td>\n      the basename of the shell&#8217;s terminal device name\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\n\n    </td>\n    \n    <td>\n      newline\n    </td>\n    \n    <td align=\"center\">\n      \\r\n    </td>\n    \n    <td>\n      carriage return\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\s\n    </td>\n    \n    <td>\n      the name of the shell, the basename of $0 (the portion following the final slash)\n    </td>\n    \n    <td align=\"center\">\n      \\t\n    </td>\n    \n    <td>\n      the current time in 24-hour HH:MM:SS format\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\T\n    </td>\n    \n    <td>\n      the current time in 12-hour HH:MM:SS format\n    </td>\n    \n    <td align=\"center\">\n      \\@\n    </td>\n    \n    <td>\n      the current time in 12-hour am/pm format\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\A\n    </td>\n    \n    <td>\n      the current time in 24-hour HH:MM format\n    </td>\n    \n    <td align=\"center\">\n      \\u\n    </td>\n    \n    <td>\n      the username of the current user\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\v\n    </td>\n    \n    <td>\n      the version of bash (e.g., 2.00)\n    </td>\n    \n    <td align=\"center\">\n      \\V\n    </td>\n    \n    <td>\n      the release of bash, version + patchelvel (e.g., 2.00.0)\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\w\n    </td>\n    \n    <td>\n      the current working directory\n    </td>\n    \n    <td align=\"center\">\n      \\W\n    </td>\n    \n    <td>\n      the basename of the current working directory\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\!\n    </td>\n    \n    <td>\n      the history number of this command\n    </td>\n    \n    <td align=\"center\">\n      \\#\n    </td>\n    \n    <td>\n      the command number of this command\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\$\n    </td>\n    \n    <td>\n      if the effective UID is 0, a #, otherwise a $\n    </td>\n    \n    <td align=\"center\">\n      \\nnn\n    </td>\n    \n    <td>\n      the character corresponding to the octal number nnn\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\\\\n    </td>\n    \n    <td>\n      a backslash\n    </td>\n    \n    <td align=\"center\">\n      \\[\n    </td>\n    \n    <td>\n      begin a sequence of non-printing characters, which could be used to embed a terminal control sequence into the prompt\n    </td>\n  </tr>\n  \n  <tr>\n    <td align=\"center\">\n      \\D{format}\n    </td>\n    \n    <td colspan=\"3\">\n      the format is passed to strftime(3) and the result is inserted into the prompt string; an empty format results in a locale-specific time representation. The braces are required\n    </td>\n  </tr>\n</table>\n<h2>Change the Bash Prompt</h2>\n<p>The environment variable we want to modify is <strong>PS1</strong>.<figure></p>\n<p><img src=\"/assets/2016/11/editPS1.png\" alt=\"editps1\" width=\"376\" height=\"90\" class=\"alignnone size-full wp-image-535\" srcset=\"/assets/2016/11/editPS1.png 376w, /assets/2016/11/editPS1-300x72.png 300w\" sizes=\"(max-width: 376px) 100vw, 376px\" /> </figure></p>\n<p>Using the reference table above we can break down the current prompt as</p>\n<ul>\n<li><em>\\u</em> – the current user</li>\n<li><em>\\h</em> – the computer’s hostname</li>\n<li><em>\\w</em> – the current working directory</li>\n</ul>\n<p>Not very useful is it? Let’s change that.</p>\n<p>By modifying the PS1 variable and exporting it with the command below we can manipulate the prompt to output anything we want.<figure></p>\n<p><img src=\"/assets/2016/11/bash_prompt_smiley.png\" alt=\"bash_prompt_smiley\" width=\"476\" height=\"131\" class=\"alignnone size-full wp-image-538\" srcset=\"/assets/2016/11/bash_prompt_smiley.png 476w, /assets/2016/11/bash_prompt_smiley-300x83.png 300w\" sizes=\"(max-width: 476px) 100vw, 476px\" /> <figcaption>Add a smiley</figcaption></figure></p>\n<p>Below is my favorite bash prompt which I install for all my servers and even my workstation. I can easily see important details like the hostname – very important if you find yourself managing multiple terminal windows and you can distinguish between windows. This configuration also shows the load averages, the current date and time and the working directory. The color helps to give it contrast to the monotonous black on white default of most terminal windows.<figure></p>\n<p><img src=\"/assets/2016/11/mybashpromot_in_action.png\" alt=\"mybashpromot_in_action\" width=\"719\" height=\"370\" class=\"alignnone size-full wp-image-536\" srcset=\"/assets/2016/11/mybashpromot_in_action.png 719w, /assets/2016/11/mybashpromot_in_action-300x154.png 300w\" sizes=\"(max-width: 719px) 100vw, 719px\" /> </figure></p>\n<h2>Make it Permanent</h2>\n<p>To make your BASH prompt permanent, just edit ~/.bash_profile or ~/.bashrc or ~/.profile or run the command<figure></p>\n<img src=\"/assets/2016/11/make_bashprompt_permanent.png\" alt=\"Make your bash prompt permanent\" width=\"722\" height=\"183\" class=\"alignnone size-full wp-image-541\" srcset=\"/assets/2016/11/make_bashprompt_permanent.png 722w, /assets/2016/11/make_bashprompt_permanent-300x76.png 300w\" sizes=\"(max-width: 722px) 100vw, 722px\" />  \n</figure>\n<h2>Ideas</h2>\n<ol>\n<li>Count the files in the current directory</li>\n<li>Display in blinking colors the last line of a todo list</li>\n<li>Display CPU/Memory/Disk usage</li>\n<li>Display command to pull up a help screen</li>\n<li>Echo a smiley if the system is working in top condition</li>\n</ol>\n<p>There you have it, you can now work on the command line with a little bit more help. The key here is to be creative and think of what you want your bash prompt to have. Enjoy!</p>","fields":{"slug":"/2016/make-bash-prompt-work/"},"frontmatter":{"date":"November 14, 2016","title":"Make Your Bash Prompt Work For You","featured_image":"/assets/2016/11/mybashpromot_in_action.png","tags":["bash","productivity","cli"]}}},{"node":{"excerpt":"I’ve got some leeway pushing Khrunus off the ground.  I’ve always been successful using JavaScript’s timing functions but since Khrunus would primarily be built-in in AngularJS. I have to research a way to reuse my timing snippets into proper Angular code.  To study, I built a simple angular app:","html":"<p>I’ve got some leeway pushing <a title=\"Khrunus\" href=\"https://github.com/chrisbautista/Khrunus\" target=\"_blank\">Khrunus</a> off the ground.  I’ve always been successful using JavaScript’s timing functions but since Khrunus would primarily be built-in in AngularJS. I have to research a way to reuse my timing snippets into proper Angular code.  To study, I built a simple angular app:<!--more--> </p>\n<h2>Problem</h2>\n<p>How to use AngularJS to make a time-related app, in this case, a timer for logging elapsed time?</p>\n<h2>What I need</h2>\n<p>Before I started this little venture, I need to detail the parameters of the experiment.</p>\n<p>Firstly,  I need to layout my application into two sections. The top section will show a digital clock face and a button to toggle(start or stop) the clock. The bottom section will be a table showing start and end times, as well as the total duration. To know that the application is successful, start and end times should be logged. Using those values I can compute for the duration.</p>\n<p>We have two modes; an idle state,”stopped” and an active mode,”started”. We need to consider that when coding the helper functions.</p>\n<h2>Solution</h2>\n<p>Firstly, we start with a basic AngularJS template. Please note I am assuming you have at least some experience working with HTML, Javascript, and AngularJS.</p>\n<p>I need two sections so I make two main DIVs.</p>\n<p>Next, in DIV 1,  we add another div to serve as the container for the timer digits and a button.</p>\n<p>Next in DIV #2, we format a table with a header and three columns; “Start”, “End” and “Duration(secs)” correspondingly.</p>\n<p>What we have now is not very pretty, we’re going to fix that in a bit. Create a CSS file, call it “app.css”. Let’s style everything as follows,</p>\n<p>Looking good! 🙂  Now to add the functionality we need. Let’s start with some data binding and a basic controller.</p>\n<h4>HTML</h4>\n<h3>Javascript</h3>\n<p>Awesome! For the button, we’re going to use that as a trigger to toggle between modes as well as an indicator to show the user what’s happening.</p>\n<p>Now, we can switch between modes, using the button data {{mode}} as a toggle flag. Now to the meat of the application, as a reference I’m going to use this basic clock code I use when I need digital clock displays.</p>\n<p>The hero of this application is AngularJS’s <a title=\"$timeout service\" href=\"https://docs.angularjs.org/api/ng/service/$timeout\" target=\"_blank\">$timeout service</a>. The $timeout service gives the user a wrapper for window.setTimeOut. So it still acts like setTimeOut but with the code organization and excellent exception handling that AngularJS provides. Our code should follow this format</p>\n<p>We build the clock functionality via a $timeout statement, but first let’s refactor our controller and add two functions to handle the Start and Stop modes.</p>\n<p>Now for the $timeout service,</p>\n<p>You can see that we used the timeout service to recursively call the <strong>StartTimer</strong> function. When you call <code class=\"language-text\">$timeout</code>, just as window.setTimeOut, you create a timing object that we then save to our variable ‘tmPromise’. We’ll get into more of that later just take a note of it. Since we’re really making a stopwatch and not a clock that tells the current time, let’s recode. We need the current time so we use <code class=\"language-text\">date.getTime()</code>. Adding two more variables timeStart and timeEnd. When we button is clicked, we save the time to <strong>timerStart</strong>. Every time the timeout completes and we call StartTimer, the value of <strong>$scope.timeEnd</strong> changes. We then subtract <strong>$scope.timeStart</strong> to get the current elapsed time in milliseconds. We add some normalization code and we end up with this,</p>\n<p>Now for the stopTimer function, issuing the cancel method will stop the $timeout service. Remember the variable we made earlier, ‘tmPromise’. We will use that as the parameter for our cancel call illustrated below. We then collect the start and end times and push that into the history array.</p>\n<h3>Conclusion</h3>\n<p>Yay, we just made an AngularJS timer widget. Adding a service to insert a line in our table we end up with this.</p>\n<p>This is a very simple implementation. One that did not need a unit test but if we wanted to, we can use a $timeout.flush() method. More details from the reference links below.</p>\n<p>See the app in action <a title=\"here\" href=\"http://chrisbautista.github.io/experiments/cbTimerDirective/public_html/\" target=\"_blank\"><strong>here</strong></a></p>\n<blockquote>\n<p>** UPDATE: Code sample here <a title=\"here\" href=\"http://chrisbautista.github.io/experiments/cbTimerDirective/public_html/\" target=\"_blank\"><strong>here</strong></a></p>\n</blockquote>\n<p>Download all the source <a title=\"angular js timer experiment zip file\" href=\"http://chrisbautista.github.io/experiments/cbTimer/angularjs_timer_experiment.zip\" target=\"_blank\"><strong>here</strong></a>.</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://docs.angularjs.org/api/ng/service/$timeout\">https://docs.angularjs.org/api/ng/service/$timeout</a></li>\n<li><a href=\"https://docs.angularjs.org/api/ng/filter/date\">https://docs.angularjs.org/api/ng/filter/date</a></li>\n</ul>","fields":{"slug":"/2014/how-to-make-a-timer-stopwatch-using-angularjs/"},"frontmatter":{"date":"September 28, 2014","title":"How To Make A Timer/Stopwatch Using AngularJS","featured_image":"/assets/2014/09/angular-featured.png","tags":["frontend","angularjs","ui","javascript"]}}}]},"tags":{"group":[{"fieldValue":"IDE","totalCount":1},{"fieldValue":"UX","totalCount":1},{"fieldValue":"accessibility","totalCount":6},{"fieldValue":"angularjs","totalCount":1},{"fieldValue":"animation","totalCount":3},{"fieldValue":"api","totalCount":1},{"fieldValue":"bash","totalCount":4},{"fieldValue":"best-practice","totalCount":3},{"fieldValue":"blogging","totalCount":1},{"fieldValue":"browser","totalCount":2},{"fieldValue":"cli","totalCount":1},{"fieldValue":"css","totalCount":2},{"fieldValue":"devops","totalCount":1},{"fieldValue":"forms","totalCount":1},{"fieldValue":"frontend","totalCount":6},{"fieldValue":"fun","totalCount":4},{"fieldValue":"game","totalCount":2},{"fieldValue":"google","totalCount":4},{"fieldValue":"html","totalCount":2},{"fieldValue":"images","totalCount":1},{"fieldValue":"javascript","totalCount":5},{"fieldValue":"linux","totalCount":3},{"fieldValue":"personal","totalCount":4},{"fieldValue":"productivity","totalCount":2},{"fieldValue":"reactjs","totalCount":1},{"fieldValue":"script","totalCount":2},{"fieldValue":"scripts","totalCount":1},{"fieldValue":"security","totalCount":1},{"fieldValue":"tip","totalCount":1},{"fieldValue":"tools","totalCount":1},{"fieldValue":"tutorial","totalCount":1},{"fieldValue":"ui","totalCount":4},{"fieldValue":"utility","totalCount":1},{"fieldValue":"video","totalCount":2},{"fieldValue":"vscode","totalCount":1},{"fieldValue":"vue","totalCount":1},{"fieldValue":"web-development","totalCount":6},{"fieldValue":"webapps","totalCount":1},{"fieldValue":"website","totalCount":11}]}},"pageContext":{"limit":15,"skip":0,"numPages":3,"currentPage":1}},"staticQueryHashes":["2139210123","63159454"]}