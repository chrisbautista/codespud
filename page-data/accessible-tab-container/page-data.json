{"componentChunkName":"component---src-templates-blog-post-js","path":"/accessible-tab-container/","result":{"data":{"site":{"siteMetadata":{"title":"CodeSpud","author":"@codespud"}},"markdownRemark":{"id":"c56b2406-176b-503f-9a14-7dcd4dd1429e","excerpt":"As part of the work I do for my employer, I analyze UI elements on our product to check if we need to re-engineer the component to improve…","html":"<p>As part of the work I do for my employer, I analyze UI elements on our product to check if we need to re-engineer the component to improve accessibility. One of the accessibility challenges I’ve reworked for our company site is the tabbed container.</p>\n<p>Imagine a folder with pages you can flip through using tabs at the edges. That is the closest I can imagine when I think of tabbed containers. This concept is very straightforward, you have tabs on top that serves as buttons to access the corresponding grouped content. Only one grouped content is shown at anytime. I love tabbed containers because they are a very good at cleaning up the interface when you have so much content but have the same level of importance.</p>\n<p>For the new component I based it of the <a href=\"https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/\">tab panel pattern</a> suggested in the WAI(<em>Web Accessibility Initiative</em>) site.</p>\n<h2>Focus Order</h2>\n<p>When using the keyboard the focus goes from the first tab, 2nd tab, 3rd tab, etc. then tab content 1 and so on. You need to finish traversing the tabs before you can access to the first tabs content. This is confusing to screenreader users as you would assume when you focus to a tab you are able to read the content.  </p>\n<figure>\n  <img src=\"/blog/build_an_accessible_tab_container___focus_order.png\" alt=\"incorrect focus order\">\n  <figcaption>\n    Navigation sequence does not follow the natural way of content consumption.\n  </figcaption>\n</figure>\n<p>To improve the focus/read order, we should make the first tab active and prevent the inactive tabs from getting focus sequence. Navigation will go directly to the content when tabbing through. Another rule some UI developers forget is to make sure hidden elements should not get focus. So for the example above, “Services” and “Products” should not receive focus when inactive/not shown. </p>\n<figure>\n  <img src=\"/blog/build_an_accessible_tab_container___correct_focus_order.png\" alt=\"corrected focus order\">\n  <figcaption>\n    Now user is only able to access the currently active tab and tab content.\n  </figcaption>\n</figure>\n<h2>Keyboard controls</h2>\n<p>The old tab container component only supported the <kbd>Tab</kbd> key which only follow the DOM sequence which made component more convenient to work with the mouse. A few tabs is tolerable but once you get a more than five(5) tabs it can be annoying for the user to navigate to the desired content.  </p>\n<p>To make keyboard as easy to use as the tab interface, we added behavior that follows the read order defined earlier. The tab navigation activates once the focus goes to the active tab (button) and then <kbd>Arrow Left</kbd> and <kbd>Arrow Right</kbd> keys a user can navigate to the previous and next tabs correspondingly. <em>Automatic</em> tab containers will switch to the future tab when focus changes while <em>Manual</em> tabbed containers needs confirmation via <kbd>Enter</kbd> or <kbd>Spacebar</kbd> key to switch to indicated tab panel.</p>\n<figure>\n  <img src=\"/blog/build_an_accessible_tab_container___active_tab_focused.png\" alt=\"active tab is focused\">\n  <figcaption>\n    <div>Active tab shows focused styling when navigating with the keyboard.</div> \n    <div>Using the arrow keys we can navigate to other tabs.</div>  \n  </figcaption>\n</figure>\n<h2>ARIA attributes</h2>\n<figure>\n  <blockquote> Accessible Rich Internet Applications (ARIA) is a set of roles and attributes that define ways to make web content and web applications (especially those developed with JavaScript) more accessible to people with disabilities.\n  </blockquote>\n  <figcaption>\n    <cite>- MDN</cite>  \n  </figcaption>\n</figure>\n<p>For the tabbed container, we set the following ARIA attributes.  </p>\n<table>\n  <thead>\n  <tr>\n    <th style=\"min-width: 200px;\">ARIA attribute/role</th>\n    <th>Description</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr>\n    <td>role=tablist</td>\n    <td>Container for tab buttons</td>\n  </tr>\n  <tr>\n    <td>role=tab</td>\n    <td>Tab button element, contains the label for the currently active content</td>\n  </tr>\n  <tr>\n    <td>role=tabpanel</td>\n    <td>Container for the currently active tab content</td>\n  </tr>\n  <tr>\n    <td>aria-selected=true</td>\n    <td>Tab button is selected and content is visible</td>\n  </tr>\n  <tr>\n    <td>aria-selected=false</td>\n    <td>Tab button is inactive and content is hidden</td>\n  </tr>\n  <tr>\n    <td>tabindex=-1</td>\n    <td>Removes the element from tab order sequence. We use this for the inactive tabs and hidden tab content.Aids in focus management.</td>\n  </tr>\n  <tr>\n    <td>aria-controls=ID</td>\n    <td>Set on the tab button. ID refers to the associated tab content</td>\n  </tr>\n  <tr>\n    <td>aria-labelledby=ID</td>\n    <td>Set on the tab content container. Refers to the tab button serving as a label for the content.</td>\n  </tr>\n  <tr>\n    <td>tabindex=0</td>\n    <td>Set on the tab content container. Puts the container back to tab sequence</td>\n  </tr>\n  </tbody>\n</table>\n<h2>Our tabbed container in action</h2>\n<p><a href=\"https://codepen.io/chrisbautista/pen/XWZgrVx\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/chrisbautista/embed/preview/XWZgrVx/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>","frontmatter":{"title":"Build an Accessible Tab Container","date":"October 10, 2022","tags":["accessibility","ui","animated"],"featured_image":"/blog/chiara-f-MI8He1NWPWg-unsplash.jpg","featured_image_attribution":"Photo by <a href=\"https://unsplash.com/@quasichiara\">Chiara F</a>","contentType":null}}},"pageContext":{"slug":"/accessible-tab-container/","tags":["accessibility","ui","animated"],"previous":{"fields":{"slug":"/remote-development-setups/"},"frontmatter":{"title":"Remote Development Setup","contentType":null,"tags":["tutorial","IDE"]}},"next":{"fields":{"slug":"/animated-bottom-bar/"},"frontmatter":{"title":"Animated Bottom Bar","contentType":null,"tags":["javascript","css","ui","animated","interactive"]}}}}}