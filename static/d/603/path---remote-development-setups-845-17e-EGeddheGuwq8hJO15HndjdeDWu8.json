{"data":{"site":{"siteMetadata":{"title":"CodeSpud","author":"@codespud"}},"markdownRemark":{"id":"348719eb-48c9-5f97-b7c3-646ed98c4f5e","excerpt":"\r\nTell me if you're in the same situation. You have a workstation that cannot support the technology stack your project requires. Having VMs or Docker installed on your machine is out of the question since it can barely support office software. You end up building a development machine(perhaps an Ubuntu box) as a desktop server. This works well for a while until you need to access your code base remotely. Luckily theres a number of ways you can facilitate this setup. ","html":"<p>Tell me if you’re in the same situation. You have a workstation that cannot support the technology stack your project requires. Having VMs or Docker installed on your machine is out of the question since it can barely support office software. You end up building a development machine(perhaps an Ubuntu box) as a desktop server. This works well for a while until you need to access your code base remotely. Luckily theres a number of ways you can facilitate this setup. <!--more--></p>\n<h2>The Options</h2>\n<ul>\n<li>\n<p><strong>Local editor/IDE via SFTP</strong>. - This entails connecting via SFTP and uploading the code changes manually. Problem with this setup, you need to run a lot of steps to test your code. Upload (manually) then run tests, rinse and repeat. Don’t expect to use any IDE functionality here. Not very useful but it works when the need arises. I recommend using <a href=\"https://winscp.net/eng/download.php\">WinSCP</a> on windows for this.  </p>\n</li>\n<li>\n<p><strong>Local editor/IDE with automatic syncing via an SFTP client.</strong> - Very similar to the first option minus the manual uploads. Some SFTP clients would have a “sync on changes” option. Winscp has the  <a href=\"https://winscp.net/eng/docs/task_keep_up_to_date\">“keep up to date”</a> feature which serves this purpose well. </p>\n<p>For Apple machines, <a href=\"https://panic.com/\">Panic’s</a> Coda/Transmit setup is a great example.  </p>\n<p>Additionally, using a plugin, some editors/IDE’s (e.g. SublimeText, VSCode etc.) would be able to carry out the same use case. In my experience though, managing files via plugin is not very consistent. When it fails, it fails spectacularly with me ending up trying to resolve corrupted files. </p>\n</li>\n<li>\n<p><strong>Local IDE using rsync</strong> - This setup leverages <a href=\"https://rsync.samba.org/features.html\">rsync</a> to synchronize your changes automatically. Using rsync is similar to using SFTP with automatic syncing. Difference is that rsync by default only upload/download files that changed. The most popular setup is to watch for file changes and then trigger an rsync command to upload only the delta. No manual uploading but not very different from the first one in this list. You can use inotifywait or gulps watch functionality to monitor file changes then manually trigger a function or command based on rsync.</p>\n<p><strong>Using inotifywait</strong>,</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#watch_and_sync.sh</span>\n\n<span class=\"token comment\">#!/bin.ssh</span>\n<span class=\"token keyword\">while</span> inotifywait -r -e modify,create,delete /directory<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    <span class=\"token function\">rsync</span> -avz /directory /target\n<span class=\"token keyword\">done</span></code></pre></div>\n<p>Using gulp and <a href=\"https://www.npmjs.com/package/gulp-rsync\">gulp-rsync</a>,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install gulp-rsync --save-dev</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//gulpfile.js</span>\n<span class=\"token keyword\">var</span> gulp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'gulp'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> rsync <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'gulp-rsync'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'watch'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> watchFiles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'./src/**'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'./templates/**'</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> watcher <span class=\"token operator\">=</span> gulp<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span> watchedFiles<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'sync'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'sync'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'js/**'</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span> <span class=\"token function\">rsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      hostname<span class=\"token punctuation\">:</span> <span class=\"token string\">'remote.server.com'</span><span class=\"token punctuation\">,</span>\n      destination<span class=\"token punctuation\">:</span> <span class=\"token string\">'~/project/'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><strong>Local IDE using SSHFS</strong> - SSHFS(Secured SHell File Systems) can mount directories and files from remote machines as if they were local folders. Using this logic you can setup your remotely available code base into your local IDE. This is very easy to put up since most Linux machines support SSH and it does not need any other libraries to install and configure. Although useful it’s not very consistently executed in most clients.\nFor windows, check out <a href=\"https://www.nsoftware.com/sftp/netdrive/\">NetDrive</a> and <a href=\"http://www.secfs.net/winfsp/\">WinSFP</a> </p>\n</li>\n<li>\n<p><strong>Remote editing using vi/vim</strong> - Developing using vim on the development machine is a very powerful setup. This requires opening a terminal and connecting to the remote machine via SSH. Then navigating to your codebase and opening vim. You are given a powerful text editor with vi’s legendary code editing features. Adding a little configuration and some plugins, vim will work a very capable IDE. It’s free and it’s local to your development machine. Problem is the learning curve and you need to get over the idea that you’re using a terminal to code. Another issue is when you need to upload new files like images and pdf’s. You will need upload via SFTP or git to add new files. </p>\n<p>Here’s a link to my <a href=\"https://github.com/chrisbautista/vim-workflow/blob/master/.vimrc\">vimrc</a> that I use to configure my vim editor. Search through github there’s no shortage of excellent vim configurations. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;====================\n&quot; vim workflow\n&quot; @chrisbautista &quot;codespud&quot;\n&quot; features:\n&quot; - asynchronous linting\n&quot; - prettier\n&quot; - dark theme\n&quot; - tree file view via NerdTree\n&quot; - fuzzy file search\n&quot; - more info on status and tab lines\n&quot; - keyboard mappings\n&quot; - php debugging\n&quot; - use , as &lt;leader&gt;\n&quot;====================\n...</code></pre></div>\n</li>\n<li>\n<p><strong>Remote editing using a cloud editor</strong> - This has been quite popular lately. Using the <a href=\"https://github.com/c9/core\">Cloud9 IDE</a> project you can set up any codebase and make it available via the browser. IDE is not as powerful as eclipse ( or clones e.g. PHPStorm, netbeans) but it keeps your code and tasks in the same machine. Significantly better as you it provides means to add files and in-editor search. Most would have terminal emulation and support for plugins. Problem is you can’t really do this for all your projects. Since you will be exposing the editor via the browser (although there are ways to secure it) you still run the risk having your code hacked easier than without it.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Install</span>\n<span class=\"token function\">git</span> clone https://github.com/c9/core.git c9sdk\n<span class=\"token function\">cd</span> c9sdk\nscripts/install-sdk.sh\n\n<span class=\"token comment\"># Start Cloud9 and expose /var/www/html</span>\nnode server.js -w /var/www/html</code></pre></div>\n</li>\n<li>\n<p><strong>VSCode with remote development pack</strong> - To be precise, the <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack\">Remote development pack</a> is only available through <a href=\"https://code.visualstudio.com/insiders/\">VS Code Insiders edition</a> as of yet. No local code needed locally when using the remote development pack. Best benefit is all your beloved VSCode plugins can run on the code as if it’s local.\nAside from SSH, the pack also include support for container setups(Docker) and Windows Subsystem for Linux (WSL). </p>\n<p>To install <a href=\"https://code.visualstudio.com/docs/remote/ssh\">Remote development pack: SSH</a></p>\n<ul>\n<li>\n<p>Install an <a href=\"https://code.visualstudio.com/docs/remote/troubleshooting#_installing-a-supported-ssh-client\">OpenSSH compatible SSH client</a> if one is not already present.\nI recommend installing <a href=\"https://git-scm.com/downloads\">Git Bash</a> for windows. </p>\n<p>Note: PuTTY is not supported on Windows since the ssh command must be in the path.</p>\n</li>\n<li>\n<p>Install <a href=\"https://code.visualstudio.com/insiders/\">Visual Studio Code Insiders</a>. </p>\n</li>\n<li>\n<p>Open <strong>Visual Studio Code Insiders</strong> then open modules</p>\n</li>\n<li>\n<p>Search for <a href=\"https://code.visualstudio.com/insiders/\">Remote Development</a> extension pack, then hit Install.</p>\n</li>\n</ul>\n<blockquote>\n<p>From VS code documentation</p>\n</blockquote>\n<blockquote>\n<p>  [Optional] If your server requires multi-factor authentication, set ”<code class=\"language-text\">remote.SSH.showLoginTerminal</code>“:<code class=\"language-text\">true</code> in settings.json\nand enable the <a href=\"http://man.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man5/ssh_config.5?query=ssh%255fconfig%26arch=i386#ControlMaster\">ControlMaster</a> SSH feature. See here for details.</p>\n</blockquote>\n</li>\n</ul>\n<h2>Security</h2>\n<p>Since you’re code base needs to be accessed in the cloud, security is very important. Most of this setups use Secured SHell since its more secure than FTP and not to mention a lot of firewalls would have SSH open. There are also some features you might want to keep to secure SSH further. </p>\n<ul>\n<li>Never let login with root <code class=\"language-text\">(PermitRootLogin=no)</code> and create sudo-users</li>\n<li>Enable key authentication <code class=\"language-text\">(PubKeyAuthentication=yes)</code></li>\n<li>Limiting the service to specific host and address instead of listening to all interfaces. <code class=\"language-text\">(ListenAddress=hostname:port)</code></li>\n<li>Create Private keys with passphrases</li>\n</ul>\n<p>There are other SSHD configuration options that can further secure your connection. Check some recommendations from <a href=\"https://www.ssh.com/ssh/\">ssh.com</a></p>\n<h2>Recommendation</h2>\n<p>It really depends on what’s available for you and how comfortable you are at different environments. </p>\n<p>I still prefer using vim for remote development but having an IDE setup like <strong>VSCode with Remote Development pack</strong> comes with great benefits which a developer like me finds quite appealing. Having  to use a graphical UI for engaging my codebase not to mention having some great plugins for language support is a major plus. But I digress, this is not an article to compare the benefits of IDEs in development. :) I’ll let you decide on that on your own. </p>\n<p>*Image attributed to <strong>Microsoft VS Code Documentation</strong>.*</p>","frontmatter":{"title":"Remote Development Setup","date":"May 19, 2019","featured_image":"/architecture-ssh.png"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/remote-development-setups/","previous":{"fields":{"slug":"/how-to-use-custom-domains-to-github-pages/"},"frontmatter":{"title":"How to Use Custom Domains with Github Pages","contentType":null}},"next":null}}