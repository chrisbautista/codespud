{"data":{"site":{"siteMetadata":{"title":"CodeSpud"}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"<p>Tell me if you have the same situation as I am. You’re workstation cannot support the technology stack your project requires. Having VMs or Docker installed on my workstation is out of the question since it barely can support MS Office. So, in my case I have a development machine as a desktop that I remotely connect to via SSH. I’ve run through  a number of options when I need to access my remote codebase. </p>\n<h2>The Options</h2>\n<p>I have different ways to accommodate this setup:</p>\n<ul>\n<li>\n<p><strong>Local editor/IDE via SFTP</strong>. - Connect via SFTP and upload the code changes. I hate this setup cause you have to manually upload your files. Another problem with this setup, you need to run a lot of steps to test your code. Upload (manually) then run tests, rinse and repeat. Don’t expect to use any IDE functionality here. Not very useful but it works when the need arise. </p>\n</li>\n<li>\n<p><strong>Local editor with automatic syncing via an SFTP client</strong> very similar to the first option minus the manual uploads. Some SFTP clients would have a “sync on changes” option. </p>\n<p>For Apple machines, <a href=\"https://panic.com/\">Panic’s</a> Coda/Transmit setup is a great example of this.  </p>\n<p>Using a plugin some editor/IDE’s (e.g. SublimeText, VSCode etc.) would be able to carry out the same use case. In my experience though, syncing via plugin is not very consistent. When it fails, it fails spectacularly with me ending up trying to resolve corrupted files.  </p>\n</li>\n</ul>\n<ul>\n<li>\n<p><strong>Local IDE using rsync</strong> - Rsync is similar to using SFTP. The most popular setup is to watch for file changes and then trigger an rsync command to upload only the delta. No manual uploading but not very diffent from the first one in this list.  </p>\n<p><strong>Using inotifywait</strong>,</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#watch_and_sync.sh</span>\n\n<span class=\"token comment\">#!/bin.ssh</span>\n<span class=\"token keyword\">while</span> inotifywait -r -e modify,create,delete /directory<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    <span class=\"token function\">rsync</span> -avz /directory /target\n<span class=\"token keyword\">done</span></code></pre></div>\n<p>Using gulp and <a href=\"https://www.npmjs.com/package/gulp-rsync\">gulp-rsync</a>,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install gulp-rsync --save-dev</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//gulpfile.js</span>\n<span class=\"token keyword\">var</span> gulp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'gulp'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> rsync <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'gulp-rsync'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'watch'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> watchFiles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'./src/**'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'./templates/**'</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> watcher <span class=\"token operator\">=</span> gulp<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span> watchedFiles<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'sync'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'sync'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'js/**'</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span> <span class=\"token function\">rsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      hostname<span class=\"token punctuation\">:</span> <span class=\"token string\">'remote.server.com'</span><span class=\"token punctuation\">,</span>\n      destination<span class=\"token punctuation\">:</span> <span class=\"token string\">'~/project/'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><strong>Local IDE using SSHFS</strong> - SSHFS can mount directories and files from remote machines as if they are local folders. Using this logic you can open your remotely available code base into your local IDE. Since most Linux machines support SSH and it does not need any other libraries to install and configure not to mention setups with firewalls since most would have SSH open. Although useful it’s not very consistently executed in most clients.\nFor windows, check out <a href=\"https://www.nsoftware.com/sftp/netdrive/\">NetDrive</a> and <a href=\"http://www.secfs.net/winfsp/\">WinSFP</a> </p>\n</li>\n<li>\n<p><strong>Remote editing using vi/vim</strong> - Developing using vim on the development machine. Setup requires opening a terminal and connecting to the remote machine via SSH. Then navigating to your codebase and opening vim. You are given a powerful text editor with vi’s legendary code editing features. Adding a little configuration and some plugins, vim will work a very capable IDE. It’s free and it’s local to your development machine. Problem is the learning curve and you need to get over the idea that you’re using a terminal to code. Another issue is when you need to upload new files like images and pdf’s. You will need upload via SFTP or git to add new files. </p>\n<p>Here’s a link to my <a href=\"https://github.com/chrisbautista/vim-workflow/blob/master/.vimrc\">vimrc</a> that I use to configure my vim editor. Search through github there’s no shortage of excellent vim configurations. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;====================\n&quot; vim workflow\n&quot; @chrisbautista &quot;codespud&quot;\n&quot; features:\n&quot; - asynchronous linting\n&quot; - prettier\n&quot; - dark theme\n&quot; - tree file view via NerdTree\n&quot; - fuzzy file search\n&quot; - more info on status and tab lines\n&quot; - keyboard mappings\n&quot; - php debugging\n&quot; - use , as &lt;leader&gt;\n&quot;====================\n...</code></pre></div>\n</li>\n<li>\n<p><strong>Remote editing using a cloud editor</strong> - This has been quite popular lately. Using the <a href=\"https://github.com/c9/core\">Cloud9 IDE</a> project you can set up any codebase and make it available via the browser. IDE is not as powerful as eclipse ( or clones e.g. PHPStorm, netbeans) but it keeps your code and tasks in the same machine. Significantly better as you it provides means to add files and in-editor search. Most would have terminal emulation and support for plugins. Problem is you can’t really do this for all your projects. Since you will be exposing the editor via the browser (although there are ways to secure it) you still run the risk having your code hacked easier than without it.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Install</span>\n<span class=\"token function\">git</span> clone https://github.com/c9/core.git c9sdk\n<span class=\"token function\">cd</span> c9sdk\nscripts/install-sdk.sh\n\n<span class=\"token comment\"># Start Cloud9 and expose /var/www/html</span>\nnode server.js -w /var/www/html</code></pre></div>\n</li>\n<li>\n<p><strong>VSCode with remote development pack</strong> - To be precise, the <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack\">Remote development pack</a> is only available through <a href=\"https://code.visualstudio.com/insiders/\">VS Code Insiders edition</a> as of yet. No local code needed locally when using the remote development pack. Best benefit is all your beloved VSCode plugins can run on the code as if it’s local.\nAside from SSH, the pack also include support for container setups(Docker) and Windows Subsystem for Linux (WSL). </p>\n</li>\n</ul>\n<h2>Recommendation</h2>\n<p>It really depends on what’s available for you and how comfortable you are at different editors. </p>\n<p>I still prefer using vim for remote development but having an IDE setup like <strong>VSCode with Remote Development pack</strong> comes with great benefits which a developer like me finds quite appealing. Having  to use a graphical UI for engaging my codebase not to mention having some great plugins for language support is a major plus. But this is not an article to compare the benefits of IDEs in development. :) I’ll let you decide on that on your own. </p>","fields":{"slug":"/2019-05/remote-development-setups/"},"frontmatter":{"date":"May 19, 2019","title":"Remote development setups","featured_image":"/architecture-ssh.png"}}},{"node":{"excerpt":"<p>Hosting a project wiki or a personal blog on github is very easy with github-pages and static site generators like Jekyl.  You will end up with a site hosted on <code class=\"language-text\">&lt;Project/Repository Name&gt;.github.io</code>, if you’re happy with that then skip the rest of this article. If you want more or just curious on the steps then keep reading. </p>","fields":{"slug":"/how-to-use-custom-domains-to-github-pages/"},"frontmatter":{"date":"April 22, 2019","title":"How to Use Custom Domains with Github Pages","featured_image":null}}},{"node":{"excerpt":"<p>If you work with Linux or Unix-like operating systems like Ubuntu or the MacOS, you might be familiar with Bourne-Again Shell or <a href=\"https://www.gnu.org/software/bash/bash.html\">BASH</a> for short. This article will show you that with a little elbow grease, you can have your BASH prompt work for you and heck maybe have a little fun with it.</p>\n","fields":{"slug":"/make-bash-prompt-work/"},"frontmatter":{"date":"November 14, 2016","title":"Make Your Bash Prompt Work For You","featured_image":"/assets/2016/11/mybashpromot_in_action.png"}}},{"node":{"excerpt":"<p>I’ve got some leeway pushing <a title=\"Khrunus\" href=\"https://github.com/chrisbautista/Khrunus\" target=\"_blank\">Khrunus</a> off the ground.  I’ve always been successful using JavaScript’s timing functions but since Khrunus would primarily be built-in in AngularJS. I have to research a way to reuse my timing snippets into proper Angular code.  To study, I built a simple angular app:</p>","fields":{"slug":"/how-to-make-a-timer-stopwatch-using-angularjs/"},"frontmatter":{"date":"September 28, 2014","title":"How To Make A Timer/Stopwatch Using AngularJS","featured_image":"/assets/2014/09/angular-featured.png"}}},{"node":{"excerpt":"<p>I had a struck of inspiration earlier this week. I’ve always wanted to make this webapp that has been playing in my mind  for a while and I finally had some ideas to start on.  Of course, like any of my projects, the first thing I do is research. </p>","fields":{"slug":"/quick-and-free-way-to-set-up-your-app-using-heroku/"},"frontmatter":{"date":"April 20, 2014","title":"Quick and Free Way to Set Up Your App using Heroku","featured_image":"/assets/2014/08/features-tools-3dc022115028973bfa824eb354f1d87c.png"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"limit":5,"skip":0,"numPages":5,"currentPage":1}}